

flink自适应调度器是一个有限状态机

       说明：
            AdaptiveScheduler 本身是一个有限状态机
            作业启动、停止、重启、资源申请等操作都是在不同状态转换过程中委托给 相应的状态实现来完成的
            状态类别有9 中:
                  WaitingForResources 、CreatingExecutionGraph 、Finished
                  Executing、 Restarting 、 Failing
                  Cancaling、 StopWithSavepoint、 Created


        Adaptive 的调度 和 状态机 切换的 流程全貌:

        1 最开始成员变量 state 是 Created状态, 开始调度

        Created.startScheduling
        AdaptiveScheduler.goToWaitingForResources
        AdaptiveScheduler.transitionToState（WaitingForResources.Factory）
        WaitingForResources.Factory.getState
        WaitingForResources构造方法 会先走 1.1 , 再走 1.2
             1.1  如果用户配置的 jobmanager.adaptive-scheduler.resource-wait-timeout > 0(默认5分钟), 则延迟调用

                  WaitingForResources.resourceTimeout
                  WaitingForResources.createExecutionGraphWithAvailableResources
                  //  关键点来了,这一步会用槽位池中现有的槽位 来重新确定相关 的并行度, 以此达到动态扩容的目的
                  //  具体参见  AdaptiveScheduler.determineParallelism 方法
                  AdaptiveScheduler.goToCreatingExecutionGraph   （**）

                      1.1.1  先创建执行图
                             AdaptiveScheduler.createExecutionGraphWithAvailableResourcesAsync
                                  AdaptiveScheduler.createExecutionGraphAndRestoreState
                                       DefaultExecutionGraphFactory.createAndRestoreExecutionGraph
                                            DefaultExecutionGraphBuilder.buildGraph
                      1.1.2  再切换状态
                             AdaptiveScheduler.transitionToState（CreatingExecutionGraph.Factory）
                             CreatingExecutionGraph 构造方法
                             CreatingExecutionGraph.handleExecutionGraphCreation
                                  1.1.2.1  先调用 AdaptiveScheduler.tryToAssignSlots
                                           这一步会 实际分配槽位; 并且填充 Execution 的 producedPartitions 和 assignedResource,
                                           为下一步实际执行做准备, 因为实际执行的时候是拿着 Execution 当作句柄去 部署的
                                           可以参见  Execution.deploy 方法
                                  1.1.2.2  再调用 AdaptiveScheduler.goToExecuting(ExecutionGraph)  执行作业

             1.2  第一次检查是否有新资源增加,如果有,通知 并走动态扩容的逻辑,重新创建执行图,并执行作业
                  WaitingForResources.notifyNewResourcesAvailable
                  WaitingForResources.checkDesiredOrSufficientResourcesAvailable
                      // 用新增加的资源重新 构建 执行图
                      WaitingForResources.createExecutionGraphWithAvailableResources
                      // 关键点来了,这一步会用槽位池中现有的槽位 来重新确定相关 的并行度, 以此达到动态扩容的目的
                      AdaptiveScheduler.goToCreatingExecutionGraph   （**）

                  注意, 我们要又到了 AdaptiveScheduler.goToCreatingExecutionGraph 方法, 下面的流程和 1.1 的该方法完全一样,会重走一遍1.1的流程


              (注意：1.1 和 1.2 是主线,  1.3 是第二条逻辑线)
             1.3  在本类AdaptiveScheduler在构造的时候,会给DeclarativeSlotPool成员 注册监听, 当有新的资源来时,
                  也会触发调用监听的方法,这里也就是 AdaptiveScheduler.newResourcesAvailable 方法
                         现在 调度器的状态可能是 Executing 也可能是  WaitingForResources, 它们分别会走 1.3.1 或者 1.3.2
                         1.3.1
                             // 如果能扩容才重启，否则没必要
                             Executing.notifyNewResourcesAvailable
                             AdaptiveScheduler.goToRestarting
                             AdaptiveScheduler.transitionToState（Restarting.Factory）
                                  Restarting的构造方法
                                  Restartin的父类StateWithExecutionGraph的构造方法
                                  Restarting.onGloballyTerminalState
                                  AdaptiveScheduler.goToWaitingForResources  于是 和 1 的 步骤一致了
                         或者
                         1.3.2
                            WaitingForResources.notifyNewResourcesAvailable  于是 和 1.2 的步骤一致了
