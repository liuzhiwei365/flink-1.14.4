// $ANTLR 3.5.2 org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g 2023-03-06 17:56:58

package org.apache.flink.table.planner.delegation.hive.parse;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.hive.conf.HiveConf;
import org.apache.flink.table.planner.delegation.hive.copy.HiveParserASTNode;
import org.apache.flink.table.planner.delegation.hive.copy.HiveASTParseError;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


/** Counterpart of hive's HiveParser.g. */
@SuppressWarnings("all")
public class HiveASTParser extends Parser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "AMPERSAND", "BITWISEOR", "BITWISEXOR", 
		"ByteLengthLiteral", "COLON", "COMMA", "CONCATENATE", "CharSetLiteral", 
		"CharSetName", "DIV", "DIVIDE", "DOLLAR", "DOT", "Digit", "EQUAL", "EQUAL_NS", 
		"Exponent", "GREATERTHAN", "GREATERTHANOREQUALTO", "HexDigit", "Identifier", 
		"IntegralLiteral", "KW_ABORT", "KW_ADD", "KW_ADMIN", "KW_AFTER", "KW_ALL", 
		"KW_ALTER", "KW_ANALYZE", "KW_AND", "KW_ARCHIVE", "KW_ARRAY", "KW_AS", 
		"KW_ASC", "KW_AUTHORIZATION", "KW_AUTOCOMMIT", "KW_BEFORE", "KW_BETWEEN", 
		"KW_BIGINT", "KW_BINARY", "KW_BOOLEAN", "KW_BOTH", "KW_BUCKET", "KW_BUCKETS", 
		"KW_BY", "KW_CACHE", "KW_CASCADE", "KW_CASE", "KW_CAST", "KW_CHANGE", 
		"KW_CHAR", "KW_CLUSTER", "KW_CLUSTERED", "KW_CLUSTERSTATUS", "KW_COLLECTION", 
		"KW_COLUMN", "KW_COLUMNS", "KW_COMMENT", "KW_COMMIT", "KW_COMPACT", "KW_COMPACTIONS", 
		"KW_COMPUTE", "KW_CONCATENATE", "KW_CONF", "KW_CONSTRAINT", "KW_CONTINUE", 
		"KW_CREATE", "KW_CROSS", "KW_CUBE", "KW_CURRENT", "KW_CURRENT_DATE", "KW_CURRENT_TIMESTAMP", 
		"KW_CURSOR", "KW_DATA", "KW_DATABASE", "KW_DATABASES", "KW_DATE", "KW_DATETIME", 
		"KW_DAY", "KW_DBPROPERTIES", "KW_DECIMAL", "KW_DEFERRED", "KW_DEFINED", 
		"KW_DELETE", "KW_DELIMITED", "KW_DEPENDENCY", "KW_DESC", "KW_DESCRIBE", 
		"KW_DETAIL", "KW_DIRECTORIES", "KW_DIRECTORY", "KW_DISABLE", "KW_DISTINCT", 
		"KW_DISTRIBUTE", "KW_DOUBLE", "KW_DOW", "KW_DROP", "KW_DUMP", "KW_ELEM_TYPE", 
		"KW_ELSE", "KW_ENABLE", "KW_END", "KW_ESCAPED", "KW_EXCEPT", "KW_EXCHANGE", 
		"KW_EXCLUSIVE", "KW_EXISTS", "KW_EXPLAIN", "KW_EXPORT", "KW_EXPRESSION", 
		"KW_EXTENDED", "KW_EXTERNAL", "KW_EXTRACT", "KW_FALSE", "KW_FETCH", "KW_FIELDS", 
		"KW_FILE", "KW_FILEFORMAT", "KW_FIRST", "KW_FLOAT", "KW_FLOOR", "KW_FOLLOWING", 
		"KW_FOR", "KW_FOREIGN", "KW_FORMAT", "KW_FORMATTED", "KW_FROM", "KW_FULL", 
		"KW_FUNCTION", "KW_FUNCTIONS", "KW_GRANT", "KW_GROUP", "KW_GROUPING", 
		"KW_HAVING", "KW_HOUR", "KW_IDXPROPERTIES", "KW_IF", "KW_IMPORT", "KW_IN", 
		"KW_INDEX", "KW_INDEXES", "KW_INNER", "KW_INPATH", "KW_INPUTDRIVER", "KW_INPUTFORMAT", 
		"KW_INSERT", "KW_INT", "KW_INTERSECT", "KW_INTERVAL", "KW_INTO", "KW_IS", 
		"KW_ISOLATION", "KW_ITEMS", "KW_JAR", "KW_JOIN", "KW_KEY", "KW_KEYS", 
		"KW_KEY_TYPE", "KW_LAST", "KW_LATERAL", "KW_LEFT", "KW_LESS", "KW_LEVEL", 
		"KW_LIKE", "KW_LIMIT", "KW_LINES", "KW_LOAD", "KW_LOCAL", "KW_LOCATION", 
		"KW_LOCK", "KW_LOCKS", "KW_LOGICAL", "KW_LONG", "KW_MACRO", "KW_MAP", 
		"KW_MAPJOIN", "KW_MATCHED", "KW_MATERIALIZED", "KW_MERGE", "KW_METADATA", 
		"KW_MINUS", "KW_MINUTE", "KW_MONTH", "KW_MORE", "KW_MSCK", "KW_NONE", 
		"KW_NORELY", "KW_NOSCAN", "KW_NOT", "KW_NOVALIDATE", "KW_NULL", "KW_NULLS", 
		"KW_OF", "KW_OFFSET", "KW_ON", "KW_ONLY", "KW_OPERATOR", "KW_OPTION", 
		"KW_OR", "KW_ORDER", "KW_OUT", "KW_OUTER", "KW_OUTPUTDRIVER", "KW_OUTPUTFORMAT", 
		"KW_OVER", "KW_OVERWRITE", "KW_OWNER", "KW_PARTIALSCAN", "KW_PARTITION", 
		"KW_PARTITIONED", "KW_PARTITIONS", "KW_PERCENT", "KW_PLUS", "KW_PRECEDING", 
		"KW_PRECISION", "KW_PRESERVE", "KW_PRETTY", "KW_PRIMARY", "KW_PRINCIPALS", 
		"KW_PROCEDURE", "KW_PURGE", "KW_QUARTER", "KW_RANGE", "KW_READ", "KW_READS", 
		"KW_REBUILD", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_REDUCE", "KW_REFERENCES", 
		"KW_REGEXP", "KW_RELOAD", "KW_RELY", "KW_RENAME", "KW_REPAIR", "KW_REPL", 
		"KW_REPLACE", "KW_REPLICATION", "KW_RESTRICT", "KW_REVOKE", "KW_REWRITE", 
		"KW_RIGHT", "KW_RLIKE", "KW_ROLE", "KW_ROLES", "KW_ROLLBACK", "KW_ROLLUP", 
		"KW_ROW", "KW_ROWS", "KW_SCHEMA", "KW_SCHEMAS", "KW_SECOND", "KW_SELECT", 
		"KW_SEMI", "KW_SERDE", "KW_SERDEPROPERTIES", "KW_SERVER", "KW_SET", "KW_SETS", 
		"KW_SHARED", "KW_SHOW", "KW_SHOW_DATABASE", "KW_SKEWED", "KW_SMALLINT", 
		"KW_SNAPSHOT", "KW_SORT", "KW_SORTED", "KW_SSL", "KW_START", "KW_STATISTICS", 
		"KW_STATUS", "KW_STORED", "KW_STREAMTABLE", "KW_STRING", "KW_STRUCT", 
		"KW_SUMMARY", "KW_TABLE", "KW_TABLES", "KW_TABLESAMPLE", "KW_TBLPROPERTIES", 
		"KW_TEMPORARY", "KW_TERMINATED", "KW_THEN", "KW_TIMESTAMP", "KW_TINYINT", 
		"KW_TO", "KW_TOUCH", "KW_TRANSACTION", "KW_TRANSACTIONS", "KW_TRANSFORM", 
		"KW_TRIGGER", "KW_TRUE", "KW_TRUNCATE", "KW_UNARCHIVE", "KW_UNBOUNDED", 
		"KW_UNDO", "KW_UNION", "KW_UNIONTYPE", "KW_UNIQUE", "KW_UNIQUEJOIN", "KW_UNLOCK", 
		"KW_UNSET", "KW_UNSIGNED", "KW_UPDATE", "KW_URI", "KW_USE", "KW_USER", 
		"KW_USING", "KW_UTC", "KW_UTCTIMESTAMP", "KW_VALIDATE", "KW_VALUES", "KW_VALUE_TYPE", 
		"KW_VARCHAR", "KW_VECTORIZATION", "KW_VIEW", "KW_VIEWS", "KW_WAIT", "KW_WEEK", 
		"KW_WHEN", "KW_WHERE", "KW_WHILE", "KW_WINDOW", "KW_WITH", "KW_WORK", 
		"KW_WRITE", "KW_YEAR", "LCURLY", "LESSTHAN", "LESSTHANOREQUALTO", "LINE_COMMENT", 
		"LPAREN", "LSQUARE", "Letter", "MINUS", "MOD", "NOTEQUAL", "Number", "NumberLiteral", 
		"PLUS", "QUERY_HINT", "QUESTION", "QuotedIdentifier", "RCURLY", "RPAREN", 
		"RSQUARE", "RegexComponent", "SEMICOLON", "STAR", "StringLiteral", "TILDE", 
		"WS", "KW_BATCH", "KW_DAYOFWEEK", "KW_HOLD_DDLTIME", "KW_IGNORE", "KW_NO_DROP", 
		"KW_OFFLINE", "KW_PROTECTION", "KW_READONLY", "TOK_ABORT_TRANSACTIONS", 
		"TOK_ADMIN_OPTION_FOR", "TOK_ALIASLIST", "TOK_ALLCOLREF", "TOK_ALTERDATABASE_LOCATION", 
		"TOK_ALTERDATABASE_OWNER", "TOK_ALTERDATABASE_PROPERTIES", "TOK_ALTERINDEX_PROPERTIES", 
		"TOK_ALTERINDEX_REBUILD", "TOK_ALTERTABLE", "TOK_ALTERTABLE_ADDCOLS", 
		"TOK_ALTERTABLE_ADDCONSTRAINT", "TOK_ALTERTABLE_ADDPARTS", "TOK_ALTERTABLE_ARCHIVE", 
		"TOK_ALTERTABLE_BUCKETS", "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION", "TOK_ALTERTABLE_CLUSTER_SORT", 
		"TOK_ALTERTABLE_COMPACT", "TOK_ALTERTABLE_DROPCONSTRAINT", "TOK_ALTERTABLE_DROPPARTS", 
		"TOK_ALTERTABLE_DROPPROPERTIES", "TOK_ALTERTABLE_EXCHANGEPARTITION", "TOK_ALTERTABLE_FILEFORMAT", 
		"TOK_ALTERTABLE_LOCATION", "TOK_ALTERTABLE_MERGEFILES", "TOK_ALTERTABLE_PARTCOLTYPE", 
		"TOK_ALTERTABLE_PROPERTIES", "TOK_ALTERTABLE_RENAME", "TOK_ALTERTABLE_RENAMECOL", 
		"TOK_ALTERTABLE_RENAMEPART", "TOK_ALTERTABLE_REPLACECOLS", "TOK_ALTERTABLE_SERDEPROPERTIES", 
		"TOK_ALTERTABLE_SERIALIZER", "TOK_ALTERTABLE_SKEWED", "TOK_ALTERTABLE_SKEWED_LOCATION", 
		"TOK_ALTERTABLE_TOUCH", "TOK_ALTERTABLE_UNARCHIVE", "TOK_ALTERTABLE_UPDATECOLSTATS", 
		"TOK_ALTERTABLE_UPDATESTATS", "TOK_ALTERVIEW", "TOK_ALTERVIEW_ADDPARTS", 
		"TOK_ALTERVIEW_DROPPARTS", "TOK_ALTERVIEW_DROPPROPERTIES", "TOK_ALTERVIEW_PROPERTIES", 
		"TOK_ALTERVIEW_RENAME", "TOK_ANALYZE", "TOK_ANONYMOUS", "TOK_ARCHIVE", 
		"TOK_BIGINT", "TOK_BINARY", "TOK_BLOCKING", "TOK_BOOLEAN", "TOK_CACHE_METADATA", 
		"TOK_CASCADE", "TOK_CHAR", "TOK_CHARSETLITERAL", "TOK_CLUSTERBY", "TOK_COLTYPELIST", 
		"TOK_COL_NAME", "TOK_COMMIT", "TOK_CONSTRAINT_NAME", "TOK_CREATEDATABASE", 
		"TOK_CREATEFUNCTION", "TOK_CREATEINDEX", "TOK_CREATEINDEX_INDEXTBLNAME", 
		"TOK_CREATEMACRO", "TOK_CREATEROLE", "TOK_CREATETABLE", "TOK_CREATEVIEW", 
		"TOK_CREATE_MATERIALIZED_VIEW", "TOK_CROSSJOIN", "TOK_CTE", "TOK_CUBE_GROUPBY", 
		"TOK_DATABASECOMMENT", "TOK_DATABASELOCATION", "TOK_DATABASEPROPERTIES", 
		"TOK_DATE", "TOK_DATELITERAL", "TOK_DATETIME", "TOK_DBPROPLIST", "TOK_DB_TYPE", 
		"TOK_DECIMAL", "TOK_DEFERRED_REBUILDINDEX", "TOK_DELETE", "TOK_DELETE_FROM", 
		"TOK_DESCDATABASE", "TOK_DESCFUNCTION", "TOK_DESCTABLE", "TOK_DESTINATION", 
		"TOK_DETAIL", "TOK_DIR", "TOK_DISABLE", "TOK_DISTRIBUTEBY", "TOK_DOUBLE", 
		"TOK_DROPDATABASE", "TOK_DROPFUNCTION", "TOK_DROPINDEX", "TOK_DROPMACRO", 
		"TOK_DROPROLE", "TOK_DROPTABLE", "TOK_DROPVIEW", "TOK_DROP_MATERIALIZED_VIEW", 
		"TOK_ENABLE", "TOK_EXCEPTALL", "TOK_EXCEPTDISTINCT", "TOK_EXPLAIN", "TOK_EXPLAIN_SQ_REWRITE", 
		"TOK_EXPLIST", "TOK_EXPORT", "TOK_EXPRESSION", "TOK_FALSE", "TOK_FILE", 
		"TOK_FILEFORMAT_GENERIC", "TOK_FLOAT", "TOK_FOREIGN_KEY", "TOK_FROM", 
		"TOK_FULLOUTERJOIN", "TOK_FUNCTION", "TOK_FUNCTIONDI", "TOK_FUNCTIONSTAR", 
		"TOK_GRANT", "TOK_GRANT_OPTION_FOR", "TOK_GRANT_ROLE", "TOK_GRANT_WITH_ADMIN_OPTION", 
		"TOK_GRANT_WITH_OPTION", "TOK_GROUP", "TOK_GROUPBY", "TOK_GROUPING_SETS", 
		"TOK_GROUPING_SETS_EXPRESSION", "TOK_HAVING", "TOK_IFEXISTS", "TOK_IFNOTEXISTS", 
		"TOK_IMPORT", "TOK_INDEXCOMMENT", "TOK_INDEXPROPERTIES", "TOK_INDEXPROPLIST", 
		"TOK_INSERT", "TOK_INSERT_INTO", "TOK_INT", "TOK_INTERSECTALL", "TOK_INTERSECTDISTINCT", 
		"TOK_INTERVAL_DAY_LITERAL", "TOK_INTERVAL_DAY_TIME", "TOK_INTERVAL_DAY_TIME_LITERAL", 
		"TOK_INTERVAL_HOUR_LITERAL", "TOK_INTERVAL_MINUTE_LITERAL", "TOK_INTERVAL_MONTH_LITERAL", 
		"TOK_INTERVAL_SECOND_LITERAL", "TOK_INTERVAL_YEAR_LITERAL", "TOK_INTERVAL_YEAR_MONTH", 
		"TOK_INTERVAL_YEAR_MONTH_LITERAL", "TOK_ISNOTNULL", "TOK_ISNULL", "TOK_ISOLATION_LEVEL", 
		"TOK_ISOLATION_SNAPSHOT", "TOK_JAR", "TOK_JOIN", "TOK_LATERAL_VIEW", "TOK_LATERAL_VIEW_OUTER", 
		"TOK_LEFTOUTERJOIN", "TOK_LEFTSEMIJOIN", "TOK_LENGTH", "TOK_LIKETABLE", 
		"TOK_LIMIT", "TOK_LIST", "TOK_LOAD", "TOK_LOCKDB", "TOK_LOCKTABLE", "TOK_MAP", 
		"TOK_MATCHED", "TOK_MERGE", "TOK_METADATA", "TOK_MSCK", "TOK_NORELY", 
		"TOK_NOT_CLUSTERED", "TOK_NOT_MATCHED", "TOK_NOT_NULL", "TOK_NOT_SORTED", 
		"TOK_NOVALIDATE", "TOK_NO_DROP", "TOK_NULL", "TOK_NULLS_FIRST", "TOK_NULLS_LAST", 
		"TOK_OFFLINE", "TOK_OFFSET", "TOK_ONLY", "TOK_OPERATOR", "TOK_OP_ADD", 
		"TOK_OP_AND", "TOK_OP_BITAND", "TOK_OP_BITNOT", "TOK_OP_BITOR", "TOK_OP_BITXOR", 
		"TOK_OP_DIV", "TOK_OP_EQ", "TOK_OP_GE", "TOK_OP_GT", "TOK_OP_LE", "TOK_OP_LIKE", 
		"TOK_OP_LT", "TOK_OP_MOD", "TOK_OP_MUL", "TOK_OP_NE", "TOK_OP_NOT", "TOK_OP_OR", 
		"TOK_OP_SUB", "TOK_ORDERBY", "TOK_ORREPLACE", "TOK_PARTITIONINGSPEC", 
		"TOK_PARTITIONLOCATION", "TOK_PARTSPEC", "TOK_PARTVAL", "TOK_PERCENT", 
		"TOK_PRIMARY_KEY", "TOK_PRINCIPAL_NAME", "TOK_PRIVILEGE", "TOK_PRIVILEGE_LIST", 
		"TOK_PRIV_ALL", "TOK_PRIV_ALTER_DATA", "TOK_PRIV_ALTER_METADATA", "TOK_PRIV_CREATE", 
		"TOK_PRIV_DELETE", "TOK_PRIV_DROP", "TOK_PRIV_INDEX", "TOK_PRIV_INSERT", 
		"TOK_PRIV_LOCK", "TOK_PRIV_OBJECT", "TOK_PRIV_OBJECT_COL", "TOK_PRIV_SELECT", 
		"TOK_PRIV_SHOW_DATABASE", "TOK_PTBLFUNCTION", "TOK_QUERY", "TOK_READONLY", 
		"TOK_RECORDREADER", "TOK_RECORDWRITER", "TOK_RELOADFUNCTION", "TOK_RELY", 
		"TOK_REPLICATION", "TOK_REPL_DUMP", "TOK_REPL_LOAD", "TOK_REPL_STATUS", 
		"TOK_RESOURCE_ALL", "TOK_RESOURCE_LIST", "TOK_RESOURCE_URI", "TOK_RESTRICT", 
		"TOK_REVOKE", "TOK_REVOKE_ROLE", "TOK_REWRITE_DISABLED", "TOK_REWRITE_ENABLED", 
		"TOK_RIGHTOUTERJOIN", "TOK_ROLE", "TOK_ROLLBACK", "TOK_ROLLUP_GROUPBY", 
		"TOK_ROWCOUNT", "TOK_SELECT", "TOK_SELECTDI", "TOK_SELEXPR", "TOK_SERDE", 
		"TOK_SERDENAME", "TOK_SERDEPROPS", "TOK_SERVER_TYPE", "TOK_SETCOLREF", 
		"TOK_SET_AUTOCOMMIT", "TOK_SET_COLUMNS_CLAUSE", "TOK_SHOWCOLUMNS", "TOK_SHOWCONF", 
		"TOK_SHOWDATABASES", "TOK_SHOWDBLOCKS", "TOK_SHOWFUNCTIONS", "TOK_SHOWINDEXES", 
		"TOK_SHOWLOCKS", "TOK_SHOWPARTITIONS", "TOK_SHOWTABLES", "TOK_SHOWVIEWS", 
		"TOK_SHOW_COMPACTIONS", "TOK_SHOW_CREATEDATABASE", "TOK_SHOW_CREATETABLE", 
		"TOK_SHOW_GRANT", "TOK_SHOW_ROLES", "TOK_SHOW_ROLE_GRANT", "TOK_SHOW_ROLE_PRINCIPALS", 
		"TOK_SHOW_SET_ROLE", "TOK_SHOW_TABLESTATUS", "TOK_SHOW_TBLPROPERTIES", 
		"TOK_SHOW_TRANSACTIONS", "TOK_SKEWED_LOCATIONS", "TOK_SKEWED_LOCATION_LIST", 
		"TOK_SKEWED_LOCATION_MAP", "TOK_SMALLINT", "TOK_SORTBY", "TOK_START_TRANSACTION", 
		"TOK_STORAGEHANDLER", "TOK_STOREDASDIRS", "TOK_STRING", "TOK_STRINGLITERALSEQUENCE", 
		"TOK_STRUCT", "TOK_SUBQUERY", "TOK_SUBQUERY_EXPR", "TOK_SUBQUERY_OP", 
		"TOK_SUBQUERY_OP_NOTEXISTS", "TOK_SUBQUERY_OP_NOTIN", "TOK_SUMMARY", "TOK_SWITCHDATABASE", 
		"TOK_TAB", "TOK_TABALIAS", "TOK_TABCOL", "TOK_TABCOLLIST", "TOK_TABCOLNAME", 
		"TOK_TABCOLVALUE", "TOK_TABCOLVALUES", "TOK_TABCOLVALUE_PAIR", "TOK_TABLEBUCKETSAMPLE", 
		"TOK_TABLECOMMENT", "TOK_TABLEFILEFORMAT", "TOK_TABLELOCATION", "TOK_TABLEPARTCOLS", 
		"TOK_TABLEPROPERTIES", "TOK_TABLEPROPERTY", "TOK_TABLEPROPLIST", "TOK_TABLEROWFORMAT", 
		"TOK_TABLEROWFORMATCOLLITEMS", "TOK_TABLEROWFORMATFIELD", "TOK_TABLEROWFORMATLINES", 
		"TOK_TABLEROWFORMATMAPKEYS", "TOK_TABLEROWFORMATNULL", "TOK_TABLESERIALIZER", 
		"TOK_TABLESKEWED", "TOK_TABLESPLITSAMPLE", "TOK_TABLE_OR_COL", "TOK_TABLE_PARTITION", 
		"TOK_TABLE_TYPE", "TOK_TABNAME", "TOK_TABREF", "TOK_TABSORTCOLNAMEASC", 
		"TOK_TABSORTCOLNAMEDESC", "TOK_TABSRC", "TOK_TABTYPE", "TOK_TEMPORARY", 
		"TOK_TIMESTAMP", "TOK_TIMESTAMPLITERAL", "TOK_TINYINT", "TOK_TMP_FILE", 
		"TOK_TO", "TOK_TRANSFORM", "TOK_TRUE", "TOK_TRUNCATETABLE", "TOK_TXN_ACCESS_MODE", 
		"TOK_TXN_READ_ONLY", "TOK_TXN_READ_WRITE", "TOK_UNIONALL", "TOK_UNIONDISTINCT", 
		"TOK_UNIONTYPE", "TOK_UNIQUE", "TOK_UNIQUEJOIN", "TOK_UNLOCKDB", "TOK_UNLOCKTABLE", 
		"TOK_UPDATE", "TOK_UPDATE_TABLE", "TOK_URI_TYPE", "TOK_USER", "TOK_USERSCRIPTCOLNAMES", 
		"TOK_USERSCRIPTCOLSCHEMA", "TOK_VALIDATE", "TOK_VALUES_TABLE", "TOK_VALUE_ROW", 
		"TOK_VARCHAR", "TOK_VIEWPARTCOLS", "TOK_VIRTUAL_TABLE", "TOK_VIRTUAL_TABREF", 
		"TOK_WHERE", "TOK_WINDOWDEF", "TOK_WINDOWRANGE", "TOK_WINDOWSPEC", "TOK_WINDOWVALUES"
	};
	public static final int EOF=-1;
	public static final int AMPERSAND=4;
	public static final int BITWISEOR=5;
	public static final int BITWISEXOR=6;
	public static final int ByteLengthLiteral=7;
	public static final int COLON=8;
	public static final int COMMA=9;
	public static final int CONCATENATE=10;
	public static final int CharSetLiteral=11;
	public static final int CharSetName=12;
	public static final int DIV=13;
	public static final int DIVIDE=14;
	public static final int DOLLAR=15;
	public static final int DOT=16;
	public static final int Digit=17;
	public static final int EQUAL=18;
	public static final int EQUAL_NS=19;
	public static final int Exponent=20;
	public static final int GREATERTHAN=21;
	public static final int GREATERTHANOREQUALTO=22;
	public static final int HexDigit=23;
	public static final int Identifier=24;
	public static final int IntegralLiteral=25;
	public static final int KW_ABORT=26;
	public static final int KW_ADD=27;
	public static final int KW_ADMIN=28;
	public static final int KW_AFTER=29;
	public static final int KW_ALL=30;
	public static final int KW_ALTER=31;
	public static final int KW_ANALYZE=32;
	public static final int KW_AND=33;
	public static final int KW_ARCHIVE=34;
	public static final int KW_ARRAY=35;
	public static final int KW_AS=36;
	public static final int KW_ASC=37;
	public static final int KW_AUTHORIZATION=38;
	public static final int KW_AUTOCOMMIT=39;
	public static final int KW_BEFORE=40;
	public static final int KW_BETWEEN=41;
	public static final int KW_BIGINT=42;
	public static final int KW_BINARY=43;
	public static final int KW_BOOLEAN=44;
	public static final int KW_BOTH=45;
	public static final int KW_BUCKET=46;
	public static final int KW_BUCKETS=47;
	public static final int KW_BY=48;
	public static final int KW_CACHE=49;
	public static final int KW_CASCADE=50;
	public static final int KW_CASE=51;
	public static final int KW_CAST=52;
	public static final int KW_CHANGE=53;
	public static final int KW_CHAR=54;
	public static final int KW_CLUSTER=55;
	public static final int KW_CLUSTERED=56;
	public static final int KW_CLUSTERSTATUS=57;
	public static final int KW_COLLECTION=58;
	public static final int KW_COLUMN=59;
	public static final int KW_COLUMNS=60;
	public static final int KW_COMMENT=61;
	public static final int KW_COMMIT=62;
	public static final int KW_COMPACT=63;
	public static final int KW_COMPACTIONS=64;
	public static final int KW_COMPUTE=65;
	public static final int KW_CONCATENATE=66;
	public static final int KW_CONF=67;
	public static final int KW_CONSTRAINT=68;
	public static final int KW_CONTINUE=69;
	public static final int KW_CREATE=70;
	public static final int KW_CROSS=71;
	public static final int KW_CUBE=72;
	public static final int KW_CURRENT=73;
	public static final int KW_CURRENT_DATE=74;
	public static final int KW_CURRENT_TIMESTAMP=75;
	public static final int KW_CURSOR=76;
	public static final int KW_DATA=77;
	public static final int KW_DATABASE=78;
	public static final int KW_DATABASES=79;
	public static final int KW_DATE=80;
	public static final int KW_DATETIME=81;
	public static final int KW_DAY=82;
	public static final int KW_DBPROPERTIES=83;
	public static final int KW_DECIMAL=84;
	public static final int KW_DEFERRED=85;
	public static final int KW_DEFINED=86;
	public static final int KW_DELETE=87;
	public static final int KW_DELIMITED=88;
	public static final int KW_DEPENDENCY=89;
	public static final int KW_DESC=90;
	public static final int KW_DESCRIBE=91;
	public static final int KW_DETAIL=92;
	public static final int KW_DIRECTORIES=93;
	public static final int KW_DIRECTORY=94;
	public static final int KW_DISABLE=95;
	public static final int KW_DISTINCT=96;
	public static final int KW_DISTRIBUTE=97;
	public static final int KW_DOUBLE=98;
	public static final int KW_DOW=99;
	public static final int KW_DROP=100;
	public static final int KW_DUMP=101;
	public static final int KW_ELEM_TYPE=102;
	public static final int KW_ELSE=103;
	public static final int KW_ENABLE=104;
	public static final int KW_END=105;
	public static final int KW_ESCAPED=106;
	public static final int KW_EXCEPT=107;
	public static final int KW_EXCHANGE=108;
	public static final int KW_EXCLUSIVE=109;
	public static final int KW_EXISTS=110;
	public static final int KW_EXPLAIN=111;
	public static final int KW_EXPORT=112;
	public static final int KW_EXPRESSION=113;
	public static final int KW_EXTENDED=114;
	public static final int KW_EXTERNAL=115;
	public static final int KW_EXTRACT=116;
	public static final int KW_FALSE=117;
	public static final int KW_FETCH=118;
	public static final int KW_FIELDS=119;
	public static final int KW_FILE=120;
	public static final int KW_FILEFORMAT=121;
	public static final int KW_FIRST=122;
	public static final int KW_FLOAT=123;
	public static final int KW_FLOOR=124;
	public static final int KW_FOLLOWING=125;
	public static final int KW_FOR=126;
	public static final int KW_FOREIGN=127;
	public static final int KW_FORMAT=128;
	public static final int KW_FORMATTED=129;
	public static final int KW_FROM=130;
	public static final int KW_FULL=131;
	public static final int KW_FUNCTION=132;
	public static final int KW_FUNCTIONS=133;
	public static final int KW_GRANT=134;
	public static final int KW_GROUP=135;
	public static final int KW_GROUPING=136;
	public static final int KW_HAVING=137;
	public static final int KW_HOUR=138;
	public static final int KW_IDXPROPERTIES=139;
	public static final int KW_IF=140;
	public static final int KW_IMPORT=141;
	public static final int KW_IN=142;
	public static final int KW_INDEX=143;
	public static final int KW_INDEXES=144;
	public static final int KW_INNER=145;
	public static final int KW_INPATH=146;
	public static final int KW_INPUTDRIVER=147;
	public static final int KW_INPUTFORMAT=148;
	public static final int KW_INSERT=149;
	public static final int KW_INT=150;
	public static final int KW_INTERSECT=151;
	public static final int KW_INTERVAL=152;
	public static final int KW_INTO=153;
	public static final int KW_IS=154;
	public static final int KW_ISOLATION=155;
	public static final int KW_ITEMS=156;
	public static final int KW_JAR=157;
	public static final int KW_JOIN=158;
	public static final int KW_KEY=159;
	public static final int KW_KEYS=160;
	public static final int KW_KEY_TYPE=161;
	public static final int KW_LAST=162;
	public static final int KW_LATERAL=163;
	public static final int KW_LEFT=164;
	public static final int KW_LESS=165;
	public static final int KW_LEVEL=166;
	public static final int KW_LIKE=167;
	public static final int KW_LIMIT=168;
	public static final int KW_LINES=169;
	public static final int KW_LOAD=170;
	public static final int KW_LOCAL=171;
	public static final int KW_LOCATION=172;
	public static final int KW_LOCK=173;
	public static final int KW_LOCKS=174;
	public static final int KW_LOGICAL=175;
	public static final int KW_LONG=176;
	public static final int KW_MACRO=177;
	public static final int KW_MAP=178;
	public static final int KW_MAPJOIN=179;
	public static final int KW_MATCHED=180;
	public static final int KW_MATERIALIZED=181;
	public static final int KW_MERGE=182;
	public static final int KW_METADATA=183;
	public static final int KW_MINUS=184;
	public static final int KW_MINUTE=185;
	public static final int KW_MONTH=186;
	public static final int KW_MORE=187;
	public static final int KW_MSCK=188;
	public static final int KW_NONE=189;
	public static final int KW_NORELY=190;
	public static final int KW_NOSCAN=191;
	public static final int KW_NOT=192;
	public static final int KW_NOVALIDATE=193;
	public static final int KW_NULL=194;
	public static final int KW_NULLS=195;
	public static final int KW_OF=196;
	public static final int KW_OFFSET=197;
	public static final int KW_ON=198;
	public static final int KW_ONLY=199;
	public static final int KW_OPERATOR=200;
	public static final int KW_OPTION=201;
	public static final int KW_OR=202;
	public static final int KW_ORDER=203;
	public static final int KW_OUT=204;
	public static final int KW_OUTER=205;
	public static final int KW_OUTPUTDRIVER=206;
	public static final int KW_OUTPUTFORMAT=207;
	public static final int KW_OVER=208;
	public static final int KW_OVERWRITE=209;
	public static final int KW_OWNER=210;
	public static final int KW_PARTIALSCAN=211;
	public static final int KW_PARTITION=212;
	public static final int KW_PARTITIONED=213;
	public static final int KW_PARTITIONS=214;
	public static final int KW_PERCENT=215;
	public static final int KW_PLUS=216;
	public static final int KW_PRECEDING=217;
	public static final int KW_PRECISION=218;
	public static final int KW_PRESERVE=219;
	public static final int KW_PRETTY=220;
	public static final int KW_PRIMARY=221;
	public static final int KW_PRINCIPALS=222;
	public static final int KW_PROCEDURE=223;
	public static final int KW_PURGE=224;
	public static final int KW_QUARTER=225;
	public static final int KW_RANGE=226;
	public static final int KW_READ=227;
	public static final int KW_READS=228;
	public static final int KW_REBUILD=229;
	public static final int KW_RECORDREADER=230;
	public static final int KW_RECORDWRITER=231;
	public static final int KW_REDUCE=232;
	public static final int KW_REFERENCES=233;
	public static final int KW_REGEXP=234;
	public static final int KW_RELOAD=235;
	public static final int KW_RELY=236;
	public static final int KW_RENAME=237;
	public static final int KW_REPAIR=238;
	public static final int KW_REPL=239;
	public static final int KW_REPLACE=240;
	public static final int KW_REPLICATION=241;
	public static final int KW_RESTRICT=242;
	public static final int KW_REVOKE=243;
	public static final int KW_REWRITE=244;
	public static final int KW_RIGHT=245;
	public static final int KW_RLIKE=246;
	public static final int KW_ROLE=247;
	public static final int KW_ROLES=248;
	public static final int KW_ROLLBACK=249;
	public static final int KW_ROLLUP=250;
	public static final int KW_ROW=251;
	public static final int KW_ROWS=252;
	public static final int KW_SCHEMA=253;
	public static final int KW_SCHEMAS=254;
	public static final int KW_SECOND=255;
	public static final int KW_SELECT=256;
	public static final int KW_SEMI=257;
	public static final int KW_SERDE=258;
	public static final int KW_SERDEPROPERTIES=259;
	public static final int KW_SERVER=260;
	public static final int KW_SET=261;
	public static final int KW_SETS=262;
	public static final int KW_SHARED=263;
	public static final int KW_SHOW=264;
	public static final int KW_SHOW_DATABASE=265;
	public static final int KW_SKEWED=266;
	public static final int KW_SMALLINT=267;
	public static final int KW_SNAPSHOT=268;
	public static final int KW_SORT=269;
	public static final int KW_SORTED=270;
	public static final int KW_SSL=271;
	public static final int KW_START=272;
	public static final int KW_STATISTICS=273;
	public static final int KW_STATUS=274;
	public static final int KW_STORED=275;
	public static final int KW_STREAMTABLE=276;
	public static final int KW_STRING=277;
	public static final int KW_STRUCT=278;
	public static final int KW_SUMMARY=279;
	public static final int KW_TABLE=280;
	public static final int KW_TABLES=281;
	public static final int KW_TABLESAMPLE=282;
	public static final int KW_TBLPROPERTIES=283;
	public static final int KW_TEMPORARY=284;
	public static final int KW_TERMINATED=285;
	public static final int KW_THEN=286;
	public static final int KW_TIMESTAMP=287;
	public static final int KW_TINYINT=288;
	public static final int KW_TO=289;
	public static final int KW_TOUCH=290;
	public static final int KW_TRANSACTION=291;
	public static final int KW_TRANSACTIONS=292;
	public static final int KW_TRANSFORM=293;
	public static final int KW_TRIGGER=294;
	public static final int KW_TRUE=295;
	public static final int KW_TRUNCATE=296;
	public static final int KW_UNARCHIVE=297;
	public static final int KW_UNBOUNDED=298;
	public static final int KW_UNDO=299;
	public static final int KW_UNION=300;
	public static final int KW_UNIONTYPE=301;
	public static final int KW_UNIQUE=302;
	public static final int KW_UNIQUEJOIN=303;
	public static final int KW_UNLOCK=304;
	public static final int KW_UNSET=305;
	public static final int KW_UNSIGNED=306;
	public static final int KW_UPDATE=307;
	public static final int KW_URI=308;
	public static final int KW_USE=309;
	public static final int KW_USER=310;
	public static final int KW_USING=311;
	public static final int KW_UTC=312;
	public static final int KW_UTCTIMESTAMP=313;
	public static final int KW_VALIDATE=314;
	public static final int KW_VALUES=315;
	public static final int KW_VALUE_TYPE=316;
	public static final int KW_VARCHAR=317;
	public static final int KW_VECTORIZATION=318;
	public static final int KW_VIEW=319;
	public static final int KW_VIEWS=320;
	public static final int KW_WAIT=321;
	public static final int KW_WEEK=322;
	public static final int KW_WHEN=323;
	public static final int KW_WHERE=324;
	public static final int KW_WHILE=325;
	public static final int KW_WINDOW=326;
	public static final int KW_WITH=327;
	public static final int KW_WORK=328;
	public static final int KW_WRITE=329;
	public static final int KW_YEAR=330;
	public static final int LCURLY=331;
	public static final int LESSTHAN=332;
	public static final int LESSTHANOREQUALTO=333;
	public static final int LINE_COMMENT=334;
	public static final int LPAREN=335;
	public static final int LSQUARE=336;
	public static final int Letter=337;
	public static final int MINUS=338;
	public static final int MOD=339;
	public static final int NOTEQUAL=340;
	public static final int Number=341;
	public static final int NumberLiteral=342;
	public static final int PLUS=343;
	public static final int QUERY_HINT=344;
	public static final int QUESTION=345;
	public static final int QuotedIdentifier=346;
	public static final int RCURLY=347;
	public static final int RPAREN=348;
	public static final int RSQUARE=349;
	public static final int RegexComponent=350;
	public static final int SEMICOLON=351;
	public static final int STAR=352;
	public static final int StringLiteral=353;
	public static final int TILDE=354;
	public static final int WS=355;
	public static final int KW_BATCH=385;
	public static final int KW_DAYOFWEEK=420;
	public static final int KW_HOLD_DDLTIME=463;
	public static final int KW_IGNORE=467;
	public static final int KW_NO_DROP=510;
	public static final int KW_OFFLINE=514;
	public static final int KW_PROTECTION=537;
	public static final int KW_READONLY=542;
	public static final int TOK_ABORT_TRANSACTIONS=649;
	public static final int TOK_ADMIN_OPTION_FOR=650;
	public static final int TOK_ALIASLIST=651;
	public static final int TOK_ALLCOLREF=652;
	public static final int TOK_ALTERDATABASE_LOCATION=653;
	public static final int TOK_ALTERDATABASE_OWNER=654;
	public static final int TOK_ALTERDATABASE_PROPERTIES=655;
	public static final int TOK_ALTERINDEX_PROPERTIES=656;
	public static final int TOK_ALTERINDEX_REBUILD=657;
	public static final int TOK_ALTERTABLE=658;
	public static final int TOK_ALTERTABLE_ADDCOLS=659;
	public static final int TOK_ALTERTABLE_ADDCONSTRAINT=660;
	public static final int TOK_ALTERTABLE_ADDPARTS=661;
	public static final int TOK_ALTERTABLE_ARCHIVE=662;
	public static final int TOK_ALTERTABLE_BUCKETS=663;
	public static final int TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION=664;
	public static final int TOK_ALTERTABLE_CLUSTER_SORT=665;
	public static final int TOK_ALTERTABLE_COMPACT=666;
	public static final int TOK_ALTERTABLE_DROPCONSTRAINT=667;
	public static final int TOK_ALTERTABLE_DROPPARTS=668;
	public static final int TOK_ALTERTABLE_DROPPROPERTIES=669;
	public static final int TOK_ALTERTABLE_EXCHANGEPARTITION=670;
	public static final int TOK_ALTERTABLE_FILEFORMAT=671;
	public static final int TOK_ALTERTABLE_LOCATION=672;
	public static final int TOK_ALTERTABLE_MERGEFILES=673;
	public static final int TOK_ALTERTABLE_PARTCOLTYPE=674;
	public static final int TOK_ALTERTABLE_PROPERTIES=675;
	public static final int TOK_ALTERTABLE_RENAME=676;
	public static final int TOK_ALTERTABLE_RENAMECOL=677;
	public static final int TOK_ALTERTABLE_RENAMEPART=678;
	public static final int TOK_ALTERTABLE_REPLACECOLS=679;
	public static final int TOK_ALTERTABLE_SERDEPROPERTIES=680;
	public static final int TOK_ALTERTABLE_SERIALIZER=681;
	public static final int TOK_ALTERTABLE_SKEWED=682;
	public static final int TOK_ALTERTABLE_SKEWED_LOCATION=683;
	public static final int TOK_ALTERTABLE_TOUCH=684;
	public static final int TOK_ALTERTABLE_UNARCHIVE=685;
	public static final int TOK_ALTERTABLE_UPDATECOLSTATS=686;
	public static final int TOK_ALTERTABLE_UPDATESTATS=687;
	public static final int TOK_ALTERVIEW=688;
	public static final int TOK_ALTERVIEW_ADDPARTS=689;
	public static final int TOK_ALTERVIEW_DROPPARTS=690;
	public static final int TOK_ALTERVIEW_DROPPROPERTIES=691;
	public static final int TOK_ALTERVIEW_PROPERTIES=692;
	public static final int TOK_ALTERVIEW_RENAME=693;
	public static final int TOK_ANALYZE=694;
	public static final int TOK_ANONYMOUS=695;
	public static final int TOK_ARCHIVE=696;
	public static final int TOK_BIGINT=697;
	public static final int TOK_BINARY=698;
	public static final int TOK_BLOCKING=699;
	public static final int TOK_BOOLEAN=700;
	public static final int TOK_CACHE_METADATA=701;
	public static final int TOK_CASCADE=702;
	public static final int TOK_CHAR=703;
	public static final int TOK_CHARSETLITERAL=704;
	public static final int TOK_CLUSTERBY=705;
	public static final int TOK_COLTYPELIST=706;
	public static final int TOK_COL_NAME=707;
	public static final int TOK_COMMIT=708;
	public static final int TOK_CONSTRAINT_NAME=709;
	public static final int TOK_CREATEDATABASE=710;
	public static final int TOK_CREATEFUNCTION=711;
	public static final int TOK_CREATEINDEX=712;
	public static final int TOK_CREATEINDEX_INDEXTBLNAME=713;
	public static final int TOK_CREATEMACRO=714;
	public static final int TOK_CREATEROLE=715;
	public static final int TOK_CREATETABLE=716;
	public static final int TOK_CREATEVIEW=717;
	public static final int TOK_CREATE_MATERIALIZED_VIEW=718;
	public static final int TOK_CROSSJOIN=719;
	public static final int TOK_CTE=720;
	public static final int TOK_CUBE_GROUPBY=721;
	public static final int TOK_DATABASECOMMENT=722;
	public static final int TOK_DATABASELOCATION=723;
	public static final int TOK_DATABASEPROPERTIES=724;
	public static final int TOK_DATE=725;
	public static final int TOK_DATELITERAL=726;
	public static final int TOK_DATETIME=727;
	public static final int TOK_DBPROPLIST=728;
	public static final int TOK_DB_TYPE=729;
	public static final int TOK_DECIMAL=730;
	public static final int TOK_DEFERRED_REBUILDINDEX=731;
	public static final int TOK_DELETE=732;
	public static final int TOK_DELETE_FROM=733;
	public static final int TOK_DESCDATABASE=734;
	public static final int TOK_DESCFUNCTION=735;
	public static final int TOK_DESCTABLE=736;
	public static final int TOK_DESTINATION=737;
	public static final int TOK_DETAIL=738;
	public static final int TOK_DIR=739;
	public static final int TOK_DISABLE=740;
	public static final int TOK_DISTRIBUTEBY=741;
	public static final int TOK_DOUBLE=742;
	public static final int TOK_DROPDATABASE=743;
	public static final int TOK_DROPFUNCTION=744;
	public static final int TOK_DROPINDEX=745;
	public static final int TOK_DROPMACRO=746;
	public static final int TOK_DROPROLE=747;
	public static final int TOK_DROPTABLE=748;
	public static final int TOK_DROPVIEW=749;
	public static final int TOK_DROP_MATERIALIZED_VIEW=750;
	public static final int TOK_ENABLE=751;
	public static final int TOK_EXCEPTALL=752;
	public static final int TOK_EXCEPTDISTINCT=753;
	public static final int TOK_EXPLAIN=754;
	public static final int TOK_EXPLAIN_SQ_REWRITE=755;
	public static final int TOK_EXPLIST=756;
	public static final int TOK_EXPORT=757;
	public static final int TOK_EXPRESSION=758;
	public static final int TOK_FALSE=759;
	public static final int TOK_FILE=760;
	public static final int TOK_FILEFORMAT_GENERIC=761;
	public static final int TOK_FLOAT=762;
	public static final int TOK_FOREIGN_KEY=763;
	public static final int TOK_FROM=764;
	public static final int TOK_FULLOUTERJOIN=765;
	public static final int TOK_FUNCTION=766;
	public static final int TOK_FUNCTIONDI=767;
	public static final int TOK_FUNCTIONSTAR=768;
	public static final int TOK_GRANT=769;
	public static final int TOK_GRANT_OPTION_FOR=770;
	public static final int TOK_GRANT_ROLE=771;
	public static final int TOK_GRANT_WITH_ADMIN_OPTION=772;
	public static final int TOK_GRANT_WITH_OPTION=773;
	public static final int TOK_GROUP=774;
	public static final int TOK_GROUPBY=775;
	public static final int TOK_GROUPING_SETS=776;
	public static final int TOK_GROUPING_SETS_EXPRESSION=777;
	public static final int TOK_HAVING=778;
	public static final int TOK_IFEXISTS=779;
	public static final int TOK_IFNOTEXISTS=780;
	public static final int TOK_IMPORT=781;
	public static final int TOK_INDEXCOMMENT=782;
	public static final int TOK_INDEXPROPERTIES=783;
	public static final int TOK_INDEXPROPLIST=784;
	public static final int TOK_INSERT=785;
	public static final int TOK_INSERT_INTO=786;
	public static final int TOK_INT=787;
	public static final int TOK_INTERSECTALL=788;
	public static final int TOK_INTERSECTDISTINCT=789;
	public static final int TOK_INTERVAL_DAY_LITERAL=790;
	public static final int TOK_INTERVAL_DAY_TIME=791;
	public static final int TOK_INTERVAL_DAY_TIME_LITERAL=792;
	public static final int TOK_INTERVAL_HOUR_LITERAL=793;
	public static final int TOK_INTERVAL_MINUTE_LITERAL=794;
	public static final int TOK_INTERVAL_MONTH_LITERAL=795;
	public static final int TOK_INTERVAL_SECOND_LITERAL=796;
	public static final int TOK_INTERVAL_YEAR_LITERAL=797;
	public static final int TOK_INTERVAL_YEAR_MONTH=798;
	public static final int TOK_INTERVAL_YEAR_MONTH_LITERAL=799;
	public static final int TOK_ISNOTNULL=800;
	public static final int TOK_ISNULL=801;
	public static final int TOK_ISOLATION_LEVEL=802;
	public static final int TOK_ISOLATION_SNAPSHOT=803;
	public static final int TOK_JAR=804;
	public static final int TOK_JOIN=805;
	public static final int TOK_LATERAL_VIEW=806;
	public static final int TOK_LATERAL_VIEW_OUTER=807;
	public static final int TOK_LEFTOUTERJOIN=808;
	public static final int TOK_LEFTSEMIJOIN=809;
	public static final int TOK_LENGTH=810;
	public static final int TOK_LIKETABLE=811;
	public static final int TOK_LIMIT=812;
	public static final int TOK_LIST=813;
	public static final int TOK_LOAD=814;
	public static final int TOK_LOCKDB=815;
	public static final int TOK_LOCKTABLE=816;
	public static final int TOK_MAP=817;
	public static final int TOK_MATCHED=818;
	public static final int TOK_MERGE=819;
	public static final int TOK_METADATA=820;
	public static final int TOK_MSCK=821;
	public static final int TOK_NORELY=822;
	public static final int TOK_NOT_CLUSTERED=823;
	public static final int TOK_NOT_MATCHED=824;
	public static final int TOK_NOT_NULL=825;
	public static final int TOK_NOT_SORTED=826;
	public static final int TOK_NOVALIDATE=827;
	public static final int TOK_NO_DROP=828;
	public static final int TOK_NULL=829;
	public static final int TOK_NULLS_FIRST=830;
	public static final int TOK_NULLS_LAST=831;
	public static final int TOK_OFFLINE=832;
	public static final int TOK_OFFSET=833;
	public static final int TOK_ONLY=834;
	public static final int TOK_OPERATOR=835;
	public static final int TOK_OP_ADD=836;
	public static final int TOK_OP_AND=837;
	public static final int TOK_OP_BITAND=838;
	public static final int TOK_OP_BITNOT=839;
	public static final int TOK_OP_BITOR=840;
	public static final int TOK_OP_BITXOR=841;
	public static final int TOK_OP_DIV=842;
	public static final int TOK_OP_EQ=843;
	public static final int TOK_OP_GE=844;
	public static final int TOK_OP_GT=845;
	public static final int TOK_OP_LE=846;
	public static final int TOK_OP_LIKE=847;
	public static final int TOK_OP_LT=848;
	public static final int TOK_OP_MOD=849;
	public static final int TOK_OP_MUL=850;
	public static final int TOK_OP_NE=851;
	public static final int TOK_OP_NOT=852;
	public static final int TOK_OP_OR=853;
	public static final int TOK_OP_SUB=854;
	public static final int TOK_ORDERBY=855;
	public static final int TOK_ORREPLACE=856;
	public static final int TOK_PARTITIONINGSPEC=857;
	public static final int TOK_PARTITIONLOCATION=858;
	public static final int TOK_PARTSPEC=859;
	public static final int TOK_PARTVAL=860;
	public static final int TOK_PERCENT=861;
	public static final int TOK_PRIMARY_KEY=862;
	public static final int TOK_PRINCIPAL_NAME=863;
	public static final int TOK_PRIVILEGE=864;
	public static final int TOK_PRIVILEGE_LIST=865;
	public static final int TOK_PRIV_ALL=866;
	public static final int TOK_PRIV_ALTER_DATA=867;
	public static final int TOK_PRIV_ALTER_METADATA=868;
	public static final int TOK_PRIV_CREATE=869;
	public static final int TOK_PRIV_DELETE=870;
	public static final int TOK_PRIV_DROP=871;
	public static final int TOK_PRIV_INDEX=872;
	public static final int TOK_PRIV_INSERT=873;
	public static final int TOK_PRIV_LOCK=874;
	public static final int TOK_PRIV_OBJECT=875;
	public static final int TOK_PRIV_OBJECT_COL=876;
	public static final int TOK_PRIV_SELECT=877;
	public static final int TOK_PRIV_SHOW_DATABASE=878;
	public static final int TOK_PTBLFUNCTION=879;
	public static final int TOK_QUERY=880;
	public static final int TOK_READONLY=881;
	public static final int TOK_RECORDREADER=882;
	public static final int TOK_RECORDWRITER=883;
	public static final int TOK_RELOADFUNCTION=884;
	public static final int TOK_RELY=885;
	public static final int TOK_REPLICATION=886;
	public static final int TOK_REPL_DUMP=887;
	public static final int TOK_REPL_LOAD=888;
	public static final int TOK_REPL_STATUS=889;
	public static final int TOK_RESOURCE_ALL=890;
	public static final int TOK_RESOURCE_LIST=891;
	public static final int TOK_RESOURCE_URI=892;
	public static final int TOK_RESTRICT=893;
	public static final int TOK_REVOKE=894;
	public static final int TOK_REVOKE_ROLE=895;
	public static final int TOK_REWRITE_DISABLED=896;
	public static final int TOK_REWRITE_ENABLED=897;
	public static final int TOK_RIGHTOUTERJOIN=898;
	public static final int TOK_ROLE=899;
	public static final int TOK_ROLLBACK=900;
	public static final int TOK_ROLLUP_GROUPBY=901;
	public static final int TOK_ROWCOUNT=902;
	public static final int TOK_SELECT=903;
	public static final int TOK_SELECTDI=904;
	public static final int TOK_SELEXPR=905;
	public static final int TOK_SERDE=906;
	public static final int TOK_SERDENAME=907;
	public static final int TOK_SERDEPROPS=908;
	public static final int TOK_SERVER_TYPE=909;
	public static final int TOK_SETCOLREF=910;
	public static final int TOK_SET_AUTOCOMMIT=911;
	public static final int TOK_SET_COLUMNS_CLAUSE=912;
	public static final int TOK_SHOWCOLUMNS=913;
	public static final int TOK_SHOWCONF=914;
	public static final int TOK_SHOWDATABASES=915;
	public static final int TOK_SHOWDBLOCKS=916;
	public static final int TOK_SHOWFUNCTIONS=917;
	public static final int TOK_SHOWINDEXES=918;
	public static final int TOK_SHOWLOCKS=919;
	public static final int TOK_SHOWPARTITIONS=920;
	public static final int TOK_SHOWTABLES=921;
	public static final int TOK_SHOWVIEWS=922;
	public static final int TOK_SHOW_COMPACTIONS=923;
	public static final int TOK_SHOW_CREATEDATABASE=924;
	public static final int TOK_SHOW_CREATETABLE=925;
	public static final int TOK_SHOW_GRANT=926;
	public static final int TOK_SHOW_ROLES=927;
	public static final int TOK_SHOW_ROLE_GRANT=928;
	public static final int TOK_SHOW_ROLE_PRINCIPALS=929;
	public static final int TOK_SHOW_SET_ROLE=930;
	public static final int TOK_SHOW_TABLESTATUS=931;
	public static final int TOK_SHOW_TBLPROPERTIES=932;
	public static final int TOK_SHOW_TRANSACTIONS=933;
	public static final int TOK_SKEWED_LOCATIONS=934;
	public static final int TOK_SKEWED_LOCATION_LIST=935;
	public static final int TOK_SKEWED_LOCATION_MAP=936;
	public static final int TOK_SMALLINT=937;
	public static final int TOK_SORTBY=938;
	public static final int TOK_START_TRANSACTION=939;
	public static final int TOK_STORAGEHANDLER=940;
	public static final int TOK_STOREDASDIRS=941;
	public static final int TOK_STRING=942;
	public static final int TOK_STRINGLITERALSEQUENCE=943;
	public static final int TOK_STRUCT=944;
	public static final int TOK_SUBQUERY=945;
	public static final int TOK_SUBQUERY_EXPR=946;
	public static final int TOK_SUBQUERY_OP=947;
	public static final int TOK_SUBQUERY_OP_NOTEXISTS=948;
	public static final int TOK_SUBQUERY_OP_NOTIN=949;
	public static final int TOK_SUMMARY=950;
	public static final int TOK_SWITCHDATABASE=951;
	public static final int TOK_TAB=952;
	public static final int TOK_TABALIAS=953;
	public static final int TOK_TABCOL=954;
	public static final int TOK_TABCOLLIST=955;
	public static final int TOK_TABCOLNAME=956;
	public static final int TOK_TABCOLVALUE=957;
	public static final int TOK_TABCOLVALUES=958;
	public static final int TOK_TABCOLVALUE_PAIR=959;
	public static final int TOK_TABLEBUCKETSAMPLE=960;
	public static final int TOK_TABLECOMMENT=961;
	public static final int TOK_TABLEFILEFORMAT=962;
	public static final int TOK_TABLELOCATION=963;
	public static final int TOK_TABLEPARTCOLS=964;
	public static final int TOK_TABLEPROPERTIES=965;
	public static final int TOK_TABLEPROPERTY=966;
	public static final int TOK_TABLEPROPLIST=967;
	public static final int TOK_TABLEROWFORMAT=968;
	public static final int TOK_TABLEROWFORMATCOLLITEMS=969;
	public static final int TOK_TABLEROWFORMATFIELD=970;
	public static final int TOK_TABLEROWFORMATLINES=971;
	public static final int TOK_TABLEROWFORMATMAPKEYS=972;
	public static final int TOK_TABLEROWFORMATNULL=973;
	public static final int TOK_TABLESERIALIZER=974;
	public static final int TOK_TABLESKEWED=975;
	public static final int TOK_TABLESPLITSAMPLE=976;
	public static final int TOK_TABLE_OR_COL=977;
	public static final int TOK_TABLE_PARTITION=978;
	public static final int TOK_TABLE_TYPE=979;
	public static final int TOK_TABNAME=980;
	public static final int TOK_TABREF=981;
	public static final int TOK_TABSORTCOLNAMEASC=982;
	public static final int TOK_TABSORTCOLNAMEDESC=983;
	public static final int TOK_TABSRC=984;
	public static final int TOK_TABTYPE=985;
	public static final int TOK_TEMPORARY=986;
	public static final int TOK_TIMESTAMP=987;
	public static final int TOK_TIMESTAMPLITERAL=988;
	public static final int TOK_TINYINT=989;
	public static final int TOK_TMP_FILE=990;
	public static final int TOK_TO=991;
	public static final int TOK_TRANSFORM=992;
	public static final int TOK_TRUE=993;
	public static final int TOK_TRUNCATETABLE=994;
	public static final int TOK_TXN_ACCESS_MODE=995;
	public static final int TOK_TXN_READ_ONLY=996;
	public static final int TOK_TXN_READ_WRITE=997;
	public static final int TOK_UNIONALL=998;
	public static final int TOK_UNIONDISTINCT=999;
	public static final int TOK_UNIONTYPE=1000;
	public static final int TOK_UNIQUE=1001;
	public static final int TOK_UNIQUEJOIN=1002;
	public static final int TOK_UNLOCKDB=1003;
	public static final int TOK_UNLOCKTABLE=1004;
	public static final int TOK_UPDATE=1005;
	public static final int TOK_UPDATE_TABLE=1006;
	public static final int TOK_URI_TYPE=1007;
	public static final int TOK_USER=1008;
	public static final int TOK_USERSCRIPTCOLNAMES=1009;
	public static final int TOK_USERSCRIPTCOLSCHEMA=1010;
	public static final int TOK_VALIDATE=1011;
	public static final int TOK_VALUES_TABLE=1012;
	public static final int TOK_VALUE_ROW=1013;
	public static final int TOK_VARCHAR=1014;
	public static final int TOK_VIEWPARTCOLS=1015;
	public static final int TOK_VIRTUAL_TABLE=1016;
	public static final int TOK_VIRTUAL_TABREF=1017;
	public static final int TOK_WHERE=1018;
	public static final int TOK_WINDOWDEF=1019;
	public static final int TOK_WINDOWRANGE=1020;
	public static final int TOK_WINDOWSPEC=1021;
	public static final int TOK_WINDOWVALUES=1022;

	// delegates
	public HiveASTParser_SelectClauseASTParser gSelectClauseASTParser;
	public HiveASTParser_FromClauseASTParser gFromClauseASTParser;
	public HiveASTParser_IdentifiersASTParser gIdentifiersASTParser;
	public Parser[] getDelegates() {
		return new Parser[] {gSelectClauseASTParser, gFromClauseASTParser, gIdentifiersASTParser};
	}

	// delegators


	public HiveASTParser(TokenStream input) {
		this(input, new RecognizerSharedState());
	}
	public HiveASTParser(TokenStream input, RecognizerSharedState state) {
		super(input, state);
		gSelectClauseASTParser = new HiveASTParser_SelectClauseASTParser(input, state, this);
		gFromClauseASTParser = new HiveASTParser_FromClauseASTParser(input, state, this);
		gIdentifiersASTParser = new HiveASTParser_IdentifiersASTParser(input, state, this);
	}

	protected TreeAdaptor adaptor = new CommonTreeAdaptor();

	public void setTreeAdaptor(TreeAdaptor adaptor) {
		this.adaptor = adaptor;
		gSelectClauseASTParser.setTreeAdaptor(this.adaptor);gFromClauseASTParser.setTreeAdaptor(this.adaptor);gIdentifiersASTParser.setTreeAdaptor(this.adaptor);
	}
	public TreeAdaptor getTreeAdaptor() {
		return adaptor;
	}
	@Override public String[] getTokenNames() { return HiveASTParser.tokenNames; }
	@Override public String getGrammarFileName() { return "org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g"; }


	  public ArrayList<HiveASTParseError> errors = new ArrayList<>();
	  Stack msgs = new Stack<String>();

	  private static HashMap<String, String> xlateMap;
	  static {
	    //this is used to support auto completion in CLI
	    xlateMap = new HashMap<String, String>();

	    // Keywords
	    xlateMap.put("KW_TRUE", "TRUE");
	    xlateMap.put("KW_FALSE", "FALSE");
	    xlateMap.put("KW_ALL", "ALL");
	    xlateMap.put("KW_NONE", "NONE");
	    xlateMap.put("KW_AND", "AND");
	    xlateMap.put("KW_OR", "OR");
	    xlateMap.put("KW_NOT", "NOT");
	    xlateMap.put("KW_LIKE", "LIKE");

	    xlateMap.put("KW_ASC", "ASC");
	    xlateMap.put("KW_DESC", "DESC");
	    xlateMap.put("KW_NULLS", "NULLS");
	    xlateMap.put("KW_LAST", "LAST");
	    xlateMap.put("KW_ORDER", "ORDER");
	    xlateMap.put("KW_BY", "BY");
	    xlateMap.put("KW_GROUP", "GROUP");
	    xlateMap.put("KW_WHERE", "WHERE");
	    xlateMap.put("KW_FROM", "FROM");
	    xlateMap.put("KW_AS", "AS");
	    xlateMap.put("KW_SELECT", "SELECT");
	    xlateMap.put("KW_DISTINCT", "DISTINCT");
	    xlateMap.put("KW_INSERT", "INSERT");
	    xlateMap.put("KW_OVERWRITE", "OVERWRITE");
	    xlateMap.put("KW_OUTER", "OUTER");
	    xlateMap.put("KW_JOIN", "JOIN");
	    xlateMap.put("KW_LEFT", "LEFT");
	    xlateMap.put("KW_RIGHT", "RIGHT");
	    xlateMap.put("KW_FULL", "FULL");
	    xlateMap.put("KW_ON", "ON");
	    xlateMap.put("KW_PARTITION", "PARTITION");
	    xlateMap.put("KW_PARTITIONS", "PARTITIONS");
	    xlateMap.put("KW_TABLE", "TABLE");
	    xlateMap.put("KW_TABLES", "TABLES");
	    xlateMap.put("KW_TBLPROPERTIES", "TBLPROPERTIES");
	    xlateMap.put("KW_SHOW", "SHOW");
	    xlateMap.put("KW_MSCK", "MSCK");
	    xlateMap.put("KW_DIRECTORY", "DIRECTORY");
	    xlateMap.put("KW_LOCAL", "LOCAL");
	    xlateMap.put("KW_TRANSFORM", "TRANSFORM");
	    xlateMap.put("KW_USING", "USING");
	    xlateMap.put("KW_CLUSTER", "CLUSTER");
	    xlateMap.put("KW_DISTRIBUTE", "DISTRIBUTE");
	    xlateMap.put("KW_SORT", "SORT");
	    xlateMap.put("KW_UNION", "UNION");
	    xlateMap.put("KW_INTERSECT", "INTERSECT");
	    xlateMap.put("KW_EXCEPT", "EXCEPT");
	    xlateMap.put("KW_LOAD", "LOAD");
	    xlateMap.put("KW_DATA", "DATA");
	    xlateMap.put("KW_INPATH", "INPATH");
	    xlateMap.put("KW_IS", "IS");
	    xlateMap.put("KW_NULL", "NULL");
	    xlateMap.put("KW_CREATE", "CREATE");
	    xlateMap.put("KW_EXTERNAL", "EXTERNAL");
	    xlateMap.put("KW_ALTER", "ALTER");
	    xlateMap.put("KW_DESCRIBE", "DESCRIBE");
	    xlateMap.put("KW_DROP", "DROP");
	    xlateMap.put("KW_RENAME", "RENAME");
	    xlateMap.put("KW_TO", "TO");
	    xlateMap.put("KW_COMMENT", "COMMENT");
	    xlateMap.put("KW_BOOLEAN", "BOOLEAN");
	    xlateMap.put("KW_TINYINT", "TINYINT");
	    xlateMap.put("KW_SMALLINT", "SMALLINT");
	    xlateMap.put("KW_INT", "INT");
	    xlateMap.put("KW_BIGINT", "BIGINT");
	    xlateMap.put("KW_FLOAT", "FLOAT");
	    xlateMap.put("KW_DOUBLE", "DOUBLE");
	    xlateMap.put("KW_PRECISION", "PRECISION");
	    xlateMap.put("KW_DATE", "DATE");
	    xlateMap.put("KW_DATETIME", "DATETIME");
	    xlateMap.put("KW_TIMESTAMP", "TIMESTAMP");
	    xlateMap.put("KW_STRING", "STRING");
	    xlateMap.put("KW_BINARY", "BINARY");
	    xlateMap.put("KW_ARRAY", "ARRAY");
	    xlateMap.put("KW_MAP", "MAP");
	    xlateMap.put("KW_REDUCE", "REDUCE");
	    xlateMap.put("KW_PARTITIONED", "PARTITIONED");
	    xlateMap.put("KW_CLUSTERED", "CLUSTERED");
	    xlateMap.put("KW_SORTED", "SORTED");
	    xlateMap.put("KW_INTO", "INTO");
	    xlateMap.put("KW_BUCKETS", "BUCKETS");
	    xlateMap.put("KW_ROW", "ROW");
	    xlateMap.put("KW_FORMAT", "FORMAT");
	    xlateMap.put("KW_DELIMITED", "DELIMITED");
	    xlateMap.put("KW_FIELDS", "FIELDS");
	    xlateMap.put("KW_TERMINATED", "TERMINATED");
	    xlateMap.put("KW_COLLECTION", "COLLECTION");
	    xlateMap.put("KW_ITEMS", "ITEMS");
	    xlateMap.put("KW_KEYS", "KEYS");
	    xlateMap.put("KW_KEY_TYPE", "$KEY$");
	    xlateMap.put("KW_LINES", "LINES");
	    xlateMap.put("KW_STORED", "STORED");
	    xlateMap.put("KW_SEQUENCEFILE", "SEQUENCEFILE");
	    xlateMap.put("KW_TEXTFILE", "TEXTFILE");
	    xlateMap.put("KW_INPUTFORMAT", "INPUTFORMAT");
	    xlateMap.put("KW_OUTPUTFORMAT", "OUTPUTFORMAT");
	    xlateMap.put("KW_LOCATION", "LOCATION");
	    xlateMap.put("KW_TABLESAMPLE", "TABLESAMPLE");
	    xlateMap.put("KW_BUCKET", "BUCKET");
	    xlateMap.put("KW_OUT", "OUT");
	    xlateMap.put("KW_OF", "OF");
	    xlateMap.put("KW_CAST", "CAST");
	    xlateMap.put("KW_ADD", "ADD");
	    xlateMap.put("KW_REPLACE", "REPLACE");
	    xlateMap.put("KW_COLUMNS", "COLUMNS");
	    xlateMap.put("KW_RLIKE", "RLIKE");
	    xlateMap.put("KW_REGEXP", "REGEXP");
	    xlateMap.put("KW_TEMPORARY", "TEMPORARY");
	    xlateMap.put("KW_FUNCTION", "FUNCTION");
	    xlateMap.put("KW_EXPLAIN", "EXPLAIN");
	    xlateMap.put("KW_EXTENDED", "EXTENDED");
	    xlateMap.put("KW_SERDE", "SERDE");
	    xlateMap.put("KW_WITH", "WITH");
	    xlateMap.put("KW_SERDEPROPERTIES", "SERDEPROPERTIES");
	    xlateMap.put("KW_LIMIT", "LIMIT");
	    xlateMap.put("KW_OFFSET", "OFFSET");
	    xlateMap.put("KW_SET", "SET");
	    xlateMap.put("KW_PROPERTIES", "TBLPROPERTIES");
	    xlateMap.put("KW_VALUE_TYPE", "$VALUE$");
	    xlateMap.put("KW_ELEM_TYPE", "$ELEM$");
	    xlateMap.put("KW_DEFINED", "DEFINED");
	    xlateMap.put("KW_SUBQUERY", "SUBQUERY");
	    xlateMap.put("KW_REWRITE", "REWRITE");
	    xlateMap.put("KW_UPDATE", "UPDATE");
	    xlateMap.put("KW_VALUES", "VALUES");
	    xlateMap.put("KW_PURGE", "PURGE");
	    xlateMap.put("KW_UNIQUE", "UNIQUE");
	    xlateMap.put("KW_PRIMARY", "PRIMARY");
	    xlateMap.put("KW_FOREIGN", "FOREIGN");
	    xlateMap.put("KW_KEY", "KEY");
	    xlateMap.put("KW_REFERENCES", "REFERENCES");
	    xlateMap.put("KW_CONSTRAINT", "CONSTRAINT");
	    xlateMap.put("KW_ENABLE", "ENABLE");
	    xlateMap.put("KW_DISABLE", "DISABLE");
	    xlateMap.put("KW_VALIDATE", "VALIDATE");
	    xlateMap.put("KW_NOVALIDATE", "NOVALIDATE");
	    xlateMap.put("KW_RELY", "RELY");
	    xlateMap.put("KW_NORELY", "NORELY");
	    xlateMap.put("KW_ABORT", "ABORT");
	    xlateMap.put("KW_TRANSACTIONS", "TRANSACTIONS");
	    xlateMap.put("KW_COMPACTIONS", "COMPACTIONS");
	    xlateMap.put("KW_COMPACT", "COMPACT");
	    xlateMap.put("KW_WAIT", "WAIT");

	    // Operators
	    xlateMap.put("DOT", ".");
	    xlateMap.put("COLON", ":");
	    xlateMap.put("COMMA", ",");
	    xlateMap.put("SEMICOLON", ");");

	    xlateMap.put("LPAREN", "(");
	    xlateMap.put("RPAREN", ")");
	    xlateMap.put("LSQUARE", "[");
	    xlateMap.put("RSQUARE", "]");

	    xlateMap.put("EQUAL", "=");
	    xlateMap.put("NOTEQUAL", "<>");
	    xlateMap.put("EQUAL_NS", "<=>");
	    xlateMap.put("LESSTHANOREQUALTO", "<=");
	    xlateMap.put("LESSTHAN", "<");
	    xlateMap.put("GREATERTHANOREQUALTO", ">=");
	    xlateMap.put("GREATERTHAN", ">");

	    xlateMap.put("DIVIDE", "/");
	    xlateMap.put("PLUS", "+");
	    xlateMap.put("MINUS", "-");
	    xlateMap.put("STAR", "*");
	    xlateMap.put("MOD", "%");

	    xlateMap.put("AMPERSAND", "&");
	    xlateMap.put("TILDE", "~");
	    xlateMap.put("BITWISEOR", "|");
	    xlateMap.put("BITWISEXOR", "^");
	    xlateMap.put("CharSetLiteral", "\\'");
	  }

	  public static Collection<String> getKeywords() {
	    return xlateMap.values();
	  }

	  private static String xlate(String name) {

	    String ret = xlateMap.get(name);
	    if (ret == null) {
	      ret = name;
	    }

	    return ret;
	  }

	  @Override
	  public Object recoverFromMismatchedSet(IntStream input,
	      RecognitionException re, BitSet follow) throws RecognitionException {
	    throw re;
	  }

	  @Override
	  public void displayRecognitionError(String[] tokenNames,
	      RecognitionException e) {
	    errors.add(new HiveASTParseError(this, e, tokenNames));
	  }

	  @Override
	  public String getErrorHeader(RecognitionException e) {
	    String header = null;
	    if (e.charPositionInLine < 0 && input.LT(-1) != null) {
	      Token t = input.LT(-1);
	      header = "line " + t.getLine() + ":" + t.getCharPositionInLine();
	    } else {
	      header = super.getErrorHeader(e);
	    }

	    return header;
	  }
	  
	  @Override
	  public String getErrorMessage(RecognitionException e, String[] tokenNames) {
	    String msg = null;

	    // Translate the token names to something that the user can understand
	    String[] xlateNames = new String[tokenNames.length];
	    for (int i = 0; i < tokenNames.length; ++i) {
	      xlateNames[i] = HiveASTParser.xlate(tokenNames[i]);
	    }

	    if (e instanceof NoViableAltException) {
	      @SuppressWarnings("unused")
	      NoViableAltException nvae = (NoViableAltException) e;
	      // for development, can add
	      // "decision=<<"+nvae.grammarDecisionDescription+">>"
	      // and "(decision="+nvae.decisionNumber+") and
	      // "state "+nvae.stateNumber
	      msg = "cannot recognize input near"
	              + (input.LT(1) != null ? " " + getTokenErrorDisplay(input.LT(1)) : "")
	              + (input.LT(2) != null ? " " + getTokenErrorDisplay(input.LT(2)) : "")
	              + (input.LT(3) != null ? " " + getTokenErrorDisplay(input.LT(3)) : "");
	    } else if (e instanceof MismatchedTokenException) {
	      MismatchedTokenException mte = (MismatchedTokenException) e;
	      msg = super.getErrorMessage(e, xlateNames) + (input.LT(-1) == null ? "":" near '" + input.LT(-1).getText()) + "'";
	    } else if (e instanceof FailedPredicateException) {
	      FailedPredicateException fpe = (FailedPredicateException) e;
	      msg = "Failed to recognize predicate '" + fpe.token.getText() + "'. Failed rule: '" + fpe.ruleName + "'";
	    } else {
	      msg = super.getErrorMessage(e, xlateNames);
	    }

	    if (msgs.size() > 0) {
	      msg = msg + " in " + msgs.peek();
	    }
	    return msg;
	  }
	  
	  public void pushMsg(String msg, RecognizerSharedState state) {
	    // ANTLR generated code does not wrap the @init code wit this backtracking check,
	    //  even if the matching @after has it. If we have parser rules with that are doing
	    // some lookahead with syntactic predicates this can cause the push() and pop() calls
	    // to become unbalanced, so make sure both push/pop check the backtracking state.
	    if (state.backtracking == 0) {
	      msgs.push(msg);
	    }
	  }

	  public void popMsg(RecognizerSharedState state) {
	    if (state.backtracking == 0) {
	      Object o = msgs.pop();
	    }
	  }

	  // counter to generate unique union aliases
	  private int aliasCounter;
	  private String generateUnionAlias() {
	    return "_u" + (++aliasCounter);
	  }
	  private char [] excludedCharForColumnName = {'.', ':'};
	  private boolean containExcludedCharForCreateTableColumnName(String input) {
	    for(char c : excludedCharForColumnName) {
	      if(input.indexOf(c)>-1) {
	        return true;
	      }
	    }
	    return false;
	  }
	  private CommonTree throwSetOpException() throws RecognitionException {
	    throw new FailedPredicateException(input, "orderByClause clusterByClause distributeByClause sortByClause limitClause can only be applied to the whole union.", "");
	  }
	  private CommonTree throwColumnNameException() throws RecognitionException {
	    throw new FailedPredicateException(input, Arrays.toString(excludedCharForColumnName) + " can not be used in column name in create table statement.", "");
	  }
	  private Configuration hiveConf;
	  public void setHiveConf(Configuration hiveConf) {
	    this.hiveConf = hiveConf;
	  }


	public static class statement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "statement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:734:1: statement : ( explainStatement EOF | execStatement EOF );
	public final HiveASTParser.statement_return statement() throws RecognitionException {
		HiveASTParser.statement_return retval = new HiveASTParser.statement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token EOF2=null;
		Token EOF4=null;
		ParserRuleReturnScope explainStatement1 =null;
		ParserRuleReturnScope execStatement3 =null;

		HiveParserASTNode EOF2_tree=null;
		HiveParserASTNode EOF4_tree=null;

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:735:2: ( explainStatement EOF | execStatement EOF )
			int alt1=2;
			int LA1_0 = input.LA(1);
			if ( (LA1_0==KW_EXPLAIN) ) {
				alt1=1;
			}
			else if ( (LA1_0==KW_ABORT||(LA1_0 >= KW_ALTER && LA1_0 <= KW_ANALYZE)||LA1_0==KW_COMMIT||LA1_0==KW_CREATE||LA1_0==KW_DELETE||(LA1_0 >= KW_DESC && LA1_0 <= KW_DESCRIBE)||LA1_0==KW_DROP||LA1_0==KW_EXPORT||LA1_0==KW_FROM||LA1_0==KW_GRANT||LA1_0==KW_IMPORT||LA1_0==KW_INSERT||LA1_0==KW_LOAD||LA1_0==KW_LOCK||LA1_0==KW_MAP||LA1_0==KW_MERGE||LA1_0==KW_MSCK||LA1_0==KW_REDUCE||LA1_0==KW_RELOAD||LA1_0==KW_REPL||LA1_0==KW_REVOKE||LA1_0==KW_ROLLBACK||LA1_0==KW_SELECT||LA1_0==KW_SET||LA1_0==KW_SHOW||LA1_0==KW_START||LA1_0==KW_TRUNCATE||LA1_0==KW_UNLOCK||LA1_0==KW_UPDATE||LA1_0==KW_USE||LA1_0==KW_WITH||LA1_0==LPAREN) ) {
				alt1=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 1, 0, input);
				throw nvae;
			}

			switch (alt1) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:735:4: explainStatement EOF
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_explainStatement_in_statement1208);
					explainStatement1=explainStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, explainStatement1.getTree());

					EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_statement1210); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EOF2_tree = (HiveParserASTNode)adaptor.create(EOF2);
					adaptor.addChild(root_0, EOF2_tree);
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:736:4: execStatement EOF
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_execStatement_in_statement1215);
					execStatement3=execStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, execStatement3.getTree());

					EOF4=(Token)match(input,EOF,FOLLOW_EOF_in_statement1217); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					EOF4_tree = (HiveParserASTNode)adaptor.create(EOF4);
					adaptor.addChild(root_0, EOF4_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "statement"


	public static class explainStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "explainStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:739:1: explainStatement : KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) ) ;
	public final HiveASTParser.explainStatement_return explainStatement() throws RecognitionException {
		HiveASTParser.explainStatement_return retval = new HiveASTParser.explainStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_EXPLAIN5=null;
		Token KW_REWRITE8=null;
		ParserRuleReturnScope explainOption6 =null;
		ParserRuleReturnScope execStatement7 =null;
		ParserRuleReturnScope queryStatementExpression9 =null;

		HiveParserASTNode KW_EXPLAIN5_tree=null;
		HiveParserASTNode KW_REWRITE8_tree=null;
		RewriteRuleTokenStream stream_KW_REWRITE=new RewriteRuleTokenStream(adaptor,"token KW_REWRITE");
		RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
		RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");
		RewriteRuleSubtreeStream stream_explainOption=new RewriteRuleSubtreeStream(adaptor,"rule explainOption");
		RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");

		 pushMsg("explain statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:742:2: ( KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:742:4: KW_EXPLAIN ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) )
			{
			KW_EXPLAIN5=(Token)match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement1238); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXPLAIN.add(KW_EXPLAIN5);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:742:15: ( ( explainOption )* execStatement -> ^( TOK_EXPLAIN execStatement ( explainOption )* ) | KW_REWRITE queryStatementExpression -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression ) )
			int alt3=2;
			int LA3_0 = input.LA(1);
			if ( (LA3_0==KW_ABORT||(LA3_0 >= KW_ALTER && LA3_0 <= KW_ANALYZE)||LA3_0==KW_AUTHORIZATION||LA3_0==KW_COMMIT||LA3_0==KW_CREATE||LA3_0==KW_DELETE||(LA3_0 >= KW_DEPENDENCY && LA3_0 <= KW_DESCRIBE)||LA3_0==KW_DROP||LA3_0==KW_EXPORT||LA3_0==KW_EXTENDED||(LA3_0 >= KW_FORMATTED && LA3_0 <= KW_FROM)||LA3_0==KW_GRANT||LA3_0==KW_IMPORT||LA3_0==KW_INSERT||LA3_0==KW_LOAD||LA3_0==KW_LOCK||LA3_0==KW_LOGICAL||LA3_0==KW_MAP||LA3_0==KW_MERGE||LA3_0==KW_MSCK||LA3_0==KW_REDUCE||LA3_0==KW_RELOAD||LA3_0==KW_REPL||LA3_0==KW_REVOKE||LA3_0==KW_ROLLBACK||LA3_0==KW_SELECT||LA3_0==KW_SET||LA3_0==KW_SHOW||LA3_0==KW_START||LA3_0==KW_TRUNCATE||LA3_0==KW_UNLOCK||LA3_0==KW_UPDATE||LA3_0==KW_USE||LA3_0==KW_VECTORIZATION||LA3_0==KW_WITH||LA3_0==LPAREN) ) {
				alt3=1;
			}
			else if ( (LA3_0==KW_REWRITE) ) {
				alt3=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 3, 0, input);
				throw nvae;
			}

			switch (alt3) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:743:6: ( explainOption )* execStatement
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:743:6: ( explainOption )*
					loop2:
					while (true) {
						int alt2=2;
						alt2 = dfa2.predict(input);
						switch (alt2) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:743:6: explainOption
							{
							pushFollow(FOLLOW_explainOption_in_explainStatement1247);
							explainOption6=explainOption();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_explainOption.add(explainOption6.getTree());
							}
							break;

						default :
							break loop2;
						}
					}

					pushFollow(FOLLOW_execStatement_in_explainStatement1250);
					execStatement7=execStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_execStatement.add(execStatement7.getTree());
					// AST REWRITE
					// elements: execStatement, explainOption
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 743:35: -> ^( TOK_EXPLAIN execStatement ( explainOption )* )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:743:38: ^( TOK_EXPLAIN execStatement ( explainOption )* )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_EXPLAIN, "TOK_EXPLAIN"), root_1);
						adaptor.addChild(root_1, stream_execStatement.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:743:66: ( explainOption )*
						while ( stream_explainOption.hasNext() ) {
							adaptor.addChild(root_1, stream_explainOption.nextTree());
						}
						stream_explainOption.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:745:9: KW_REWRITE queryStatementExpression
					{
					KW_REWRITE8=(Token)match(input,KW_REWRITE,FOLLOW_KW_REWRITE_in_explainStatement1281); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REWRITE.add(KW_REWRITE8);

					pushFollow(FOLLOW_queryStatementExpression_in_explainStatement1283);
					queryStatementExpression9=queryStatementExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_queryStatementExpression.add(queryStatementExpression9.getTree());
					// AST REWRITE
					// elements: queryStatementExpression
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 745:45: -> ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:745:48: ^( TOK_EXPLAIN_SQ_REWRITE queryStatementExpression )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_EXPLAIN_SQ_REWRITE, "TOK_EXPLAIN_SQ_REWRITE"), root_1);
						adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "explainStatement"


	public static class explainOption_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "explainOption"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:748:1: explainOption : ( KW_EXTENDED | KW_FORMATTED | KW_DEPENDENCY | KW_LOGICAL | KW_AUTHORIZATION | KW_ANALYZE | ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? ) );
	public final HiveASTParser.explainOption_return explainOption() throws RecognitionException {
		HiveASTParser.explainOption_return retval = new HiveASTParser.explainOption_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_EXTENDED10=null;
		Token KW_FORMATTED11=null;
		Token KW_DEPENDENCY12=null;
		Token KW_LOGICAL13=null;
		Token KW_AUTHORIZATION14=null;
		Token KW_ANALYZE15=null;
		Token KW_VECTORIZATION16=null;
		ParserRuleReturnScope vectorizationOnly17 =null;
		ParserRuleReturnScope vectorizatonDetail18 =null;

		HiveParserASTNode KW_EXTENDED10_tree=null;
		HiveParserASTNode KW_FORMATTED11_tree=null;
		HiveParserASTNode KW_DEPENDENCY12_tree=null;
		HiveParserASTNode KW_LOGICAL13_tree=null;
		HiveParserASTNode KW_AUTHORIZATION14_tree=null;
		HiveParserASTNode KW_ANALYZE15_tree=null;
		HiveParserASTNode KW_VECTORIZATION16_tree=null;

		 msgs.push("explain option"); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:751:5: ( KW_EXTENDED | KW_FORMATTED | KW_DEPENDENCY | KW_LOGICAL | KW_AUTHORIZATION | KW_ANALYZE | ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? ) )
			int alt6=7;
			switch ( input.LA(1) ) {
			case KW_EXTENDED:
				{
				alt6=1;
				}
				break;
			case KW_FORMATTED:
				{
				alt6=2;
				}
				break;
			case KW_DEPENDENCY:
				{
				alt6=3;
				}
				break;
			case KW_LOGICAL:
				{
				alt6=4;
				}
				break;
			case KW_AUTHORIZATION:
				{
				alt6=5;
				}
				break;
			case KW_ANALYZE:
				{
				alt6=6;
				}
				break;
			case KW_VECTORIZATION:
				{
				alt6=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 6, 0, input);
				throw nvae;
			}
			switch (alt6) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:751:7: KW_EXTENDED
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					KW_EXTENDED10=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_explainOption1316); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_EXTENDED10_tree = (HiveParserASTNode)adaptor.create(KW_EXTENDED10);
					adaptor.addChild(root_0, KW_EXTENDED10_tree);
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:751:19: KW_FORMATTED
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					KW_FORMATTED11=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_explainOption1318); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_FORMATTED11_tree = (HiveParserASTNode)adaptor.create(KW_FORMATTED11);
					adaptor.addChild(root_0, KW_FORMATTED11_tree);
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:751:32: KW_DEPENDENCY
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					KW_DEPENDENCY12=(Token)match(input,KW_DEPENDENCY,FOLLOW_KW_DEPENDENCY_in_explainOption1320); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_DEPENDENCY12_tree = (HiveParserASTNode)adaptor.create(KW_DEPENDENCY12);
					adaptor.addChild(root_0, KW_DEPENDENCY12_tree);
					}

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:751:46: KW_LOGICAL
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					KW_LOGICAL13=(Token)match(input,KW_LOGICAL,FOLLOW_KW_LOGICAL_in_explainOption1322); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_LOGICAL13_tree = (HiveParserASTNode)adaptor.create(KW_LOGICAL13);
					adaptor.addChild(root_0, KW_LOGICAL13_tree);
					}

					}
					break;
				case 5 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:751:57: KW_AUTHORIZATION
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					KW_AUTHORIZATION14=(Token)match(input,KW_AUTHORIZATION,FOLLOW_KW_AUTHORIZATION_in_explainOption1324); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_AUTHORIZATION14_tree = (HiveParserASTNode)adaptor.create(KW_AUTHORIZATION14);
					adaptor.addChild(root_0, KW_AUTHORIZATION14_tree);
					}

					}
					break;
				case 6 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:751:74: KW_ANALYZE
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					KW_ANALYZE15=(Token)match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_explainOption1326); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_ANALYZE15_tree = (HiveParserASTNode)adaptor.create(KW_ANALYZE15);
					adaptor.addChild(root_0, KW_ANALYZE15_tree);
					}

					}
					break;
				case 7 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:752:7: ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? )
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:752:7: ( KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )? )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:752:8: KW_VECTORIZATION ( vectorizationOnly )? ( vectorizatonDetail )?
					{
					KW_VECTORIZATION16=(Token)match(input,KW_VECTORIZATION,FOLLOW_KW_VECTORIZATION_in_explainOption1336); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					KW_VECTORIZATION16_tree = (HiveParserASTNode)adaptor.create(KW_VECTORIZATION16);
					adaptor.addChild(root_0, KW_VECTORIZATION16_tree);
					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:752:25: ( vectorizationOnly )?
					int alt4=2;
					int LA4_0 = input.LA(1);
					if ( (LA4_0==KW_ONLY) ) {
						alt4=1;
					}
					switch (alt4) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:752:25: vectorizationOnly
							{
							pushFollow(FOLLOW_vectorizationOnly_in_explainOption1338);
							vectorizationOnly17=vectorizationOnly();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, vectorizationOnly17.getTree());

							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:752:44: ( vectorizatonDetail )?
					int alt5=2;
					int LA5_0 = input.LA(1);
					if ( (LA5_0==KW_DETAIL||LA5_0==KW_EXPRESSION||LA5_0==KW_OPERATOR||LA5_0==KW_SUMMARY) ) {
						alt5=1;
					}
					switch (alt5) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:752:44: vectorizatonDetail
							{
							pushFollow(FOLLOW_vectorizatonDetail_in_explainOption1341);
							vectorizatonDetail18=vectorizatonDetail();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, vectorizatonDetail18.getTree());

							}
							break;

					}

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { msgs.pop(); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "explainOption"


	public static class vectorizationOnly_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "vectorizationOnly"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:755:1: vectorizationOnly : KW_ONLY -> ^( TOK_ONLY ) ;
	public final HiveASTParser.vectorizationOnly_return vectorizationOnly() throws RecognitionException {
		HiveASTParser.vectorizationOnly_return retval = new HiveASTParser.vectorizationOnly_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ONLY19=null;

		HiveParserASTNode KW_ONLY19_tree=null;
		RewriteRuleTokenStream stream_KW_ONLY=new RewriteRuleTokenStream(adaptor,"token KW_ONLY");

		 pushMsg("vectorization's only clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:758:5: ( KW_ONLY -> ^( TOK_ONLY ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:758:7: KW_ONLY
			{
			KW_ONLY19=(Token)match(input,KW_ONLY,FOLLOW_KW_ONLY_in_vectorizationOnly1370); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ONLY.add(KW_ONLY19);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 759:5: -> ^( TOK_ONLY )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:759:8: ^( TOK_ONLY )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ONLY, "TOK_ONLY"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "vectorizationOnly"


	public static class vectorizatonDetail_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "vectorizatonDetail"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:762:1: vectorizatonDetail : ( KW_SUMMARY -> ^( TOK_SUMMARY ) | KW_OPERATOR -> ^( TOK_OPERATOR ) | KW_EXPRESSION -> ^( TOK_EXPRESSION ) | KW_DETAIL -> ^( TOK_DETAIL ) );
	public final HiveASTParser.vectorizatonDetail_return vectorizatonDetail() throws RecognitionException {
		HiveASTParser.vectorizatonDetail_return retval = new HiveASTParser.vectorizatonDetail_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SUMMARY20=null;
		Token KW_OPERATOR21=null;
		Token KW_EXPRESSION22=null;
		Token KW_DETAIL23=null;

		HiveParserASTNode KW_SUMMARY20_tree=null;
		HiveParserASTNode KW_OPERATOR21_tree=null;
		HiveParserASTNode KW_EXPRESSION22_tree=null;
		HiveParserASTNode KW_DETAIL23_tree=null;
		RewriteRuleTokenStream stream_KW_SUMMARY=new RewriteRuleTokenStream(adaptor,"token KW_SUMMARY");
		RewriteRuleTokenStream stream_KW_DETAIL=new RewriteRuleTokenStream(adaptor,"token KW_DETAIL");
		RewriteRuleTokenStream stream_KW_OPERATOR=new RewriteRuleTokenStream(adaptor,"token KW_OPERATOR");
		RewriteRuleTokenStream stream_KW_EXPRESSION=new RewriteRuleTokenStream(adaptor,"token KW_EXPRESSION");

		 pushMsg("vectorization's detail level clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:765:5: ( KW_SUMMARY -> ^( TOK_SUMMARY ) | KW_OPERATOR -> ^( TOK_OPERATOR ) | KW_EXPRESSION -> ^( TOK_EXPRESSION ) | KW_DETAIL -> ^( TOK_DETAIL ) )
			int alt7=4;
			switch ( input.LA(1) ) {
			case KW_SUMMARY:
				{
				alt7=1;
				}
				break;
			case KW_OPERATOR:
				{
				alt7=2;
				}
				break;
			case KW_EXPRESSION:
				{
				alt7=3;
				}
				break;
			case KW_DETAIL:
				{
				alt7=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 7, 0, input);
				throw nvae;
			}
			switch (alt7) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:765:7: KW_SUMMARY
					{
					KW_SUMMARY20=(Token)match(input,KW_SUMMARY,FOLLOW_KW_SUMMARY_in_vectorizatonDetail1407); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SUMMARY.add(KW_SUMMARY20);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 766:5: -> ^( TOK_SUMMARY )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:766:8: ^( TOK_SUMMARY )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SUMMARY, "TOK_SUMMARY"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:767:7: KW_OPERATOR
					{
					KW_OPERATOR21=(Token)match(input,KW_OPERATOR,FOLLOW_KW_OPERATOR_in_vectorizatonDetail1425); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OPERATOR.add(KW_OPERATOR21);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 768:5: -> ^( TOK_OPERATOR )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:768:8: ^( TOK_OPERATOR )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_OPERATOR, "TOK_OPERATOR"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:769:7: KW_EXPRESSION
					{
					KW_EXPRESSION22=(Token)match(input,KW_EXPRESSION,FOLLOW_KW_EXPRESSION_in_vectorizatonDetail1443); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXPRESSION.add(KW_EXPRESSION22);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 770:5: -> ^( TOK_EXPRESSION )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:770:8: ^( TOK_EXPRESSION )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_EXPRESSION, "TOK_EXPRESSION"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:771:7: KW_DETAIL
					{
					KW_DETAIL23=(Token)match(input,KW_DETAIL,FOLLOW_KW_DETAIL_in_vectorizatonDetail1461); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DETAIL.add(KW_DETAIL23);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 772:5: -> ^( TOK_DETAIL )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:772:8: ^( TOK_DETAIL )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DETAIL, "TOK_DETAIL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "vectorizatonDetail"


	public static class execStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "execStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:775:1: execStatement : ( queryStatementExpression | loadStatement | exportStatement | importStatement | replDumpStatement | replLoadStatement | replStatusStatement | ddlStatement | deleteStatement | updateStatement | sqlTransactionStatement | mergeStatement );
	public final HiveASTParser.execStatement_return execStatement() throws RecognitionException {
		HiveASTParser.execStatement_return retval = new HiveASTParser.execStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope queryStatementExpression24 =null;
		ParserRuleReturnScope loadStatement25 =null;
		ParserRuleReturnScope exportStatement26 =null;
		ParserRuleReturnScope importStatement27 =null;
		ParserRuleReturnScope replDumpStatement28 =null;
		ParserRuleReturnScope replLoadStatement29 =null;
		ParserRuleReturnScope replStatusStatement30 =null;
		ParserRuleReturnScope ddlStatement31 =null;
		ParserRuleReturnScope deleteStatement32 =null;
		ParserRuleReturnScope updateStatement33 =null;
		ParserRuleReturnScope sqlTransactionStatement34 =null;
		ParserRuleReturnScope mergeStatement35 =null;


		 pushMsg("statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:778:5: ( queryStatementExpression | loadStatement | exportStatement | importStatement | replDumpStatement | replLoadStatement | replStatusStatement | ddlStatement | deleteStatement | updateStatement | sqlTransactionStatement | mergeStatement )
			int alt8=12;
			switch ( input.LA(1) ) {
			case KW_FROM:
			case KW_INSERT:
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
			case KW_WITH:
			case LPAREN:
				{
				alt8=1;
				}
				break;
			case KW_LOAD:
				{
				alt8=2;
				}
				break;
			case KW_EXPORT:
				{
				alt8=3;
				}
				break;
			case KW_IMPORT:
				{
				alt8=4;
				}
				break;
			case KW_REPL:
				{
				switch ( input.LA(2) ) {
				case KW_DUMP:
					{
					alt8=5;
					}
					break;
				case KW_LOAD:
					{
					alt8=6;
					}
					break;
				case KW_STATUS:
					{
					alt8=7;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 8, 11, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case KW_ABORT:
			case KW_ALTER:
			case KW_ANALYZE:
			case KW_CREATE:
			case KW_DESC:
			case KW_DESCRIBE:
			case KW_DROP:
			case KW_GRANT:
			case KW_LOCK:
			case KW_MSCK:
			case KW_RELOAD:
			case KW_REVOKE:
			case KW_SHOW:
			case KW_TRUNCATE:
			case KW_UNLOCK:
			case KW_USE:
				{
				alt8=8;
				}
				break;
			case KW_SET:
				{
				int LA8_27 = input.LA(2);
				if ( (LA8_27==KW_ROLE) ) {
					alt8=8;
				}
				else if ( (LA8_27==KW_AUTOCOMMIT) ) {
					alt8=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 8, 27, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_DELETE:
				{
				alt8=9;
				}
				break;
			case KW_UPDATE:
				{
				alt8=10;
				}
				break;
			case KW_COMMIT:
			case KW_ROLLBACK:
			case KW_START:
				{
				alt8=11;
				}
				break;
			case KW_MERGE:
				{
				alt8=12;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 8, 0, input);
				throw nvae;
			}
			switch (alt8) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:778:7: queryStatementExpression
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_queryStatementExpression_in_execStatement1498);
					queryStatementExpression24=queryStatementExpression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, queryStatementExpression24.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:779:7: loadStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_loadStatement_in_execStatement1506);
					loadStatement25=loadStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, loadStatement25.getTree());

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:780:7: exportStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_exportStatement_in_execStatement1514);
					exportStatement26=exportStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, exportStatement26.getTree());

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:781:7: importStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_importStatement_in_execStatement1522);
					importStatement27=importStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, importStatement27.getTree());

					}
					break;
				case 5 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:782:7: replDumpStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_replDumpStatement_in_execStatement1530);
					replDumpStatement28=replDumpStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replDumpStatement28.getTree());

					}
					break;
				case 6 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:783:7: replLoadStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_replLoadStatement_in_execStatement1538);
					replLoadStatement29=replLoadStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replLoadStatement29.getTree());

					}
					break;
				case 7 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:784:7: replStatusStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_replStatusStatement_in_execStatement1546);
					replStatusStatement30=replStatusStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, replStatusStatement30.getTree());

					}
					break;
				case 8 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:785:7: ddlStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_ddlStatement_in_execStatement1554);
					ddlStatement31=ddlStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ddlStatement31.getTree());

					}
					break;
				case 9 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:786:7: deleteStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_deleteStatement_in_execStatement1562);
					deleteStatement32=deleteStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, deleteStatement32.getTree());

					}
					break;
				case 10 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:787:7: updateStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_updateStatement_in_execStatement1570);
					updateStatement33=updateStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, updateStatement33.getTree());

					}
					break;
				case 11 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:788:7: sqlTransactionStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_sqlTransactionStatement_in_execStatement1578);
					sqlTransactionStatement34=sqlTransactionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlTransactionStatement34.getTree());

					}
					break;
				case 12 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:789:7: mergeStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_mergeStatement_in_execStatement1586);
					mergeStatement35=mergeStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeStatement35.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "execStatement"


	public static class loadStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "loadStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:792:1: loadStatement : KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) ;
	public final HiveASTParser.loadStatement_return loadStatement() throws RecognitionException {
		HiveASTParser.loadStatement_return retval = new HiveASTParser.loadStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token islocal=null;
		Token path=null;
		Token isoverwrite=null;
		Token KW_LOAD36=null;
		Token KW_DATA37=null;
		Token KW_INPATH38=null;
		Token KW_INTO39=null;
		Token KW_TABLE40=null;
		ParserRuleReturnScope tab =null;

		HiveParserASTNode islocal_tree=null;
		HiveParserASTNode path_tree=null;
		HiveParserASTNode isoverwrite_tree=null;
		HiveParserASTNode KW_LOAD36_tree=null;
		HiveParserASTNode KW_DATA37_tree=null;
		HiveParserASTNode KW_INPATH38_tree=null;
		HiveParserASTNode KW_INTO39_tree=null;
		HiveParserASTNode KW_TABLE40_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_INPATH=new RewriteRuleTokenStream(adaptor,"token KW_INPATH");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
		RewriteRuleTokenStream stream_KW_DATA=new RewriteRuleTokenStream(adaptor,"token KW_DATA");
		RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 pushMsg("load statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:795:5: ( KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:795:7: KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition )
			{
			KW_LOAD36=(Token)match(input,KW_LOAD,FOLLOW_KW_LOAD_in_loadStatement1613); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOAD.add(KW_LOAD36);

			KW_DATA37=(Token)match(input,KW_DATA,FOLLOW_KW_DATA_in_loadStatement1615); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DATA.add(KW_DATA37);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:795:23: (islocal= KW_LOCAL )?
			int alt9=2;
			int LA9_0 = input.LA(1);
			if ( (LA9_0==KW_LOCAL) ) {
				alt9=1;
			}
			switch (alt9) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:795:24: islocal= KW_LOCAL
					{
					islocal=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_loadStatement1620); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LOCAL.add(islocal);

					}
					break;

			}

			KW_INPATH38=(Token)match(input,KW_INPATH,FOLLOW_KW_INPATH_in_loadStatement1624); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INPATH.add(KW_INPATH38);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:795:53: (path= StringLiteral )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:795:54: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_loadStatement1629); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(path);

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:795:74: (isoverwrite= KW_OVERWRITE )?
			int alt10=2;
			int LA10_0 = input.LA(1);
			if ( (LA10_0==KW_OVERWRITE) ) {
				alt10=1;
			}
			switch (alt10) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:795:75: isoverwrite= KW_OVERWRITE
					{
					isoverwrite=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_loadStatement1635); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(isoverwrite);

					}
					break;

			}

			KW_INTO39=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_loadStatement1639); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO39);

			KW_TABLE40=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_loadStatement1641); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE40);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:795:119: (tab= tableOrPartition )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:795:120: tab= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_loadStatement1646);
			tab=tableOrPartition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());
			}

			// AST REWRITE
			// elements: path, islocal, isoverwrite, tab
			// token labels: islocal, path, isoverwrite
			// rule labels: tab, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_islocal=new RewriteRuleTokenStream(adaptor,"token islocal",islocal);
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleTokenStream stream_isoverwrite=new RewriteRuleTokenStream(adaptor,"token isoverwrite",isoverwrite);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 796:5: -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:796:8: ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_LOAD, "TOK_LOAD"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				adaptor.addChild(root_1, stream_tab.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:796:31: ( $islocal)?
				if ( stream_islocal.hasNext() ) {
					adaptor.addChild(root_1, stream_islocal.nextNode());
				}
				stream_islocal.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:796:41: ( $isoverwrite)?
				if ( stream_isoverwrite.hasNext() ) {
					adaptor.addChild(root_1, stream_isoverwrite.nextNode());
				}
				stream_isoverwrite.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "loadStatement"


	public static class replicationClause_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "replicationClause"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:799:1: replicationClause : KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? ) ;
	public final HiveASTParser.replicationClause_return replicationClause() throws RecognitionException {
		HiveASTParser.replicationClause_return retval = new HiveASTParser.replicationClause_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token isMetadataOnly=null;
		Token replId=null;
		Token KW_FOR41=null;
		Token KW_REPLICATION42=null;
		Token LPAREN43=null;
		Token RPAREN44=null;

		HiveParserASTNode isMetadataOnly_tree=null;
		HiveParserASTNode replId_tree=null;
		HiveParserASTNode KW_FOR41_tree=null;
		HiveParserASTNode KW_REPLICATION42_tree=null;
		HiveParserASTNode LPAREN43_tree=null;
		HiveParserASTNode RPAREN44_tree=null;
		RewriteRuleTokenStream stream_KW_REPLICATION=new RewriteRuleTokenStream(adaptor,"token KW_REPLICATION");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_METADATA=new RewriteRuleTokenStream(adaptor,"token KW_METADATA");

		 pushMsg("replication clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:802:5: ( KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:802:7: KW_FOR (isMetadataOnly= KW_METADATA )? KW_REPLICATION LPAREN (replId= StringLiteral ) RPAREN
			{
			KW_FOR41=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_replicationClause1698); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR41);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:802:14: (isMetadataOnly= KW_METADATA )?
			int alt11=2;
			int LA11_0 = input.LA(1);
			if ( (LA11_0==KW_METADATA) ) {
				alt11=1;
			}
			switch (alt11) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:802:15: isMetadataOnly= KW_METADATA
					{
					isMetadataOnly=(Token)match(input,KW_METADATA,FOLLOW_KW_METADATA_in_replicationClause1703); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_METADATA.add(isMetadataOnly);

					}
					break;

			}

			KW_REPLICATION42=(Token)match(input,KW_REPLICATION,FOLLOW_KW_REPLICATION_in_replicationClause1707); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPLICATION.add(KW_REPLICATION42);

			LPAREN43=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_replicationClause1709); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN43);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:802:66: (replId= StringLiteral )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:802:67: replId= StringLiteral
			{
			replId=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_replicationClause1714); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(replId);

			}

			RPAREN44=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_replicationClause1717); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN44);

			// AST REWRITE
			// elements: replId, isMetadataOnly
			// token labels: replId, isMetadataOnly
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_replId=new RewriteRuleTokenStream(adaptor,"token replId",replId);
			RewriteRuleTokenStream stream_isMetadataOnly=new RewriteRuleTokenStream(adaptor,"token isMetadataOnly",isMetadataOnly);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 803:5: -> ^( TOK_REPLICATION $replId ( $isMetadataOnly)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:803:8: ^( TOK_REPLICATION $replId ( $isMetadataOnly)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_REPLICATION, "TOK_REPLICATION"), root_1);
				adaptor.addChild(root_1, stream_replId.nextNode());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:803:35: ( $isMetadataOnly)?
				if ( stream_isMetadataOnly.hasNext() ) {
					adaptor.addChild(root_1, stream_isMetadataOnly.nextNode());
				}
				stream_isMetadataOnly.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replicationClause"


	public static class exportStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "exportStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:806:1: exportStatement : KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )? -> ^( TOK_EXPORT $tab $path ( replicationClause )? ) ;
	public final HiveASTParser.exportStatement_return exportStatement() throws RecognitionException {
		HiveASTParser.exportStatement_return retval = new HiveASTParser.exportStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token path=null;
		Token KW_EXPORT45=null;
		Token KW_TABLE46=null;
		Token KW_TO47=null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope replicationClause48 =null;

		HiveParserASTNode path_tree=null;
		HiveParserASTNode KW_EXPORT45_tree=null;
		HiveParserASTNode KW_TABLE46_tree=null;
		HiveParserASTNode KW_TO47_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleTokenStream stream_KW_EXPORT=new RewriteRuleTokenStream(adaptor,"token KW_EXPORT");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");

		 pushMsg("export statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:809:5: ( KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )? -> ^( TOK_EXPORT $tab $path ( replicationClause )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:809:7: KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) ( replicationClause )?
			{
			KW_EXPORT45=(Token)match(input,KW_EXPORT,FOLLOW_KW_EXPORT_in_exportStatement1761); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXPORT.add(KW_EXPORT45);

			KW_TABLE46=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_exportStatement1769); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE46);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:810:16: (tab= tableOrPartition )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:810:17: tab= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_exportStatement1774);
			tab=tableOrPartition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());
			}

			KW_TO47=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_exportStatement1783); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO47);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:811:13: (path= StringLiteral )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:811:14: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_exportStatement1788); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(path);

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:812:7: ( replicationClause )?
			int alt12=2;
			int LA12_0 = input.LA(1);
			if ( (LA12_0==KW_FOR) ) {
				alt12=1;
			}
			switch (alt12) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:812:7: replicationClause
					{
					pushFollow(FOLLOW_replicationClause_in_exportStatement1797);
					replicationClause48=replicationClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause48.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: replicationClause, tab, path
			// token labels: path
			// rule labels: tab, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 813:5: -> ^( TOK_EXPORT $tab $path ( replicationClause )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:813:8: ^( TOK_EXPORT $tab $path ( replicationClause )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_EXPORT, "TOK_EXPORT"), root_1);
				adaptor.addChild(root_1, stream_tab.nextTree());
				adaptor.addChild(root_1, stream_path.nextNode());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:813:32: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "exportStatement"


	public static class importStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "importStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:816:1: importStatement : KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) ;
	public final HiveASTParser.importStatement_return importStatement() throws RecognitionException {
		HiveASTParser.importStatement_return retval = new HiveASTParser.importStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token ext=null;
		Token path=null;
		Token KW_IMPORT49=null;
		Token KW_TABLE50=null;
		Token KW_FROM51=null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope tableLocation52 =null;

		HiveParserASTNode ext_tree=null;
		HiveParserASTNode path_tree=null;
		HiveParserASTNode KW_IMPORT49_tree=null;
		HiveParserASTNode KW_TABLE50_tree=null;
		HiveParserASTNode KW_FROM51_tree=null;
		RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_IMPORT=new RewriteRuleTokenStream(adaptor,"token KW_IMPORT");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 pushMsg("import statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:819:8: ( KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:819:10: KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )?
			{
			KW_IMPORT49=(Token)match(input,KW_IMPORT,FOLLOW_KW_IMPORT_in_importStatement1847); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_IMPORT.add(KW_IMPORT49);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:820:10: ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )?
			int alt14=2;
			int LA14_0 = input.LA(1);
			if ( (LA14_0==KW_EXTERNAL||LA14_0==KW_TABLE) ) {
				alt14=1;
			}
			switch (alt14) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:820:11: (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition )
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:820:11: (ext= KW_EXTERNAL )?
					int alt13=2;
					int LA13_0 = input.LA(1);
					if ( (LA13_0==KW_EXTERNAL) ) {
						alt13=1;
					}
					switch (alt13) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:820:12: ext= KW_EXTERNAL
							{
							ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_importStatement1862); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTERNAL.add(ext);

							}
							break;

					}

					KW_TABLE50=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_importStatement1866); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE50);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:820:39: (tab= tableOrPartition )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:820:40: tab= tableOrPartition
					{
					pushFollow(FOLLOW_tableOrPartition_in_importStatement1871);
					tab=tableOrPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableOrPartition.add(tab.getTree());
					}

					}
					break;

			}

			KW_FROM51=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_importStatement1885); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM51);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:821:18: (path= StringLiteral )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:821:19: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_importStatement1890); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(path);

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:822:10: ( tableLocation )?
			int alt15=2;
			int LA15_0 = input.LA(1);
			if ( (LA15_0==KW_LOCATION) ) {
				alt15=1;
			}
			switch (alt15) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:822:10: tableLocation
					{
					pushFollow(FOLLOW_tableLocation_in_importStatement1902);
					tableLocation52=tableLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation52.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableLocation, path, tab, ext
			// token labels: ext, path
			// rule labels: tab, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 823:5: -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:823:8: ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_IMPORT, "TOK_IMPORT"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:823:28: ( $tab)?
				if ( stream_tab.hasNext() ) {
					adaptor.addChild(root_1, stream_tab.nextTree());
				}
				stream_tab.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:823:34: ( $ext)?
				if ( stream_ext.hasNext() ) {
					adaptor.addChild(root_1, stream_ext.nextNode());
				}
				stream_ext.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:823:39: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "importStatement"


	public static class replDumpStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "replDumpStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:826:1: replDumpStatement : KW_REPL KW_DUMP (dbName= identifier ) ( DOT tblName= identifier )? ( KW_FROM (eventId= Number ) ( KW_TO (rangeEnd= Number ) )? ( KW_LIMIT (batchSize= Number ) )? )? -> ^( TOK_REPL_DUMP $dbName ( $tblName)? ( ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? ) )? ) ;
	public final HiveASTParser.replDumpStatement_return replDumpStatement() throws RecognitionException {
		HiveASTParser.replDumpStatement_return retval = new HiveASTParser.replDumpStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token eventId=null;
		Token rangeEnd=null;
		Token batchSize=null;
		Token KW_REPL53=null;
		Token KW_DUMP54=null;
		Token DOT55=null;
		Token KW_FROM56=null;
		Token KW_TO57=null;
		Token KW_LIMIT58=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope tblName =null;

		HiveParserASTNode eventId_tree=null;
		HiveParserASTNode rangeEnd_tree=null;
		HiveParserASTNode batchSize_tree=null;
		HiveParserASTNode KW_REPL53_tree=null;
		HiveParserASTNode KW_DUMP54_tree=null;
		HiveParserASTNode DOT55_tree=null;
		HiveParserASTNode KW_FROM56_tree=null;
		HiveParserASTNode KW_TO57_tree=null;
		HiveParserASTNode KW_LIMIT58_tree=null;
		RewriteRuleTokenStream stream_KW_DUMP=new RewriteRuleTokenStream(adaptor,"token KW_DUMP");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleTokenStream stream_KW_REPL=new RewriteRuleTokenStream(adaptor,"token KW_REPL");
		RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("replication dump statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:829:7: ( KW_REPL KW_DUMP (dbName= identifier ) ( DOT tblName= identifier )? ( KW_FROM (eventId= Number ) ( KW_TO (rangeEnd= Number ) )? ( KW_LIMIT (batchSize= Number ) )? )? -> ^( TOK_REPL_DUMP $dbName ( $tblName)? ( ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? ) )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:829:9: KW_REPL KW_DUMP (dbName= identifier ) ( DOT tblName= identifier )? ( KW_FROM (eventId= Number ) ( KW_TO (rangeEnd= Number ) )? ( KW_LIMIT (batchSize= Number ) )? )?
			{
			KW_REPL53=(Token)match(input,KW_REPL,FOLLOW_KW_REPL_in_replDumpStatement1956); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPL.add(KW_REPL53);

			KW_DUMP54=(Token)match(input,KW_DUMP,FOLLOW_KW_DUMP_in_replDumpStatement1958); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DUMP.add(KW_DUMP54);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:830:9: (dbName= identifier )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:830:10: dbName= identifier
			{
			pushFollow(FOLLOW_identifier_in_replDumpStatement1971);
			dbName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:830:29: ( DOT tblName= identifier )?
			int alt16=2;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==DOT) ) {
				alt16=1;
			}
			switch (alt16) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:830:30: DOT tblName= identifier
					{
					DOT55=(Token)match(input,DOT,FOLLOW_DOT_in_replDumpStatement1975); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOT.add(DOT55);

					pushFollow(FOLLOW_identifier_in_replDumpStatement1979);
					tblName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(tblName.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:831:9: ( KW_FROM (eventId= Number ) ( KW_TO (rangeEnd= Number ) )? ( KW_LIMIT (batchSize= Number ) )? )?
			int alt19=2;
			int LA19_0 = input.LA(1);
			if ( (LA19_0==KW_FROM) ) {
				alt19=1;
			}
			switch (alt19) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:831:10: KW_FROM (eventId= Number ) ( KW_TO (rangeEnd= Number ) )? ( KW_LIMIT (batchSize= Number ) )?
					{
					KW_FROM56=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_replDumpStatement1992); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM56);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:831:18: (eventId= Number )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:831:19: eventId= Number
					{
					eventId=(Token)match(input,Number,FOLLOW_Number_in_replDumpStatement1997); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(eventId);

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:832:11: ( KW_TO (rangeEnd= Number ) )?
					int alt17=2;
					int LA17_0 = input.LA(1);
					if ( (LA17_0==KW_TO) ) {
						alt17=1;
					}
					switch (alt17) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:832:12: KW_TO (rangeEnd= Number )
							{
							KW_TO57=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_replDumpStatement2011); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO57);

							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:832:18: (rangeEnd= Number )
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:832:19: rangeEnd= Number
							{
							rangeEnd=(Token)match(input,Number,FOLLOW_Number_in_replDumpStatement2016); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Number.add(rangeEnd);

							}

							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:833:11: ( KW_LIMIT (batchSize= Number ) )?
					int alt18=2;
					int LA18_0 = input.LA(1);
					if ( (LA18_0==KW_LIMIT) ) {
						alt18=1;
					}
					switch (alt18) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:833:12: KW_LIMIT (batchSize= Number )
							{
							KW_LIMIT58=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_replDumpStatement2032); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIMIT.add(KW_LIMIT58);

							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:833:21: (batchSize= Number )
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:833:22: batchSize= Number
							{
							batchSize=(Token)match(input,Number,FOLLOW_Number_in_replDumpStatement2037); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Number.add(batchSize);

							}

							}
							break;

					}

					}
					break;

			}

			// AST REWRITE
			// elements: eventId, rangeEnd, batchSize, tblName, dbName
			// token labels: eventId, batchSize, rangeEnd
			// rule labels: dbName, tblName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_eventId=new RewriteRuleTokenStream(adaptor,"token eventId",eventId);
			RewriteRuleTokenStream stream_batchSize=new RewriteRuleTokenStream(adaptor,"token batchSize",batchSize);
			RewriteRuleTokenStream stream_rangeEnd=new RewriteRuleTokenStream(adaptor,"token rangeEnd",rangeEnd);
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_tblName=new RewriteRuleSubtreeStream(adaptor,"rule tblName",tblName!=null?tblName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 835:5: -> ^( TOK_REPL_DUMP $dbName ( $tblName)? ( ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? ) )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:835:8: ^( TOK_REPL_DUMP $dbName ( $tblName)? ( ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? ) )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_REPL_DUMP, "TOK_REPL_DUMP"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:835:33: ( $tblName)?
				if ( stream_tblName.hasNext() ) {
					adaptor.addChild(root_1, stream_tblName.nextTree());
				}
				stream_tblName.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:835:42: ( ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? ) )?
				if ( stream_eventId.hasNext()||stream_rangeEnd.hasNext()||stream_batchSize.hasNext() ) {
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:835:42: ^( TOK_FROM $eventId ( TOK_TO $rangeEnd)? ( TOK_LIMIT $batchSize)? )
					{
					HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
					root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
					adaptor.addChild(root_2, stream_eventId.nextNode());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:835:62: ( TOK_TO $rangeEnd)?
					if ( stream_rangeEnd.hasNext() ) {
						adaptor.addChild(root_2, (HiveParserASTNode)adaptor.create(TOK_TO, "TOK_TO"));
						adaptor.addChild(root_2, stream_rangeEnd.nextNode());
					}
					stream_rangeEnd.reset();

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:835:82: ( TOK_LIMIT $batchSize)?
					if ( stream_batchSize.hasNext() ) {
						adaptor.addChild(root_2, (HiveParserASTNode)adaptor.create(TOK_LIMIT, "TOK_LIMIT"));
						adaptor.addChild(root_2, stream_batchSize.nextNode());
					}
					stream_batchSize.reset();

					adaptor.addChild(root_1, root_2);
					}

				}
				stream_eventId.reset();
				stream_rangeEnd.reset();
				stream_batchSize.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replDumpStatement"


	public static class replLoadStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "replLoadStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:838:1: replLoadStatement : KW_REPL KW_LOAD ( (dbName= identifier ) ( DOT tblName= identifier )? )? KW_FROM (path= StringLiteral ) -> ^( TOK_REPL_LOAD $path ( $dbName)? ( $tblName)? ) ;
	public final HiveASTParser.replLoadStatement_return replLoadStatement() throws RecognitionException {
		HiveASTParser.replLoadStatement_return retval = new HiveASTParser.replLoadStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token path=null;
		Token KW_REPL59=null;
		Token KW_LOAD60=null;
		Token DOT61=null;
		Token KW_FROM62=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope tblName =null;

		HiveParserASTNode path_tree=null;
		HiveParserASTNode KW_REPL59_tree=null;
		HiveParserASTNode KW_LOAD60_tree=null;
		HiveParserASTNode DOT61_tree=null;
		HiveParserASTNode KW_FROM62_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_REPL=new RewriteRuleTokenStream(adaptor,"token KW_REPL");
		RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("replication load statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:841:7: ( KW_REPL KW_LOAD ( (dbName= identifier ) ( DOT tblName= identifier )? )? KW_FROM (path= StringLiteral ) -> ^( TOK_REPL_LOAD $path ( $dbName)? ( $tblName)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:841:9: KW_REPL KW_LOAD ( (dbName= identifier ) ( DOT tblName= identifier )? )? KW_FROM (path= StringLiteral )
			{
			KW_REPL59=(Token)match(input,KW_REPL,FOLLOW_KW_REPL_in_replLoadStatement2122); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPL.add(KW_REPL59);

			KW_LOAD60=(Token)match(input,KW_LOAD,FOLLOW_KW_LOAD_in_replLoadStatement2124); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOAD.add(KW_LOAD60);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:842:9: ( (dbName= identifier ) ( DOT tblName= identifier )? )?
			int alt21=2;
			int LA21_0 = input.LA(1);
			if ( (LA21_0==Identifier||(LA21_0 >= KW_ABORT && LA21_0 <= KW_AFTER)||LA21_0==KW_ANALYZE||LA21_0==KW_ARCHIVE||LA21_0==KW_ASC||(LA21_0 >= KW_AUTOCOMMIT && LA21_0 <= KW_BEFORE)||(LA21_0 >= KW_BUCKET && LA21_0 <= KW_BUCKETS)||(LA21_0 >= KW_CACHE && LA21_0 <= KW_CASCADE)||LA21_0==KW_CHANGE||(LA21_0 >= KW_CLUSTER && LA21_0 <= KW_COLLECTION)||(LA21_0 >= KW_COLUMNS && LA21_0 <= KW_COMMENT)||(LA21_0 >= KW_COMPACT && LA21_0 <= KW_CONCATENATE)||LA21_0==KW_CONTINUE||LA21_0==KW_DATA||LA21_0==KW_DATABASES||(LA21_0 >= KW_DATETIME && LA21_0 <= KW_DBPROPERTIES)||(LA21_0 >= KW_DEFERRED && LA21_0 <= KW_DEFINED)||(LA21_0 >= KW_DELIMITED && LA21_0 <= KW_DESC)||(LA21_0 >= KW_DETAIL && LA21_0 <= KW_DISABLE)||LA21_0==KW_DISTRIBUTE||LA21_0==KW_DOW||(LA21_0 >= KW_DUMP && LA21_0 <= KW_ELEM_TYPE)||LA21_0==KW_ENABLE||LA21_0==KW_ESCAPED||LA21_0==KW_EXCLUSIVE||(LA21_0 >= KW_EXPLAIN && LA21_0 <= KW_EXPRESSION)||(LA21_0 >= KW_FIELDS && LA21_0 <= KW_FIRST)||(LA21_0 >= KW_FORMAT && LA21_0 <= KW_FORMATTED)||LA21_0==KW_FUNCTIONS||(LA21_0 >= KW_HOUR && LA21_0 <= KW_IDXPROPERTIES)||(LA21_0 >= KW_INDEX && LA21_0 <= KW_INDEXES)||(LA21_0 >= KW_INPATH && LA21_0 <= KW_INPUTFORMAT)||(LA21_0 >= KW_ISOLATION && LA21_0 <= KW_JAR)||(LA21_0 >= KW_KEY && LA21_0 <= KW_LAST)||LA21_0==KW_LEVEL||(LA21_0 >= KW_LIMIT && LA21_0 <= KW_LOAD)||(LA21_0 >= KW_LOCATION && LA21_0 <= KW_LONG)||(LA21_0 >= KW_MAPJOIN && LA21_0 <= KW_MATERIALIZED)||LA21_0==KW_METADATA||(LA21_0 >= KW_MINUTE && LA21_0 <= KW_MONTH)||LA21_0==KW_MSCK||(LA21_0 >= KW_NORELY && LA21_0 <= KW_NOSCAN)||LA21_0==KW_NOVALIDATE||LA21_0==KW_NULLS||LA21_0==KW_OFFSET||(LA21_0 >= KW_OPERATOR && LA21_0 <= KW_OPTION)||(LA21_0 >= KW_OUTPUTDRIVER && LA21_0 <= KW_OUTPUTFORMAT)||(LA21_0 >= KW_OVERWRITE && LA21_0 <= KW_OWNER)||(LA21_0 >= KW_PARTITIONED && LA21_0 <= KW_PARTITIONS)||LA21_0==KW_PLUS||LA21_0==KW_PRETTY||LA21_0==KW_PRINCIPALS||(LA21_0 >= KW_PURGE && LA21_0 <= KW_QUARTER)||LA21_0==KW_READ||(LA21_0 >= KW_REBUILD && LA21_0 <= KW_RECORDWRITER)||(LA21_0 >= KW_RELOAD && LA21_0 <= KW_RESTRICT)||LA21_0==KW_REWRITE||(LA21_0 >= KW_ROLE && LA21_0 <= KW_ROLES)||(LA21_0 >= KW_SCHEMA && LA21_0 <= KW_SECOND)||(LA21_0 >= KW_SEMI && LA21_0 <= KW_SERVER)||(LA21_0 >= KW_SETS && LA21_0 <= KW_SKEWED)||(LA21_0 >= KW_SNAPSHOT && LA21_0 <= KW_SSL)||(LA21_0 >= KW_STATISTICS && LA21_0 <= KW_SUMMARY)||LA21_0==KW_TABLES||(LA21_0 >= KW_TBLPROPERTIES && LA21_0 <= KW_TERMINATED)||LA21_0==KW_TINYINT||(LA21_0 >= KW_TOUCH && LA21_0 <= KW_TRANSACTIONS)||LA21_0==KW_UNARCHIVE||LA21_0==KW_UNDO||LA21_0==KW_UNIONTYPE||(LA21_0 >= KW_UNLOCK && LA21_0 <= KW_UNSIGNED)||(LA21_0 >= KW_URI && LA21_0 <= KW_USE)||(LA21_0 >= KW_UTC && LA21_0 <= KW_VALIDATE)||LA21_0==KW_VALUE_TYPE||(LA21_0 >= KW_VECTORIZATION && LA21_0 <= KW_WEEK)||LA21_0==KW_WHILE||(LA21_0 >= KW_WORK && LA21_0 <= KW_YEAR)||LA21_0==KW_BATCH||LA21_0==KW_DAYOFWEEK||LA21_0==KW_HOLD_DDLTIME||LA21_0==KW_IGNORE||LA21_0==KW_NO_DROP||LA21_0==KW_OFFLINE||LA21_0==KW_PROTECTION||LA21_0==KW_READONLY) ) {
				alt21=1;
			}
			switch (alt21) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:842:10: (dbName= identifier ) ( DOT tblName= identifier )?
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:842:10: (dbName= identifier )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:842:11: dbName= identifier
					{
					pushFollow(FOLLOW_identifier_in_replLoadStatement2138);
					dbName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:842:30: ( DOT tblName= identifier )?
					int alt20=2;
					int LA20_0 = input.LA(1);
					if ( (LA20_0==DOT) ) {
						alt20=1;
					}
					switch (alt20) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:842:31: DOT tblName= identifier
							{
							DOT61=(Token)match(input,DOT,FOLLOW_DOT_in_replLoadStatement2142); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_DOT.add(DOT61);

							pushFollow(FOLLOW_identifier_in_replLoadStatement2146);
							tblName=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(tblName.getTree());
							}
							break;

					}

					}
					break;

			}

			KW_FROM62=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_replLoadStatement2160); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM62);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:843:17: (path= StringLiteral )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:843:18: path= StringLiteral
			{
			path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_replLoadStatement2165); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(path);

			}

			// AST REWRITE
			// elements: tblName, path, dbName
			// token labels: path
			// rule labels: dbName, tblName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_tblName=new RewriteRuleSubtreeStream(adaptor,"rule tblName",tblName!=null?tblName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 844:7: -> ^( TOK_REPL_LOAD $path ( $dbName)? ( $tblName)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:844:10: ^( TOK_REPL_LOAD $path ( $dbName)? ( $tblName)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_REPL_LOAD, "TOK_REPL_LOAD"), root_1);
				adaptor.addChild(root_1, stream_path.nextNode());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:844:33: ( $dbName)?
				if ( stream_dbName.hasNext() ) {
					adaptor.addChild(root_1, stream_dbName.nextTree());
				}
				stream_dbName.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:844:42: ( $tblName)?
				if ( stream_tblName.hasNext() ) {
					adaptor.addChild(root_1, stream_tblName.nextTree());
				}
				stream_tblName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replLoadStatement"


	public static class replStatusStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "replStatusStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:847:1: replStatusStatement : KW_REPL KW_STATUS (dbName= identifier ) ( DOT tblName= identifier )? -> ^( TOK_REPL_STATUS $dbName ( $tblName)? ) ;
	public final HiveASTParser.replStatusStatement_return replStatusStatement() throws RecognitionException {
		HiveASTParser.replStatusStatement_return retval = new HiveASTParser.replStatusStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_REPL63=null;
		Token KW_STATUS64=null;
		Token DOT65=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope tblName =null;

		HiveParserASTNode KW_REPL63_tree=null;
		HiveParserASTNode KW_STATUS64_tree=null;
		HiveParserASTNode DOT65_tree=null;
		RewriteRuleTokenStream stream_KW_STATUS=new RewriteRuleTokenStream(adaptor,"token KW_STATUS");
		RewriteRuleTokenStream stream_KW_REPL=new RewriteRuleTokenStream(adaptor,"token KW_REPL");
		RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("replication load statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:850:7: ( KW_REPL KW_STATUS (dbName= identifier ) ( DOT tblName= identifier )? -> ^( TOK_REPL_STATUS $dbName ( $tblName)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:850:9: KW_REPL KW_STATUS (dbName= identifier ) ( DOT tblName= identifier )?
			{
			KW_REPL63=(Token)match(input,KW_REPL,FOLLOW_KW_REPL_in_replStatusStatement2220); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPL.add(KW_REPL63);

			KW_STATUS64=(Token)match(input,KW_STATUS,FOLLOW_KW_STATUS_in_replStatusStatement2222); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STATUS.add(KW_STATUS64);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:851:9: (dbName= identifier )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:851:10: dbName= identifier
			{
			pushFollow(FOLLOW_identifier_in_replStatusStatement2235);
			dbName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:851:29: ( DOT tblName= identifier )?
			int alt22=2;
			int LA22_0 = input.LA(1);
			if ( (LA22_0==DOT) ) {
				alt22=1;
			}
			switch (alt22) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:851:30: DOT tblName= identifier
					{
					DOT65=(Token)match(input,DOT,FOLLOW_DOT_in_replStatusStatement2239); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_DOT.add(DOT65);

					pushFollow(FOLLOW_identifier_in_replStatusStatement2243);
					tblName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(tblName.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: dbName, tblName
			// token labels: 
			// rule labels: dbName, tblName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_tblName=new RewriteRuleSubtreeStream(adaptor,"rule tblName",tblName!=null?tblName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 852:7: -> ^( TOK_REPL_STATUS $dbName ( $tblName)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:852:10: ^( TOK_REPL_STATUS $dbName ( $tblName)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_REPL_STATUS, "TOK_REPL_STATUS"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:852:37: ( $tblName)?
				if ( stream_tblName.hasNext() ) {
					adaptor.addChild(root_1, stream_tblName.nextTree());
				}
				stream_tblName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "replStatusStatement"


	public static class ddlStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "ddlStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:855:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | createMaterializedViewStatement | dropViewStatement | dropMaterializedViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement );
	public final HiveASTParser.ddlStatement_return ddlStatement() throws RecognitionException {
		HiveASTParser.ddlStatement_return retval = new HiveASTParser.ddlStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope createDatabaseStatement66 =null;
		ParserRuleReturnScope switchDatabaseStatement67 =null;
		ParserRuleReturnScope dropDatabaseStatement68 =null;
		ParserRuleReturnScope createTableStatement69 =null;
		ParserRuleReturnScope dropTableStatement70 =null;
		ParserRuleReturnScope truncateTableStatement71 =null;
		ParserRuleReturnScope alterStatement72 =null;
		ParserRuleReturnScope descStatement73 =null;
		ParserRuleReturnScope showStatement74 =null;
		ParserRuleReturnScope metastoreCheck75 =null;
		ParserRuleReturnScope createViewStatement76 =null;
		ParserRuleReturnScope createMaterializedViewStatement77 =null;
		ParserRuleReturnScope dropViewStatement78 =null;
		ParserRuleReturnScope dropMaterializedViewStatement79 =null;
		ParserRuleReturnScope createFunctionStatement80 =null;
		ParserRuleReturnScope createMacroStatement81 =null;
		ParserRuleReturnScope createIndexStatement82 =null;
		ParserRuleReturnScope dropIndexStatement83 =null;
		ParserRuleReturnScope dropFunctionStatement84 =null;
		ParserRuleReturnScope reloadFunctionStatement85 =null;
		ParserRuleReturnScope dropMacroStatement86 =null;
		ParserRuleReturnScope analyzeStatement87 =null;
		ParserRuleReturnScope lockStatement88 =null;
		ParserRuleReturnScope unlockStatement89 =null;
		ParserRuleReturnScope lockDatabase90 =null;
		ParserRuleReturnScope unlockDatabase91 =null;
		ParserRuleReturnScope createRoleStatement92 =null;
		ParserRuleReturnScope dropRoleStatement93 =null;
		ParserRuleReturnScope grantPrivileges94 =null;
		ParserRuleReturnScope revokePrivileges95 =null;
		ParserRuleReturnScope showGrants96 =null;
		ParserRuleReturnScope showRoleGrants97 =null;
		ParserRuleReturnScope showRolePrincipals98 =null;
		ParserRuleReturnScope showRoles99 =null;
		ParserRuleReturnScope grantRole100 =null;
		ParserRuleReturnScope revokeRole101 =null;
		ParserRuleReturnScope setRole102 =null;
		ParserRuleReturnScope showCurrentRole103 =null;
		ParserRuleReturnScope abortTransactionStatement104 =null;


		 pushMsg("ddl statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:858:5: ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | createMaterializedViewStatement | dropViewStatement | dropMaterializedViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement )
			int alt23=39;
			alt23 = dfa23.predict(input);
			switch (alt23) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:858:7: createDatabaseStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_createDatabaseStatement_in_ddlStatement2293);
					createDatabaseStatement66=createDatabaseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createDatabaseStatement66.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:859:7: switchDatabaseStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_switchDatabaseStatement_in_ddlStatement2301);
					switchDatabaseStatement67=switchDatabaseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, switchDatabaseStatement67.getTree());

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:860:7: dropDatabaseStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropDatabaseStatement_in_ddlStatement2309);
					dropDatabaseStatement68=dropDatabaseStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropDatabaseStatement68.getTree());

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:861:7: createTableStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_createTableStatement_in_ddlStatement2317);
					createTableStatement69=createTableStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createTableStatement69.getTree());

					}
					break;
				case 5 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:862:7: dropTableStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropTableStatement_in_ddlStatement2325);
					dropTableStatement70=dropTableStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropTableStatement70.getTree());

					}
					break;
				case 6 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:863:7: truncateTableStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_truncateTableStatement_in_ddlStatement2333);
					truncateTableStatement71=truncateTableStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, truncateTableStatement71.getTree());

					}
					break;
				case 7 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:864:7: alterStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatement_in_ddlStatement2341);
					alterStatement72=alterStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatement72.getTree());

					}
					break;
				case 8 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:865:7: descStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_descStatement_in_ddlStatement2349);
					descStatement73=descStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, descStatement73.getTree());

					}
					break;
				case 9 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:866:7: showStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_showStatement_in_ddlStatement2357);
					showStatement74=showStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showStatement74.getTree());

					}
					break;
				case 10 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:867:7: metastoreCheck
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_metastoreCheck_in_ddlStatement2365);
					metastoreCheck75=metastoreCheck();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, metastoreCheck75.getTree());

					}
					break;
				case 11 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:868:7: createViewStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_createViewStatement_in_ddlStatement2373);
					createViewStatement76=createViewStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createViewStatement76.getTree());

					}
					break;
				case 12 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:869:7: createMaterializedViewStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_createMaterializedViewStatement_in_ddlStatement2381);
					createMaterializedViewStatement77=createMaterializedViewStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createMaterializedViewStatement77.getTree());

					}
					break;
				case 13 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:870:7: dropViewStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropViewStatement_in_ddlStatement2389);
					dropViewStatement78=dropViewStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropViewStatement78.getTree());

					}
					break;
				case 14 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:871:7: dropMaterializedViewStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropMaterializedViewStatement_in_ddlStatement2397);
					dropMaterializedViewStatement79=dropMaterializedViewStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropMaterializedViewStatement79.getTree());

					}
					break;
				case 15 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:872:7: createFunctionStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_createFunctionStatement_in_ddlStatement2405);
					createFunctionStatement80=createFunctionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createFunctionStatement80.getTree());

					}
					break;
				case 16 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:873:7: createMacroStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_createMacroStatement_in_ddlStatement2413);
					createMacroStatement81=createMacroStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createMacroStatement81.getTree());

					}
					break;
				case 17 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:874:7: createIndexStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_createIndexStatement_in_ddlStatement2421);
					createIndexStatement82=createIndexStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexStatement82.getTree());

					}
					break;
				case 18 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:875:7: dropIndexStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropIndexStatement_in_ddlStatement2429);
					dropIndexStatement83=dropIndexStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropIndexStatement83.getTree());

					}
					break;
				case 19 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:876:7: dropFunctionStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropFunctionStatement_in_ddlStatement2437);
					dropFunctionStatement84=dropFunctionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropFunctionStatement84.getTree());

					}
					break;
				case 20 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:877:7: reloadFunctionStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_reloadFunctionStatement_in_ddlStatement2445);
					reloadFunctionStatement85=reloadFunctionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, reloadFunctionStatement85.getTree());

					}
					break;
				case 21 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:878:7: dropMacroStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropMacroStatement_in_ddlStatement2453);
					dropMacroStatement86=dropMacroStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropMacroStatement86.getTree());

					}
					break;
				case 22 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:879:7: analyzeStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_analyzeStatement_in_ddlStatement2461);
					analyzeStatement87=analyzeStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, analyzeStatement87.getTree());

					}
					break;
				case 23 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:880:7: lockStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_lockStatement_in_ddlStatement2469);
					lockStatement88=lockStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lockStatement88.getTree());

					}
					break;
				case 24 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:881:7: unlockStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_unlockStatement_in_ddlStatement2477);
					unlockStatement89=unlockStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unlockStatement89.getTree());

					}
					break;
				case 25 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:882:7: lockDatabase
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_lockDatabase_in_ddlStatement2485);
					lockDatabase90=lockDatabase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, lockDatabase90.getTree());

					}
					break;
				case 26 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:883:7: unlockDatabase
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_unlockDatabase_in_ddlStatement2493);
					unlockDatabase91=unlockDatabase();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unlockDatabase91.getTree());

					}
					break;
				case 27 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:884:7: createRoleStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_createRoleStatement_in_ddlStatement2501);
					createRoleStatement92=createRoleStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, createRoleStatement92.getTree());

					}
					break;
				case 28 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:885:7: dropRoleStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_dropRoleStatement_in_ddlStatement2509);
					dropRoleStatement93=dropRoleStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, dropRoleStatement93.getTree());

					}
					break;
				case 29 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:886:7: ( grantPrivileges )=> grantPrivileges
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_grantPrivileges_in_ddlStatement2523);
					grantPrivileges94=grantPrivileges();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, grantPrivileges94.getTree());

					}
					break;
				case 30 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:887:7: ( revokePrivileges )=> revokePrivileges
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_revokePrivileges_in_ddlStatement2537);
					revokePrivileges95=revokePrivileges();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, revokePrivileges95.getTree());

					}
					break;
				case 31 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:888:7: showGrants
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_showGrants_in_ddlStatement2545);
					showGrants96=showGrants();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showGrants96.getTree());

					}
					break;
				case 32 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:889:7: showRoleGrants
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_showRoleGrants_in_ddlStatement2553);
					showRoleGrants97=showRoleGrants();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showRoleGrants97.getTree());

					}
					break;
				case 33 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:890:7: showRolePrincipals
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_showRolePrincipals_in_ddlStatement2561);
					showRolePrincipals98=showRolePrincipals();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showRolePrincipals98.getTree());

					}
					break;
				case 34 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:891:7: showRoles
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_showRoles_in_ddlStatement2569);
					showRoles99=showRoles();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showRoles99.getTree());

					}
					break;
				case 35 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:892:7: grantRole
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_grantRole_in_ddlStatement2577);
					grantRole100=grantRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, grantRole100.getTree());

					}
					break;
				case 36 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:893:7: revokeRole
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_revokeRole_in_ddlStatement2585);
					revokeRole101=revokeRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, revokeRole101.getTree());

					}
					break;
				case 37 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:894:7: setRole
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_setRole_in_ddlStatement2593);
					setRole102=setRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setRole102.getTree());

					}
					break;
				case 38 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:895:7: showCurrentRole
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_showCurrentRole_in_ddlStatement2601);
					showCurrentRole103=showCurrentRole();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, showCurrentRole103.getTree());

					}
					break;
				case 39 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:896:7: abortTransactionStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_abortTransactionStatement_in_ddlStatement2609);
					abortTransactionStatement104=abortTransactionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, abortTransactionStatement104.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ddlStatement"


	public static class ifExists_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "ifExists"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:899:1: ifExists : KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) ;
	public final HiveASTParser.ifExists_return ifExists() throws RecognitionException {
		HiveASTParser.ifExists_return retval = new HiveASTParser.ifExists_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_IF105=null;
		Token KW_EXISTS106=null;

		HiveParserASTNode KW_IF105_tree=null;
		HiveParserASTNode KW_EXISTS106_tree=null;
		RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");
		RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");

		 pushMsg("if exists clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:902:5: ( KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:902:7: KW_IF KW_EXISTS
			{
			KW_IF105=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifExists2636); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_IF.add(KW_IF105);

			KW_EXISTS106=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifExists2638); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXISTS.add(KW_EXISTS106);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 903:5: -> ^( TOK_IFEXISTS )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:903:8: ^( TOK_IFEXISTS )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_IFEXISTS, "TOK_IFEXISTS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ifExists"


	public static class restrictOrCascade_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "restrictOrCascade"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:906:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );
	public final HiveASTParser.restrictOrCascade_return restrictOrCascade() throws RecognitionException {
		HiveASTParser.restrictOrCascade_return retval = new HiveASTParser.restrictOrCascade_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_RESTRICT107=null;
		Token KW_CASCADE108=null;

		HiveParserASTNode KW_RESTRICT107_tree=null;
		HiveParserASTNode KW_CASCADE108_tree=null;
		RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
		RewriteRuleTokenStream stream_KW_RESTRICT=new RewriteRuleTokenStream(adaptor,"token KW_RESTRICT");

		 pushMsg("restrict or cascade clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:909:5: ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) )
			int alt24=2;
			int LA24_0 = input.LA(1);
			if ( (LA24_0==KW_RESTRICT) ) {
				alt24=1;
			}
			else if ( (LA24_0==KW_CASCADE) ) {
				alt24=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 24, 0, input);
				throw nvae;
			}

			switch (alt24) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:909:7: KW_RESTRICT
					{
					KW_RESTRICT107=(Token)match(input,KW_RESTRICT,FOLLOW_KW_RESTRICT_in_restrictOrCascade2675); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RESTRICT.add(KW_RESTRICT107);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 910:5: -> ^( TOK_RESTRICT )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:910:8: ^( TOK_RESTRICT )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_RESTRICT, "TOK_RESTRICT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:911:7: KW_CASCADE
					{
					KW_CASCADE108=(Token)match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_restrictOrCascade2693); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CASCADE.add(KW_CASCADE108);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 912:5: -> ^( TOK_CASCADE )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:912:8: ^( TOK_CASCADE )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CASCADE, "TOK_CASCADE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "restrictOrCascade"


	public static class ifNotExists_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "ifNotExists"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:915:1: ifNotExists : KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) ;
	public final HiveASTParser.ifNotExists_return ifNotExists() throws RecognitionException {
		HiveASTParser.ifNotExists_return retval = new HiveASTParser.ifNotExists_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_IF109=null;
		Token KW_NOT110=null;
		Token KW_EXISTS111=null;

		HiveParserASTNode KW_IF109_tree=null;
		HiveParserASTNode KW_NOT110_tree=null;
		HiveParserASTNode KW_EXISTS111_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");
		RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");

		 pushMsg("if not exists clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:918:5: ( KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:918:7: KW_IF KW_NOT KW_EXISTS
			{
			KW_IF109=(Token)match(input,KW_IF,FOLLOW_KW_IF_in_ifNotExists2730); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_IF.add(KW_IF109);

			KW_NOT110=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_ifNotExists2732); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT110);

			KW_EXISTS111=(Token)match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifNotExists2734); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXISTS.add(KW_EXISTS111);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 919:5: -> ^( TOK_IFNOTEXISTS )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:919:8: ^( TOK_IFNOTEXISTS )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_IFNOTEXISTS, "TOK_IFNOTEXISTS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "ifNotExists"


	public static class rewriteEnabled_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "rewriteEnabled"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:922:1: rewriteEnabled : KW_ENABLE KW_REWRITE -> ^( TOK_REWRITE_ENABLED ) ;
	public final HiveASTParser.rewriteEnabled_return rewriteEnabled() throws RecognitionException {
		HiveASTParser.rewriteEnabled_return retval = new HiveASTParser.rewriteEnabled_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ENABLE112=null;
		Token KW_REWRITE113=null;

		HiveParserASTNode KW_ENABLE112_tree=null;
		HiveParserASTNode KW_REWRITE113_tree=null;
		RewriteRuleTokenStream stream_KW_REWRITE=new RewriteRuleTokenStream(adaptor,"token KW_REWRITE");
		RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");

		 pushMsg("rewrite enabled clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:925:5: ( KW_ENABLE KW_REWRITE -> ^( TOK_REWRITE_ENABLED ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:925:7: KW_ENABLE KW_REWRITE
			{
			KW_ENABLE112=(Token)match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_rewriteEnabled2771); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ENABLE.add(KW_ENABLE112);

			KW_REWRITE113=(Token)match(input,KW_REWRITE,FOLLOW_KW_REWRITE_in_rewriteEnabled2773); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REWRITE.add(KW_REWRITE113);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 926:5: -> ^( TOK_REWRITE_ENABLED )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:926:8: ^( TOK_REWRITE_ENABLED )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_REWRITE_ENABLED, "TOK_REWRITE_ENABLED"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rewriteEnabled"


	public static class rewriteDisabled_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "rewriteDisabled"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:929:1: rewriteDisabled : KW_DISABLE KW_REWRITE -> ^( TOK_REWRITE_DISABLED ) ;
	public final HiveASTParser.rewriteDisabled_return rewriteDisabled() throws RecognitionException {
		HiveASTParser.rewriteDisabled_return retval = new HiveASTParser.rewriteDisabled_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_DISABLE114=null;
		Token KW_REWRITE115=null;

		HiveParserASTNode KW_DISABLE114_tree=null;
		HiveParserASTNode KW_REWRITE115_tree=null;
		RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
		RewriteRuleTokenStream stream_KW_REWRITE=new RewriteRuleTokenStream(adaptor,"token KW_REWRITE");

		 pushMsg("rewrite disabled clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:932:5: ( KW_DISABLE KW_REWRITE -> ^( TOK_REWRITE_DISABLED ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:932:7: KW_DISABLE KW_REWRITE
			{
			KW_DISABLE114=(Token)match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_rewriteDisabled2810); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DISABLE.add(KW_DISABLE114);

			KW_REWRITE115=(Token)match(input,KW_REWRITE,FOLLOW_KW_REWRITE_in_rewriteDisabled2812); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REWRITE.add(KW_REWRITE115);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 933:5: -> ^( TOK_REWRITE_DISABLED )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:933:8: ^( TOK_REWRITE_DISABLED )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_REWRITE_DISABLED, "TOK_REWRITE_DISABLED"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rewriteDisabled"


	public static class storedAsDirs_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "storedAsDirs"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:936:1: storedAsDirs : KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) ;
	public final HiveASTParser.storedAsDirs_return storedAsDirs() throws RecognitionException {
		HiveASTParser.storedAsDirs_return retval = new HiveASTParser.storedAsDirs_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_STORED116=null;
		Token KW_AS117=null;
		Token KW_DIRECTORIES118=null;

		HiveParserASTNode KW_STORED116_tree=null;
		HiveParserASTNode KW_AS117_tree=null;
		HiveParserASTNode KW_DIRECTORIES118_tree=null;
		RewriteRuleTokenStream stream_KW_DIRECTORIES=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORIES");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");

		 pushMsg("stored as directories", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:939:5: ( KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:939:7: KW_STORED KW_AS KW_DIRECTORIES
			{
			KW_STORED116=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_storedAsDirs2849); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED116);

			KW_AS117=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_storedAsDirs2851); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS117);

			KW_DIRECTORIES118=(Token)match(input,KW_DIRECTORIES,FOLLOW_KW_DIRECTORIES_in_storedAsDirs2853); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DIRECTORIES.add(KW_DIRECTORIES118);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 940:5: -> ^( TOK_STOREDASDIRS )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:940:8: ^( TOK_STOREDASDIRS )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_STOREDASDIRS, "TOK_STOREDASDIRS"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "storedAsDirs"


	public static class orReplace_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "orReplace"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:943:1: orReplace : KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) ;
	public final HiveASTParser.orReplace_return orReplace() throws RecognitionException {
		HiveASTParser.orReplace_return retval = new HiveASTParser.orReplace_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_OR119=null;
		Token KW_REPLACE120=null;

		HiveParserASTNode KW_OR119_tree=null;
		HiveParserASTNode KW_REPLACE120_tree=null;
		RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
		RewriteRuleTokenStream stream_KW_OR=new RewriteRuleTokenStream(adaptor,"token KW_OR");

		 pushMsg("or replace clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:946:5: ( KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:946:7: KW_OR KW_REPLACE
			{
			KW_OR119=(Token)match(input,KW_OR,FOLLOW_KW_OR_in_orReplace2890); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OR.add(KW_OR119);

			KW_REPLACE120=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_orReplace2892); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REPLACE.add(KW_REPLACE120);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 947:5: -> ^( TOK_ORREPLACE )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:947:8: ^( TOK_ORREPLACE )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ORREPLACE, "TOK_ORREPLACE"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orReplace"


	public static class createDatabaseStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "createDatabaseStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:950:1: createDatabaseStatement : KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) ;
	public final HiveASTParser.createDatabaseStatement_return createDatabaseStatement() throws RecognitionException {
		HiveASTParser.createDatabaseStatement_return retval = new HiveASTParser.createDatabaseStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_CREATE121=null;
		Token KW_DATABASE122=null;
		Token KW_SCHEMA123=null;
		Token KW_WITH127=null;
		Token KW_DBPROPERTIES128=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope dbprops =null;
		ParserRuleReturnScope ifNotExists124 =null;
		ParserRuleReturnScope databaseComment125 =null;
		ParserRuleReturnScope dbLocation126 =null;

		HiveParserASTNode KW_CREATE121_tree=null;
		HiveParserASTNode KW_DATABASE122_tree=null;
		HiveParserASTNode KW_SCHEMA123_tree=null;
		HiveParserASTNode KW_WITH127_tree=null;
		HiveParserASTNode KW_DBPROPERTIES128_tree=null;
		RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
		RewriteRuleSubtreeStream stream_databaseComment=new RewriteRuleSubtreeStream(adaptor,"rule databaseComment");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_dbLocation=new RewriteRuleSubtreeStream(adaptor,"rule dbLocation");

		 pushMsg("create database statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:953:5: ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:953:7: KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
			{
			KW_CREATE121=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement2929); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE121);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:953:17: ( KW_DATABASE | KW_SCHEMA )
			int alt25=2;
			int LA25_0 = input.LA(1);
			if ( (LA25_0==KW_DATABASE) ) {
				alt25=1;
			}
			else if ( (LA25_0==KW_SCHEMA) ) {
				alt25=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 25, 0, input);
				throw nvae;
			}

			switch (alt25) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:953:18: KW_DATABASE
					{
					KW_DATABASE122=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement2932); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE122);

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:953:30: KW_SCHEMA
					{
					KW_SCHEMA123=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement2934); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA123);

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:954:9: ( ifNotExists )?
			int alt26=2;
			int LA26_0 = input.LA(1);
			if ( (LA26_0==KW_IF) ) {
				alt26=1;
			}
			switch (alt26) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:954:9: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement2945);
					ifNotExists124=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists124.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_createDatabaseStatement2958);
			name=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(name.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:956:9: ( databaseComment )?
			int alt27=2;
			int LA27_0 = input.LA(1);
			if ( (LA27_0==KW_COMMENT) ) {
				alt27=1;
			}
			switch (alt27) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:956:9: databaseComment
					{
					pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement2968);
					databaseComment125=databaseComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_databaseComment.add(databaseComment125.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:957:9: ( dbLocation )?
			int alt28=2;
			int LA28_0 = input.LA(1);
			if ( (LA28_0==KW_LOCATION) ) {
				alt28=1;
			}
			switch (alt28) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:957:9: dbLocation
					{
					pushFollow(FOLLOW_dbLocation_in_createDatabaseStatement2979);
					dbLocation126=dbLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dbLocation.add(dbLocation126.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:958:9: ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
			int alt29=2;
			int LA29_0 = input.LA(1);
			if ( (LA29_0==KW_WITH) ) {
				alt29=1;
			}
			switch (alt29) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:958:10: KW_WITH KW_DBPROPERTIES dbprops= dbProperties
					{
					KW_WITH127=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_createDatabaseStatement2991); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH127);

					KW_DBPROPERTIES128=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement2993); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES128);

					pushFollow(FOLLOW_dbProperties_in_createDatabaseStatement2997);
					dbprops=dbProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dbProperties.add(dbprops.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: databaseComment, ifNotExists, dbprops, name, dbLocation
			// token labels: 
			// rule labels: name, dbprops, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_dbprops=new RewriteRuleSubtreeStream(adaptor,"rule dbprops",dbprops!=null?dbprops.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 959:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:959:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:959:35: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:959:48: ( dbLocation )?
				if ( stream_dbLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_dbLocation.nextTree());
				}
				stream_dbLocation.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:959:60: ( databaseComment )?
				if ( stream_databaseComment.hasNext() ) {
					adaptor.addChild(root_1, stream_databaseComment.nextTree());
				}
				stream_databaseComment.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:959:78: ( $dbprops)?
				if ( stream_dbprops.hasNext() ) {
					adaptor.addChild(root_1, stream_dbprops.nextTree());
				}
				stream_dbprops.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createDatabaseStatement"


	public static class dbLocation_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "dbLocation"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:962:1: dbLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) ;
	public final HiveASTParser.dbLocation_return dbLocation() throws RecognitionException {
		HiveASTParser.dbLocation_return retval = new HiveASTParser.dbLocation_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token locn=null;
		Token KW_LOCATION129=null;

		HiveParserASTNode locn_tree=null;
		HiveParserASTNode KW_LOCATION129_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg("database location specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:965:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:966:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION129=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_dbLocation3058); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION129);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_dbLocation3062); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 966:38: -> ^( TOK_DATABASELOCATION $locn)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:966:41: ^( TOK_DATABASELOCATION $locn)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DATABASELOCATION, "TOK_DATABASELOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbLocation"


	public static class dbProperties_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "dbProperties"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:969:1: dbProperties : LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) ;
	public final HiveASTParser.dbProperties_return dbProperties() throws RecognitionException {
		HiveASTParser.dbProperties_return retval = new HiveASTParser.dbProperties_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token LPAREN130=null;
		Token RPAREN132=null;
		ParserRuleReturnScope dbPropertiesList131 =null;

		HiveParserASTNode LPAREN130_tree=null;
		HiveParserASTNode RPAREN132_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_dbPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule dbPropertiesList");

		 pushMsg("dbproperties", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:972:5: ( LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:973:7: LPAREN dbPropertiesList RPAREN
			{
			LPAREN130=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_dbProperties3104); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN130);

			pushFollow(FOLLOW_dbPropertiesList_in_dbProperties3106);
			dbPropertiesList131=dbPropertiesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dbPropertiesList.add(dbPropertiesList131.getTree());
			RPAREN132=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_dbProperties3108); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN132);

			// AST REWRITE
			// elements: dbPropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 973:38: -> ^( TOK_DATABASEPROPERTIES dbPropertiesList )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:973:41: ^( TOK_DATABASEPROPERTIES dbPropertiesList )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DATABASEPROPERTIES, "TOK_DATABASEPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_dbPropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbProperties"


	public static class dbPropertiesList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "dbPropertiesList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:976:1: dbPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) ;
	public final HiveASTParser.dbPropertiesList_return dbPropertiesList() throws RecognitionException {
		HiveASTParser.dbPropertiesList_return retval = new HiveASTParser.dbPropertiesList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA134=null;
		ParserRuleReturnScope keyValueProperty133 =null;
		ParserRuleReturnScope keyValueProperty135 =null;

		HiveParserASTNode COMMA134_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");

		 pushMsg("database properties list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:979:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:980:7: keyValueProperty ( COMMA keyValueProperty )*
			{
			pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList3149);
			keyValueProperty133=keyValueProperty();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty133.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:980:24: ( COMMA keyValueProperty )*
			loop30:
			while (true) {
				int alt30=2;
				int LA30_0 = input.LA(1);
				if ( (LA30_0==COMMA) ) {
					alt30=1;
				}

				switch (alt30) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:980:25: COMMA keyValueProperty
					{
					COMMA134=(Token)match(input,COMMA,FOLLOW_COMMA_in_dbPropertiesList3152); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA134);

					pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList3154);
					keyValueProperty135=keyValueProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty135.getTree());
					}
					break;

				default :
					break loop30;
				}
			}

			// AST REWRITE
			// elements: keyValueProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 980:50: -> ^( TOK_DBPROPLIST ( keyValueProperty )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:980:53: ^( TOK_DBPROPLIST ( keyValueProperty )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DBPROPLIST, "TOK_DBPROPLIST"), root_1);
				if ( !(stream_keyValueProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_keyValueProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
				}
				stream_keyValueProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dbPropertiesList"


	public static class switchDatabaseStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "switchDatabaseStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:984:1: switchDatabaseStatement : KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) ;
	public final HiveASTParser.switchDatabaseStatement_return switchDatabaseStatement() throws RecognitionException {
		HiveASTParser.switchDatabaseStatement_return retval = new HiveASTParser.switchDatabaseStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_USE136=null;
		ParserRuleReturnScope identifier137 =null;

		HiveParserASTNode KW_USE136_tree=null;
		RewriteRuleTokenStream stream_KW_USE=new RewriteRuleTokenStream(adaptor,"token KW_USE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("switch database statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:987:5: ( KW_USE identifier -> ^( TOK_SWITCHDATABASE identifier ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:987:7: KW_USE identifier
			{
			KW_USE136=(Token)match(input,KW_USE,FOLLOW_KW_USE_in_switchDatabaseStatement3193); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_USE.add(KW_USE136);

			pushFollow(FOLLOW_identifier_in_switchDatabaseStatement3195);
			identifier137=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier137.getTree());
			// AST REWRITE
			// elements: identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 988:5: -> ^( TOK_SWITCHDATABASE identifier )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:988:8: ^( TOK_SWITCHDATABASE identifier )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SWITCHDATABASE, "TOK_SWITCHDATABASE"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "switchDatabaseStatement"


	public static class dropDatabaseStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropDatabaseStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:991:1: dropDatabaseStatement : KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) ;
	public final HiveASTParser.dropDatabaseStatement_return dropDatabaseStatement() throws RecognitionException {
		HiveASTParser.dropDatabaseStatement_return retval = new HiveASTParser.dropDatabaseStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_DROP138=null;
		Token KW_DATABASE139=null;
		Token KW_SCHEMA140=null;
		ParserRuleReturnScope ifExists141 =null;
		ParserRuleReturnScope identifier142 =null;
		ParserRuleReturnScope restrictOrCascade143 =null;

		HiveParserASTNode KW_DROP138_tree=null;
		HiveParserASTNode KW_DATABASE139_tree=null;
		HiveParserASTNode KW_SCHEMA140_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");

		 pushMsg("drop database statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:994:5: ( KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:994:7: KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? identifier ( restrictOrCascade )?
			{
			KW_DROP138=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropDatabaseStatement3234); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP138);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:994:15: ( KW_DATABASE | KW_SCHEMA )
			int alt31=2;
			int LA31_0 = input.LA(1);
			if ( (LA31_0==KW_DATABASE) ) {
				alt31=1;
			}
			else if ( (LA31_0==KW_SCHEMA) ) {
				alt31=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 31, 0, input);
				throw nvae;
			}

			switch (alt31) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:994:16: KW_DATABASE
					{
					KW_DATABASE139=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_dropDatabaseStatement3237); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE139);

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:994:28: KW_SCHEMA
					{
					KW_SCHEMA140=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_dropDatabaseStatement3239); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA140);

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:994:39: ( ifExists )?
			int alt32=2;
			int LA32_0 = input.LA(1);
			if ( (LA32_0==KW_IF) ) {
				alt32=1;
			}
			switch (alt32) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:994:39: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropDatabaseStatement3242);
					ifExists141=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists141.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_dropDatabaseStatement3245);
			identifier142=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier142.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:994:60: ( restrictOrCascade )?
			int alt33=2;
			int LA33_0 = input.LA(1);
			if ( (LA33_0==KW_CASCADE||LA33_0==KW_RESTRICT) ) {
				alt33=1;
			}
			switch (alt33) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:994:60: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_dropDatabaseStatement3247);
					restrictOrCascade143=restrictOrCascade();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade143.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: identifier, restrictOrCascade, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 995:5: -> ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:995:8: ^( TOK_DROPDATABASE identifier ( ifExists )? ( restrictOrCascade )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DROPDATABASE, "TOK_DROPDATABASE"), root_1);
				adaptor.addChild(root_1, stream_identifier.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:995:38: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:995:48: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropDatabaseStatement"


	public static class databaseComment_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "databaseComment"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:998:1: databaseComment : KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) ;
	public final HiveASTParser.databaseComment_return databaseComment() throws RecognitionException {
		HiveASTParser.databaseComment_return retval = new HiveASTParser.databaseComment_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token comment=null;
		Token KW_COMMENT144=null;

		HiveParserASTNode comment_tree=null;
		HiveParserASTNode KW_COMMENT144_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 pushMsg("database's comment", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1001:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1001:7: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT144=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_databaseComment3293); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT144);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_databaseComment3297); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1002:5: -> ^( TOK_DATABASECOMMENT $comment)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1002:8: ^( TOK_DATABASECOMMENT $comment)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DATABASECOMMENT, "TOK_DATABASECOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "databaseComment"


	public static class createTableStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "createTableStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1005:1: createTableStatement : KW_CREATE (temp= KW_TEMPORARY )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrConstraintList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? ) -> ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrConstraintList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? ) ;
	public final HiveASTParser.createTableStatement_return createTableStatement() throws RecognitionException {
		HiveASTParser.createTableStatement_return retval = new HiveASTParser.createTableStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token temp=null;
		Token ext=null;
		Token like=null;
		Token KW_CREATE145=null;
		Token KW_TABLE146=null;
		Token LPAREN152=null;
		Token RPAREN154=null;
		Token KW_AS163=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope likeName =null;
		ParserRuleReturnScope ifNotExists147 =null;
		ParserRuleReturnScope tableRowFormat148 =null;
		ParserRuleReturnScope tableFileFormat149 =null;
		ParserRuleReturnScope tableLocation150 =null;
		ParserRuleReturnScope tablePropertiesPrefixed151 =null;
		ParserRuleReturnScope columnNameTypeOrConstraintList153 =null;
		ParserRuleReturnScope tableComment155 =null;
		ParserRuleReturnScope tablePartition156 =null;
		ParserRuleReturnScope tableBuckets157 =null;
		ParserRuleReturnScope tableSkewed158 =null;
		ParserRuleReturnScope tableRowFormat159 =null;
		ParserRuleReturnScope tableFileFormat160 =null;
		ParserRuleReturnScope tableLocation161 =null;
		ParserRuleReturnScope tablePropertiesPrefixed162 =null;
		ParserRuleReturnScope selectStatementWithCTE164 =null;

		HiveParserASTNode temp_tree=null;
		HiveParserASTNode ext_tree=null;
		HiveParserASTNode like_tree=null;
		HiveParserASTNode KW_CREATE145_tree=null;
		HiveParserASTNode KW_TABLE146_tree=null;
		HiveParserASTNode LPAREN152_tree=null;
		HiveParserASTNode RPAREN154_tree=null;
		HiveParserASTNode KW_AS163_tree=null;
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_columnNameTypeOrConstraintList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeOrConstraintList");
		RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_tablePartition=new RewriteRuleSubtreeStream(adaptor,"rule tablePartition");
		RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("create table statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1008:5: ( KW_CREATE (temp= KW_TEMPORARY )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrConstraintList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? ) -> ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrConstraintList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1008:7: KW_CREATE (temp= KW_TEMPORARY )? (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrConstraintList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? )
			{
			KW_CREATE145=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createTableStatement3337); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE145);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1008:17: (temp= KW_TEMPORARY )?
			int alt34=2;
			int LA34_0 = input.LA(1);
			if ( (LA34_0==KW_TEMPORARY) ) {
				alt34=1;
			}
			switch (alt34) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1008:18: temp= KW_TEMPORARY
					{
					temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createTableStatement3342); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1008:38: (ext= KW_EXTERNAL )?
			int alt35=2;
			int LA35_0 = input.LA(1);
			if ( (LA35_0==KW_EXTERNAL) ) {
				alt35=1;
			}
			switch (alt35) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1008:39: ext= KW_EXTERNAL
					{
					ext=(Token)match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_createTableStatement3349); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXTERNAL.add(ext);

					}
					break;

			}

			KW_TABLE146=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createTableStatement3353); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE146);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1008:66: ( ifNotExists )?
			int alt36=2;
			int LA36_0 = input.LA(1);
			if ( (LA36_0==KW_IF) ) {
				alt36=1;
			}
			switch (alt36) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1008:66: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createTableStatement3355);
					ifNotExists147=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists147.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createTableStatement3360);
			name=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(name.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1009:7: (like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? | ( LPAREN columnNameTypeOrConstraintList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )? )
			int alt51=2;
			int LA51_0 = input.LA(1);
			if ( (LA51_0==KW_LIKE) ) {
				alt51=1;
			}
			else if ( (LA51_0==EOF||LA51_0==KW_AS||LA51_0==KW_CLUSTERED||LA51_0==KW_COMMENT||LA51_0==KW_LOCATION||LA51_0==KW_PARTITIONED||LA51_0==KW_ROW||LA51_0==KW_SKEWED||LA51_0==KW_STORED||LA51_0==KW_TBLPROPERTIES||LA51_0==LPAREN) ) {
				alt51=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 51, 0, input);
				throw nvae;
			}

			switch (alt51) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1009:10: like= KW_LIKE likeName= tableName ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )?
					{
					like=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_createTableStatement3373); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIKE.add(like);

					pushFollow(FOLLOW_tableName_in_createTableStatement3377);
					likeName=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(likeName.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1010:10: ( tableRowFormat )?
					int alt37=2;
					int LA37_0 = input.LA(1);
					if ( (LA37_0==KW_ROW) ) {
						alt37=1;
					}
					switch (alt37) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1010:10: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_createTableStatement3388);
							tableRowFormat148=tableRowFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat148.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1011:10: ( tableFileFormat )?
					int alt38=2;
					int LA38_0 = input.LA(1);
					if ( (LA38_0==KW_STORED) ) {
						alt38=1;
					}
					switch (alt38) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1011:10: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_createTableStatement3400);
							tableFileFormat149=tableFileFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat149.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1012:10: ( tableLocation )?
					int alt39=2;
					int LA39_0 = input.LA(1);
					if ( (LA39_0==KW_LOCATION) ) {
						alt39=1;
					}
					switch (alt39) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1012:10: tableLocation
							{
							pushFollow(FOLLOW_tableLocation_in_createTableStatement3412);
							tableLocation150=tableLocation();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation150.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1013:10: ( tablePropertiesPrefixed )?
					int alt40=2;
					int LA40_0 = input.LA(1);
					if ( (LA40_0==KW_TBLPROPERTIES) ) {
						alt40=1;
					}
					switch (alt40) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1013:10: tablePropertiesPrefixed
							{
							pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement3424);
							tablePropertiesPrefixed151=tablePropertiesPrefixed();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed151.getTree());
							}
							break;

					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1014:10: ( LPAREN columnNameTypeOrConstraintList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatementWithCTE )?
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1014:10: ( LPAREN columnNameTypeOrConstraintList RPAREN )?
					int alt41=2;
					int LA41_0 = input.LA(1);
					if ( (LA41_0==LPAREN) ) {
						alt41=1;
					}
					switch (alt41) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1014:11: LPAREN columnNameTypeOrConstraintList RPAREN
							{
							LPAREN152=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createTableStatement3437); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN152);

							pushFollow(FOLLOW_columnNameTypeOrConstraintList_in_createTableStatement3439);
							columnNameTypeOrConstraintList153=columnNameTypeOrConstraintList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnNameTypeOrConstraintList.add(columnNameTypeOrConstraintList153.getTree());
							RPAREN154=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createTableStatement3441); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN154);

							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1015:10: ( tableComment )?
					int alt42=2;
					int LA42_0 = input.LA(1);
					if ( (LA42_0==KW_COMMENT) ) {
						alt42=1;
					}
					switch (alt42) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1015:10: tableComment
							{
							pushFollow(FOLLOW_tableComment_in_createTableStatement3454);
							tableComment155=tableComment();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableComment.add(tableComment155.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1016:10: ( tablePartition )?
					int alt43=2;
					int LA43_0 = input.LA(1);
					if ( (LA43_0==KW_PARTITIONED) ) {
						alt43=1;
					}
					switch (alt43) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1016:10: tablePartition
							{
							pushFollow(FOLLOW_tablePartition_in_createTableStatement3466);
							tablePartition156=tablePartition();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tablePartition.add(tablePartition156.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1017:10: ( tableBuckets )?
					int alt44=2;
					int LA44_0 = input.LA(1);
					if ( (LA44_0==KW_CLUSTERED) ) {
						alt44=1;
					}
					switch (alt44) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1017:10: tableBuckets
							{
							pushFollow(FOLLOW_tableBuckets_in_createTableStatement3478);
							tableBuckets157=tableBuckets();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableBuckets.add(tableBuckets157.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1018:10: ( tableSkewed )?
					int alt45=2;
					int LA45_0 = input.LA(1);
					if ( (LA45_0==KW_SKEWED) ) {
						alt45=1;
					}
					switch (alt45) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1018:10: tableSkewed
							{
							pushFollow(FOLLOW_tableSkewed_in_createTableStatement3490);
							tableSkewed158=tableSkewed();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableSkewed.add(tableSkewed158.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1019:10: ( tableRowFormat )?
					int alt46=2;
					int LA46_0 = input.LA(1);
					if ( (LA46_0==KW_ROW) ) {
						alt46=1;
					}
					switch (alt46) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1019:10: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_createTableStatement3502);
							tableRowFormat159=tableRowFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat159.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1020:10: ( tableFileFormat )?
					int alt47=2;
					int LA47_0 = input.LA(1);
					if ( (LA47_0==KW_STORED) ) {
						alt47=1;
					}
					switch (alt47) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1020:10: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_createTableStatement3514);
							tableFileFormat160=tableFileFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat160.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1021:10: ( tableLocation )?
					int alt48=2;
					int LA48_0 = input.LA(1);
					if ( (LA48_0==KW_LOCATION) ) {
						alt48=1;
					}
					switch (alt48) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1021:10: tableLocation
							{
							pushFollow(FOLLOW_tableLocation_in_createTableStatement3526);
							tableLocation161=tableLocation();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation161.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1022:10: ( tablePropertiesPrefixed )?
					int alt49=2;
					int LA49_0 = input.LA(1);
					if ( (LA49_0==KW_TBLPROPERTIES) ) {
						alt49=1;
					}
					switch (alt49) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1022:10: tablePropertiesPrefixed
							{
							pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement3538);
							tablePropertiesPrefixed162=tablePropertiesPrefixed();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed162.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1023:10: ( KW_AS selectStatementWithCTE )?
					int alt50=2;
					int LA50_0 = input.LA(1);
					if ( (LA50_0==KW_AS) ) {
						alt50=1;
					}
					switch (alt50) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1023:11: KW_AS selectStatementWithCTE
							{
							KW_AS163=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createTableStatement3551); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS163);

							pushFollow(FOLLOW_selectStatementWithCTE_in_createTableStatement3553);
							selectStatementWithCTE164=selectStatementWithCTE();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE164.getTree());
							}
							break;

					}

					}
					break;

			}

			// AST REWRITE
			// elements: tableFileFormat, tableSkewed, tableBuckets, tableRowFormat, tablePropertiesPrefixed, tablePartition, ext, likeName, columnNameTypeOrConstraintList, selectStatementWithCTE, ifNotExists, temp, tableLocation, tableComment, name
			// token labels: ext, temp
			// rule labels: likeName, name, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
			RewriteRuleTokenStream stream_temp=new RewriteRuleTokenStream(adaptor,"token temp",temp);
			RewriteRuleSubtreeStream stream_likeName=new RewriteRuleSubtreeStream(adaptor,"rule likeName",likeName!=null?likeName.getTree():null);
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1025:5: -> ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrConstraintList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1025:8: ^( TOK_CREATETABLE $name ( $temp)? ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeOrConstraintList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatementWithCTE )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CREATETABLE, "TOK_CREATETABLE"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1025:33: ( $temp)?
				if ( stream_temp.hasNext() ) {
					adaptor.addChild(root_1, stream_temp.nextNode());
				}
				stream_temp.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1025:40: ( $ext)?
				if ( stream_ext.hasNext() ) {
					adaptor.addChild(root_1, stream_ext.nextNode());
				}
				stream_ext.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1025:45: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1026:10: ^( TOK_LIKETABLE ( $likeName)? )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_LIKETABLE, "TOK_LIKETABLE"), root_2);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1026:27: ( $likeName)?
				if ( stream_likeName.hasNext() ) {
					adaptor.addChild(root_2, stream_likeName.nextTree());
				}
				stream_likeName.reset();

				adaptor.addChild(root_1, root_2);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1027:10: ( columnNameTypeOrConstraintList )?
				if ( stream_columnNameTypeOrConstraintList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeOrConstraintList.nextTree());
				}
				stream_columnNameTypeOrConstraintList.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1028:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1029:10: ( tablePartition )?
				if ( stream_tablePartition.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePartition.nextTree());
				}
				stream_tablePartition.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1030:10: ( tableBuckets )?
				if ( stream_tableBuckets.hasNext() ) {
					adaptor.addChild(root_1, stream_tableBuckets.nextTree());
				}
				stream_tableBuckets.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1031:10: ( tableSkewed )?
				if ( stream_tableSkewed.hasNext() ) {
					adaptor.addChild(root_1, stream_tableSkewed.nextTree());
				}
				stream_tableSkewed.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1032:10: ( tableRowFormat )?
				if ( stream_tableRowFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
				}
				stream_tableRowFormat.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1033:10: ( tableFileFormat )?
				if ( stream_tableFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
				}
				stream_tableFileFormat.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1034:10: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1035:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1036:10: ( selectStatementWithCTE )?
				if ( stream_selectStatementWithCTE.hasNext() ) {
					adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());
				}
				stream_selectStatementWithCTE.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createTableStatement"


	public static class truncateTableStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "truncateTableStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1040:1: truncateTableStatement : KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ) ;
	public final HiveASTParser.truncateTableStatement_return truncateTableStatement() throws RecognitionException {
		HiveASTParser.truncateTableStatement_return retval = new HiveASTParser.truncateTableStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_TRUNCATE165=null;
		Token KW_TABLE166=null;
		Token KW_COLUMNS168=null;
		Token LPAREN169=null;
		Token RPAREN171=null;
		ParserRuleReturnScope tablePartitionPrefix167 =null;
		ParserRuleReturnScope columnNameList170 =null;

		HiveParserASTNode KW_TRUNCATE165_tree=null;
		HiveParserASTNode KW_TABLE166_tree=null;
		HiveParserASTNode KW_COLUMNS168_tree=null;
		HiveParserASTNode LPAREN169_tree=null;
		HiveParserASTNode RPAREN171_tree=null;
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_TRUNCATE=new RewriteRuleTokenStream(adaptor,"token KW_TRUNCATE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("truncate table statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1043:5: ( KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )? -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1043:7: KW_TRUNCATE KW_TABLE tablePartitionPrefix ( KW_COLUMNS LPAREN columnNameList RPAREN )?
			{
			KW_TRUNCATE165=(Token)match(input,KW_TRUNCATE,FOLLOW_KW_TRUNCATE_in_truncateTableStatement3760); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TRUNCATE.add(KW_TRUNCATE165);

			KW_TABLE166=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_truncateTableStatement3762); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE166);

			pushFollow(FOLLOW_tablePartitionPrefix_in_truncateTableStatement3764);
			tablePartitionPrefix167=tablePartitionPrefix();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tablePartitionPrefix.add(tablePartitionPrefix167.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1043:49: ( KW_COLUMNS LPAREN columnNameList RPAREN )?
			int alt52=2;
			int LA52_0 = input.LA(1);
			if ( (LA52_0==KW_COLUMNS) ) {
				alt52=1;
			}
			switch (alt52) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1043:50: KW_COLUMNS LPAREN columnNameList RPAREN
					{
					KW_COLUMNS168=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_truncateTableStatement3767); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS168);

					LPAREN169=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_truncateTableStatement3769); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN169);

					pushFollow(FOLLOW_columnNameList_in_truncateTableStatement3771);
					columnNameList170=columnNameList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameList.add(columnNameList170.getTree());
					RPAREN171=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_truncateTableStatement3773); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN171);

					}
					break;

			}

			// AST REWRITE
			// elements: columnNameList, tablePartitionPrefix
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1043:92: -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1043:95: ^( TOK_TRUNCATETABLE tablePartitionPrefix ( columnNameList )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TRUNCATETABLE, "TOK_TRUNCATETABLE"), root_1);
				adaptor.addChild(root_1, stream_tablePartitionPrefix.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1043:136: ( columnNameList )?
				if ( stream_columnNameList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameList.nextTree());
				}
				stream_columnNameList.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "truncateTableStatement"


	public static class createIndexStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "createIndexStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1045:1: createIndexStatement : KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) ;
	public final HiveASTParser.createIndexStatement_return createIndexStatement() throws RecognitionException {
		HiveASTParser.createIndexStatement_return retval = new HiveASTParser.createIndexStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token typeName=null;
		Token KW_CREATE172=null;
		Token KW_INDEX173=null;
		Token KW_ON174=null;
		Token KW_TABLE175=null;
		Token LPAREN176=null;
		Token RPAREN177=null;
		Token KW_AS178=null;
		ParserRuleReturnScope indexName =null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope indexedCols =null;
		ParserRuleReturnScope autoRebuild179 =null;
		ParserRuleReturnScope indexPropertiesPrefixed180 =null;
		ParserRuleReturnScope indexTblName181 =null;
		ParserRuleReturnScope tableRowFormat182 =null;
		ParserRuleReturnScope tableFileFormat183 =null;
		ParserRuleReturnScope tableLocation184 =null;
		ParserRuleReturnScope tablePropertiesPrefixed185 =null;
		ParserRuleReturnScope indexComment186 =null;

		HiveParserASTNode typeName_tree=null;
		HiveParserASTNode KW_CREATE172_tree=null;
		HiveParserASTNode KW_INDEX173_tree=null;
		HiveParserASTNode KW_ON174_tree=null;
		HiveParserASTNode KW_TABLE175_tree=null;
		HiveParserASTNode LPAREN176_tree=null;
		HiveParserASTNode RPAREN177_tree=null;
		HiveParserASTNode KW_AS178_tree=null;
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_indexComment=new RewriteRuleSubtreeStream(adaptor,"rule indexComment");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_indexTblName=new RewriteRuleSubtreeStream(adaptor,"rule indexTblName");
		RewriteRuleSubtreeStream stream_autoRebuild=new RewriteRuleSubtreeStream(adaptor,"rule autoRebuild");
		RewriteRuleSubtreeStream stream_indexPropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesPrefixed");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("create index statement", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1048:5: ( KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1048:7: KW_CREATE KW_INDEX indexName= identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )?
			{
			KW_CREATE172=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createIndexStatement3808); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE172);

			KW_INDEX173=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_createIndexStatement3810); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX173);

			pushFollow(FOLLOW_identifier_in_createIndexStatement3814);
			indexName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(indexName.getTree());
			KW_ON174=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_createIndexStatement3822); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON174);

			KW_TABLE175=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createIndexStatement3824); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE175);

			pushFollow(FOLLOW_tableName_in_createIndexStatement3828);
			tab=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tab.getTree());
			LPAREN176=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexStatement3830); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN176);

			pushFollow(FOLLOW_columnNameList_in_createIndexStatement3834);
			indexedCols=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameList.add(indexedCols.getTree());
			RPAREN177=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexStatement3836); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN177);

			KW_AS178=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createIndexStatement3844); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS178);

			typeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createIndexStatement3848); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(typeName);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1051:7: ( autoRebuild )?
			int alt53=2;
			int LA53_0 = input.LA(1);
			if ( (LA53_0==KW_WITH) ) {
				alt53=1;
			}
			switch (alt53) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1051:7: autoRebuild
					{
					pushFollow(FOLLOW_autoRebuild_in_createIndexStatement3856);
					autoRebuild179=autoRebuild();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_autoRebuild.add(autoRebuild179.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1052:7: ( indexPropertiesPrefixed )?
			int alt54=2;
			int LA54_0 = input.LA(1);
			if ( (LA54_0==KW_IDXPROPERTIES) ) {
				alt54=1;
			}
			switch (alt54) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1052:7: indexPropertiesPrefixed
					{
					pushFollow(FOLLOW_indexPropertiesPrefixed_in_createIndexStatement3865);
					indexPropertiesPrefixed180=indexPropertiesPrefixed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_indexPropertiesPrefixed.add(indexPropertiesPrefixed180.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1053:7: ( indexTblName )?
			int alt55=2;
			int LA55_0 = input.LA(1);
			if ( (LA55_0==KW_IN) ) {
				alt55=1;
			}
			switch (alt55) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1053:7: indexTblName
					{
					pushFollow(FOLLOW_indexTblName_in_createIndexStatement3874);
					indexTblName181=indexTblName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_indexTblName.add(indexTblName181.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1054:7: ( tableRowFormat )?
			int alt56=2;
			int LA56_0 = input.LA(1);
			if ( (LA56_0==KW_ROW) ) {
				alt56=1;
			}
			switch (alt56) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1054:7: tableRowFormat
					{
					pushFollow(FOLLOW_tableRowFormat_in_createIndexStatement3883);
					tableRowFormat182=tableRowFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat182.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1055:7: ( tableFileFormat )?
			int alt57=2;
			int LA57_0 = input.LA(1);
			if ( (LA57_0==KW_STORED) ) {
				alt57=1;
			}
			switch (alt57) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1055:7: tableFileFormat
					{
					pushFollow(FOLLOW_tableFileFormat_in_createIndexStatement3892);
					tableFileFormat183=tableFileFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat183.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1056:7: ( tableLocation )?
			int alt58=2;
			int LA58_0 = input.LA(1);
			if ( (LA58_0==KW_LOCATION) ) {
				alt58=1;
			}
			switch (alt58) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1056:7: tableLocation
					{
					pushFollow(FOLLOW_tableLocation_in_createIndexStatement3901);
					tableLocation184=tableLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation184.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1057:7: ( tablePropertiesPrefixed )?
			int alt59=2;
			int LA59_0 = input.LA(1);
			if ( (LA59_0==KW_TBLPROPERTIES) ) {
				alt59=1;
			}
			switch (alt59) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1057:7: tablePropertiesPrefixed
					{
					pushFollow(FOLLOW_tablePropertiesPrefixed_in_createIndexStatement3910);
					tablePropertiesPrefixed185=tablePropertiesPrefixed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed185.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1058:7: ( indexComment )?
			int alt60=2;
			int LA60_0 = input.LA(1);
			if ( (LA60_0==KW_COMMENT) ) {
				alt60=1;
			}
			switch (alt60) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1058:7: indexComment
					{
					pushFollow(FOLLOW_indexComment_in_createIndexStatement3919);
					indexComment186=indexComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_indexComment.add(indexComment186.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: indexTblName, indexPropertiesPrefixed, tableFileFormat, tableLocation, autoRebuild, tab, indexName, tableRowFormat, indexedCols, indexComment, typeName, tablePropertiesPrefixed
			// token labels: typeName
			// rule labels: indexedCols, tab, indexName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_typeName=new RewriteRuleTokenStream(adaptor,"token typeName",typeName);
			RewriteRuleSubtreeStream stream_indexedCols=new RewriteRuleSubtreeStream(adaptor,"rule indexedCols",indexedCols!=null?indexedCols.getTree():null);
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1059:5: -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1059:7: ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CREATEINDEX, "TOK_CREATEINDEX"), root_1);
				adaptor.addChild(root_1, stream_indexName.nextTree());
				adaptor.addChild(root_1, stream_typeName.nextNode());
				adaptor.addChild(root_1, stream_tab.nextTree());
				adaptor.addChild(root_1, stream_indexedCols.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1060:9: ( autoRebuild )?
				if ( stream_autoRebuild.hasNext() ) {
					adaptor.addChild(root_1, stream_autoRebuild.nextTree());
				}
				stream_autoRebuild.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1061:9: ( indexPropertiesPrefixed )?
				if ( stream_indexPropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_indexPropertiesPrefixed.nextTree());
				}
				stream_indexPropertiesPrefixed.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1062:9: ( indexTblName )?
				if ( stream_indexTblName.hasNext() ) {
					adaptor.addChild(root_1, stream_indexTblName.nextTree());
				}
				stream_indexTblName.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1063:9: ( tableRowFormat )?
				if ( stream_tableRowFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
				}
				stream_tableRowFormat.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1064:9: ( tableFileFormat )?
				if ( stream_tableFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
				}
				stream_tableFileFormat.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1065:9: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1066:9: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1067:9: ( indexComment )?
				if ( stream_indexComment.hasNext() ) {
					adaptor.addChild(root_1, stream_indexComment.nextTree());
				}
				stream_indexComment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createIndexStatement"


	public static class indexComment_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "indexComment"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1070:1: indexComment : KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) ;
	public final HiveASTParser.indexComment_return indexComment() throws RecognitionException {
		HiveASTParser.indexComment_return retval = new HiveASTParser.indexComment_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token comment=null;
		Token KW_COMMENT187=null;

		HiveParserASTNode comment_tree=null;
		HiveParserASTNode KW_COMMENT187_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 pushMsg("comment on an index", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1073:9: ( KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1074:17: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT187=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_indexComment4076); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT187);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_indexComment4080); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1074:51: -> ^( TOK_INDEXCOMMENT $comment)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1074:54: ^( TOK_INDEXCOMMENT $comment)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INDEXCOMMENT, "TOK_INDEXCOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexComment"


	public static class autoRebuild_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "autoRebuild"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1077:1: autoRebuild : KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) ;
	public final HiveASTParser.autoRebuild_return autoRebuild() throws RecognitionException {
		HiveASTParser.autoRebuild_return retval = new HiveASTParser.autoRebuild_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_WITH188=null;
		Token KW_DEFERRED189=null;
		Token KW_REBUILD190=null;

		HiveParserASTNode KW_WITH188_tree=null;
		HiveParserASTNode KW_DEFERRED189_tree=null;
		HiveParserASTNode KW_REBUILD190_tree=null;
		RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_DEFERRED=new RewriteRuleTokenStream(adaptor,"token KW_DEFERRED");

		 pushMsg("auto rebuild index", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1080:5: ( KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1080:7: KW_WITH KW_DEFERRED KW_REBUILD
			{
			KW_WITH188=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_autoRebuild4121); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH188);

			KW_DEFERRED189=(Token)match(input,KW_DEFERRED,FOLLOW_KW_DEFERRED_in_autoRebuild4123); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DEFERRED.add(KW_DEFERRED189);

			KW_REBUILD190=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_autoRebuild4125); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REBUILD.add(KW_REBUILD190);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1081:5: -> ^( TOK_DEFERRED_REBUILDINDEX )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1081:7: ^( TOK_DEFERRED_REBUILDINDEX )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DEFERRED_REBUILDINDEX, "TOK_DEFERRED_REBUILDINDEX"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "autoRebuild"


	public static class indexTblName_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "indexTblName"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1084:1: indexTblName : KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) ;
	public final HiveASTParser.indexTblName_return indexTblName() throws RecognitionException {
		HiveASTParser.indexTblName_return retval = new HiveASTParser.indexTblName_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_IN191=null;
		Token KW_TABLE192=null;
		ParserRuleReturnScope indexTbl =null;

		HiveParserASTNode KW_IN191_tree=null;
		HiveParserASTNode KW_TABLE192_tree=null;
		RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("index table name", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1087:5: ( KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1087:7: KW_IN KW_TABLE indexTbl= tableName
			{
			KW_IN191=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_indexTblName4161); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN191);

			KW_TABLE192=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_indexTblName4163); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE192);

			pushFollow(FOLLOW_tableName_in_indexTblName4167);
			indexTbl=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(indexTbl.getTree());
			// AST REWRITE
			// elements: indexTbl
			// token labels: 
			// rule labels: indexTbl, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_indexTbl=new RewriteRuleSubtreeStream(adaptor,"rule indexTbl",indexTbl!=null?indexTbl.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1088:5: -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1088:7: ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CREATEINDEX_INDEXTBLNAME, "TOK_CREATEINDEX_INDEXTBLNAME"), root_1);
				adaptor.addChild(root_1, stream_indexTbl.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexTblName"


	public static class indexPropertiesPrefixed_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "indexPropertiesPrefixed"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1091:1: indexPropertiesPrefixed : KW_IDXPROPERTIES ! indexProperties ;
	public final HiveASTParser.indexPropertiesPrefixed_return indexPropertiesPrefixed() throws RecognitionException {
		HiveASTParser.indexPropertiesPrefixed_return retval = new HiveASTParser.indexPropertiesPrefixed_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_IDXPROPERTIES193=null;
		ParserRuleReturnScope indexProperties194 =null;

		HiveParserASTNode KW_IDXPROPERTIES193_tree=null;

		 pushMsg("table properties with prefix", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1094:5: ( KW_IDXPROPERTIES ! indexProperties )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1095:9: KW_IDXPROPERTIES ! indexProperties
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			KW_IDXPROPERTIES193=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed4214); if (state.failed) return retval;
			pushFollow(FOLLOW_indexProperties_in_indexPropertiesPrefixed4217);
			indexProperties194=indexProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, indexProperties194.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexPropertiesPrefixed"


	public static class indexProperties_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "indexProperties"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1098:1: indexProperties : LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) ;
	public final HiveASTParser.indexProperties_return indexProperties() throws RecognitionException {
		HiveASTParser.indexProperties_return retval = new HiveASTParser.indexProperties_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token LPAREN195=null;
		Token RPAREN197=null;
		ParserRuleReturnScope indexPropertiesList196 =null;

		HiveParserASTNode LPAREN195_tree=null;
		HiveParserASTNode RPAREN197_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_indexPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesList");

		 pushMsg("index properties", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1101:5: ( LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1102:7: LPAREN indexPropertiesList RPAREN
			{
			LPAREN195=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_indexProperties4250); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN195);

			pushFollow(FOLLOW_indexPropertiesList_in_indexProperties4252);
			indexPropertiesList196=indexPropertiesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_indexPropertiesList.add(indexPropertiesList196.getTree());
			RPAREN197=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_indexProperties4254); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN197);

			// AST REWRITE
			// elements: indexPropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1102:41: -> ^( TOK_INDEXPROPERTIES indexPropertiesList )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1102:44: ^( TOK_INDEXPROPERTIES indexPropertiesList )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INDEXPROPERTIES, "TOK_INDEXPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_indexPropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexProperties"


	public static class indexPropertiesList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "indexPropertiesList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1105:1: indexPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) ;
	public final HiveASTParser.indexPropertiesList_return indexPropertiesList() throws RecognitionException {
		HiveASTParser.indexPropertiesList_return retval = new HiveASTParser.indexPropertiesList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA199=null;
		ParserRuleReturnScope keyValueProperty198 =null;
		ParserRuleReturnScope keyValueProperty200 =null;

		HiveParserASTNode COMMA199_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");

		 pushMsg("index properties list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1108:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1109:7: keyValueProperty ( COMMA keyValueProperty )*
			{
			pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList4295);
			keyValueProperty198=keyValueProperty();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty198.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1109:24: ( COMMA keyValueProperty )*
			loop61:
			while (true) {
				int alt61=2;
				int LA61_0 = input.LA(1);
				if ( (LA61_0==COMMA) ) {
					alt61=1;
				}

				switch (alt61) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1109:25: COMMA keyValueProperty
					{
					COMMA199=(Token)match(input,COMMA,FOLLOW_COMMA_in_indexPropertiesList4298); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA199);

					pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList4300);
					keyValueProperty200=keyValueProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty200.getTree());
					}
					break;

				default :
					break loop61;
				}
			}

			// AST REWRITE
			// elements: keyValueProperty
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1109:50: -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1109:53: ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INDEXPROPLIST, "TOK_INDEXPROPLIST"), root_1);
				if ( !(stream_keyValueProperty.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_keyValueProperty.hasNext() ) {
					adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
				}
				stream_keyValueProperty.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "indexPropertiesList"


	public static class dropIndexStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropIndexStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1112:1: dropIndexStatement : KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) ;
	public final HiveASTParser.dropIndexStatement_return dropIndexStatement() throws RecognitionException {
		HiveASTParser.dropIndexStatement_return retval = new HiveASTParser.dropIndexStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_DROP201=null;
		Token KW_INDEX202=null;
		Token KW_ON204=null;
		ParserRuleReturnScope indexName =null;
		ParserRuleReturnScope tab =null;
		ParserRuleReturnScope ifExists203 =null;

		HiveParserASTNode KW_DROP201_tree=null;
		HiveParserASTNode KW_INDEX202_tree=null;
		HiveParserASTNode KW_ON204_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("drop index statement", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1115:5: ( KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1115:7: KW_DROP KW_INDEX ( ifExists )? indexName= identifier KW_ON tab= tableName
			{
			KW_DROP201=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropIndexStatement4338); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP201);

			KW_INDEX202=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_dropIndexStatement4340); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX202);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1115:24: ( ifExists )?
			int alt62=2;
			int LA62_0 = input.LA(1);
			if ( (LA62_0==KW_IF) ) {
				alt62=1;
			}
			switch (alt62) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1115:24: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropIndexStatement4342);
					ifExists203=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists203.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_dropIndexStatement4347);
			indexName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(indexName.getTree());
			KW_ON204=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_dropIndexStatement4349); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON204);

			pushFollow(FOLLOW_tableName_in_dropIndexStatement4353);
			tab=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tab.getTree());
			// AST REWRITE
			// elements: ifExists, tab, indexName
			// token labels: 
			// rule labels: tab, indexName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"rule tab",tab!=null?tab.getTree():null);
			RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1116:5: -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1116:7: ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DROPINDEX, "TOK_DROPINDEX"), root_1);
				adaptor.addChild(root_1, stream_indexName.nextTree());
				adaptor.addChild(root_1, stream_tab.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1116:39: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropIndexStatement"


	public static class dropTableStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropTableStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1119:1: dropTableStatement : KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )? -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) ;
	public final HiveASTParser.dropTableStatement_return dropTableStatement() throws RecognitionException {
		HiveASTParser.dropTableStatement_return retval = new HiveASTParser.dropTableStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_DROP205=null;
		Token KW_TABLE206=null;
		Token KW_PURGE209=null;
		ParserRuleReturnScope ifExists207 =null;
		ParserRuleReturnScope tableName208 =null;
		ParserRuleReturnScope replicationClause210 =null;

		HiveParserASTNode KW_DROP205_tree=null;
		HiveParserASTNode KW_TABLE206_tree=null;
		HiveParserASTNode KW_PURGE209_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_PURGE=new RewriteRuleTokenStream(adaptor,"token KW_PURGE");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("drop statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1122:5: ( KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )? -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1122:7: KW_DROP KW_TABLE ( ifExists )? tableName ( KW_PURGE )? ( replicationClause )?
			{
			KW_DROP205=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropTableStatement4398); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP205);

			KW_TABLE206=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_dropTableStatement4400); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE206);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1122:24: ( ifExists )?
			int alt63=2;
			int LA63_0 = input.LA(1);
			if ( (LA63_0==KW_IF) ) {
				alt63=1;
			}
			switch (alt63) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1122:24: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropTableStatement4402);
					ifExists207=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists207.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_dropTableStatement4405);
			tableName208=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName208.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1122:44: ( KW_PURGE )?
			int alt64=2;
			int LA64_0 = input.LA(1);
			if ( (LA64_0==KW_PURGE) ) {
				alt64=1;
			}
			switch (alt64) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1122:44: KW_PURGE
					{
					KW_PURGE209=(Token)match(input,KW_PURGE,FOLLOW_KW_PURGE_in_dropTableStatement4407); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_PURGE.add(KW_PURGE209);

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1122:54: ( replicationClause )?
			int alt65=2;
			int LA65_0 = input.LA(1);
			if ( (LA65_0==KW_FOR) ) {
				alt65=1;
			}
			switch (alt65) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1122:54: replicationClause
					{
					pushFollow(FOLLOW_replicationClause_in_dropTableStatement4410);
					replicationClause210=replicationClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause210.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: ifExists, tableName, KW_PURGE, replicationClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1123:5: -> ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1123:8: ^( TOK_DROPTABLE tableName ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DROPTABLE, "TOK_DROPTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1123:34: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1123:44: ( KW_PURGE )?
				if ( stream_KW_PURGE.hasNext() ) {
					adaptor.addChild(root_1, stream_KW_PURGE.nextNode());
				}
				stream_KW_PURGE.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1123:54: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropTableStatement"


	public static class alterStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1126:1: alterStatement : ( KW_ALTER KW_TABLE tableName alterTableStatementSuffix -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix ) | KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix ) | KW_ALTER KW_INDEX alterIndexStatementSuffix -> alterIndexStatementSuffix | KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix -> alterDatabaseStatementSuffix );
	public final HiveASTParser.alterStatement_return alterStatement() throws RecognitionException {
		HiveASTParser.alterStatement_return retval = new HiveASTParser.alterStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ALTER211=null;
		Token KW_TABLE212=null;
		Token KW_ALTER215=null;
		Token KW_VIEW216=null;
		Token KW_AS218=null;
		Token KW_ALTER220=null;
		Token KW_INDEX221=null;
		Token KW_ALTER223=null;
		Token KW_DATABASE224=null;
		Token KW_SCHEMA225=null;
		ParserRuleReturnScope tableName213 =null;
		ParserRuleReturnScope alterTableStatementSuffix214 =null;
		ParserRuleReturnScope tableName217 =null;
		ParserRuleReturnScope alterViewStatementSuffix219 =null;
		ParserRuleReturnScope alterIndexStatementSuffix222 =null;
		ParserRuleReturnScope alterDatabaseStatementSuffix226 =null;

		HiveParserASTNode KW_ALTER211_tree=null;
		HiveParserASTNode KW_TABLE212_tree=null;
		HiveParserASTNode KW_ALTER215_tree=null;
		HiveParserASTNode KW_VIEW216_tree=null;
		HiveParserASTNode KW_AS218_tree=null;
		HiveParserASTNode KW_ALTER220_tree=null;
		HiveParserASTNode KW_INDEX221_tree=null;
		HiveParserASTNode KW_ALTER223_tree=null;
		HiveParserASTNode KW_DATABASE224_tree=null;
		HiveParserASTNode KW_SCHEMA225_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_alterTableStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTableStatementSuffix");
		RewriteRuleSubtreeStream stream_alterViewStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterViewStatementSuffix");
		RewriteRuleSubtreeStream stream_alterDatabaseStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterDatabaseStatementSuffix");
		RewriteRuleSubtreeStream stream_alterIndexStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterIndexStatementSuffix");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("alter statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1129:5: ( KW_ALTER KW_TABLE tableName alterTableStatementSuffix -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix ) | KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix ) | KW_ALTER KW_INDEX alterIndexStatementSuffix -> alterIndexStatementSuffix | KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix -> alterDatabaseStatementSuffix )
			int alt68=4;
			int LA68_0 = input.LA(1);
			if ( (LA68_0==KW_ALTER) ) {
				switch ( input.LA(2) ) {
				case KW_TABLE:
					{
					alt68=1;
					}
					break;
				case KW_VIEW:
					{
					alt68=2;
					}
					break;
				case KW_INDEX:
					{
					alt68=3;
					}
					break;
				case KW_DATABASE:
				case KW_SCHEMA:
					{
					alt68=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 68, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 68, 0, input);
				throw nvae;
			}

			switch (alt68) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1129:7: KW_ALTER KW_TABLE tableName alterTableStatementSuffix
					{
					KW_ALTER211=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement4459); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER211);

					KW_TABLE212=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatement4461); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE212);

					pushFollow(FOLLOW_tableName_in_alterStatement4463);
					tableName213=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName213.getTree());
					pushFollow(FOLLOW_alterTableStatementSuffix_in_alterStatement4465);
					alterTableStatementSuffix214=alterTableStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterTableStatementSuffix.add(alterTableStatementSuffix214.getTree());
					// AST REWRITE
					// elements: alterTableStatementSuffix, tableName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1129:61: -> ^( TOK_ALTERTABLE tableName alterTableStatementSuffix )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1129:64: ^( TOK_ALTERTABLE tableName alterTableStatementSuffix )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE, "TOK_ALTERTABLE"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_1, stream_alterTableStatementSuffix.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1130:7: KW_ALTER KW_VIEW tableName ( KW_AS )? alterViewStatementSuffix
					{
					KW_ALTER215=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement4483); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER215);

					KW_VIEW216=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_alterStatement4485); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW216);

					pushFollow(FOLLOW_tableName_in_alterStatement4487);
					tableName217=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName217.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1130:34: ( KW_AS )?
					int alt66=2;
					int LA66_0 = input.LA(1);
					if ( (LA66_0==KW_AS) ) {
						alt66=1;
					}
					switch (alt66) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1130:34: KW_AS
							{
							KW_AS218=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_alterStatement4489); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS218);

							}
							break;

					}

					pushFollow(FOLLOW_alterViewStatementSuffix_in_alterStatement4492);
					alterViewStatementSuffix219=alterViewStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterViewStatementSuffix.add(alterViewStatementSuffix219.getTree());
					// AST REWRITE
					// elements: tableName, alterViewStatementSuffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1130:66: -> ^( TOK_ALTERVIEW tableName alterViewStatementSuffix )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1130:69: ^( TOK_ALTERVIEW tableName alterViewStatementSuffix )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERVIEW, "TOK_ALTERVIEW"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_1, stream_alterViewStatementSuffix.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1131:7: KW_ALTER KW_INDEX alterIndexStatementSuffix
					{
					KW_ALTER220=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement4510); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER220);

					KW_INDEX221=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_alterStatement4512); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX221);

					pushFollow(FOLLOW_alterIndexStatementSuffix_in_alterStatement4514);
					alterIndexStatementSuffix222=alterIndexStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterIndexStatementSuffix.add(alterIndexStatementSuffix222.getTree());
					// AST REWRITE
					// elements: alterIndexStatementSuffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1131:51: -> alterIndexStatementSuffix
					{
						adaptor.addChild(root_0, stream_alterIndexStatementSuffix.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1132:7: KW_ALTER ( KW_DATABASE | KW_SCHEMA ) alterDatabaseStatementSuffix
					{
					KW_ALTER223=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement4526); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER223);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1132:16: ( KW_DATABASE | KW_SCHEMA )
					int alt67=2;
					int LA67_0 = input.LA(1);
					if ( (LA67_0==KW_DATABASE) ) {
						alt67=1;
					}
					else if ( (LA67_0==KW_SCHEMA) ) {
						alt67=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 67, 0, input);
						throw nvae;
					}

					switch (alt67) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1132:17: KW_DATABASE
							{
							KW_DATABASE224=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_alterStatement4529); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE224);

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1132:29: KW_SCHEMA
							{
							KW_SCHEMA225=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_alterStatement4531); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA225);

							}
							break;

					}

					pushFollow(FOLLOW_alterDatabaseStatementSuffix_in_alterStatement4534);
					alterDatabaseStatementSuffix226=alterDatabaseStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterDatabaseStatementSuffix.add(alterDatabaseStatementSuffix226.getTree());
					// AST REWRITE
					// elements: alterDatabaseStatementSuffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1132:69: -> alterDatabaseStatementSuffix
					{
						adaptor.addChild(root_0, stream_alterDatabaseStatementSuffix.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatement"


	public static class alterTableStatementSuffix_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterTableStatementSuffix"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1135:1: alterTableStatementSuffix : ( ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true] | alterStatementSuffixDropPartitions[true] | alterStatementSuffixAddPartitions[true] | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSkewedby | alterStatementSuffixExchangePartition | alterStatementPartitionKeyType | alterStatementSuffixDropConstraint | alterStatementSuffixAddConstraint | ( partitionSpec )? alterTblPartitionStatementSuffix -> alterTblPartitionStatementSuffix ( partitionSpec )? );
	public final HiveASTParser.alterTableStatementSuffix_return alterTableStatementSuffix() throws RecognitionException {
		HiveASTParser.alterTableStatementSuffix_return retval = new HiveASTParser.alterTableStatementSuffix_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope alterStatementSuffixRename227 =null;
		ParserRuleReturnScope alterStatementSuffixDropPartitions228 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitions229 =null;
		ParserRuleReturnScope alterStatementSuffixTouch230 =null;
		ParserRuleReturnScope alterStatementSuffixArchive231 =null;
		ParserRuleReturnScope alterStatementSuffixUnArchive232 =null;
		ParserRuleReturnScope alterStatementSuffixProperties233 =null;
		ParserRuleReturnScope alterStatementSuffixSkewedby234 =null;
		ParserRuleReturnScope alterStatementSuffixExchangePartition235 =null;
		ParserRuleReturnScope alterStatementPartitionKeyType236 =null;
		ParserRuleReturnScope alterStatementSuffixDropConstraint237 =null;
		ParserRuleReturnScope alterStatementSuffixAddConstraint238 =null;
		ParserRuleReturnScope partitionSpec239 =null;
		ParserRuleReturnScope alterTblPartitionStatementSuffix240 =null;

		RewriteRuleSubtreeStream stream_alterTblPartitionStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTblPartitionStatementSuffix");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("alter table statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1138:5: ( ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true] | alterStatementSuffixDropPartitions[true] | alterStatementSuffixAddPartitions[true] | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterStatementSuffixSkewedby | alterStatementSuffixExchangePartition | alterStatementPartitionKeyType | alterStatementSuffixDropConstraint | alterStatementSuffixAddConstraint | ( partitionSpec )? alterTblPartitionStatementSuffix -> alterTblPartitionStatementSuffix ( partitionSpec )? )
			int alt70=13;
			switch ( input.LA(1) ) {
			case KW_RENAME:
				{
				int LA70_1 = input.LA(2);
				if ( (LA70_1==KW_TO) ) {
					int LA70_20 = input.LA(3);
					if ( (LA70_20==Identifier) && (synpred3_HiveASTParser())) {
						alt70=1;
					}
					else if ( ((LA70_20 >= KW_ABORT && LA70_20 <= KW_AFTER)||LA70_20==KW_ANALYZE||LA70_20==KW_ARCHIVE||LA70_20==KW_ASC||(LA70_20 >= KW_AUTOCOMMIT && LA70_20 <= KW_BEFORE)||(LA70_20 >= KW_BUCKET && LA70_20 <= KW_BUCKETS)||(LA70_20 >= KW_CACHE && LA70_20 <= KW_CASCADE)||LA70_20==KW_CHANGE||(LA70_20 >= KW_CLUSTER && LA70_20 <= KW_COLLECTION)||(LA70_20 >= KW_COLUMNS && LA70_20 <= KW_COMMENT)||(LA70_20 >= KW_COMPACT && LA70_20 <= KW_CONCATENATE)||LA70_20==KW_CONTINUE||LA70_20==KW_DATA||LA70_20==KW_DATABASES||(LA70_20 >= KW_DATETIME && LA70_20 <= KW_DBPROPERTIES)||(LA70_20 >= KW_DEFERRED && LA70_20 <= KW_DEFINED)||(LA70_20 >= KW_DELIMITED && LA70_20 <= KW_DESC)||(LA70_20 >= KW_DETAIL && LA70_20 <= KW_DISABLE)||LA70_20==KW_DISTRIBUTE||LA70_20==KW_DOW||(LA70_20 >= KW_DUMP && LA70_20 <= KW_ELEM_TYPE)||LA70_20==KW_ENABLE||LA70_20==KW_ESCAPED||LA70_20==KW_EXCLUSIVE||(LA70_20 >= KW_EXPLAIN && LA70_20 <= KW_EXPRESSION)||(LA70_20 >= KW_FIELDS && LA70_20 <= KW_FIRST)||(LA70_20 >= KW_FORMAT && LA70_20 <= KW_FORMATTED)||LA70_20==KW_FUNCTIONS||(LA70_20 >= KW_HOUR && LA70_20 <= KW_IDXPROPERTIES)||(LA70_20 >= KW_INDEX && LA70_20 <= KW_INDEXES)||(LA70_20 >= KW_INPATH && LA70_20 <= KW_INPUTFORMAT)||(LA70_20 >= KW_ISOLATION && LA70_20 <= KW_JAR)||(LA70_20 >= KW_KEY && LA70_20 <= KW_LAST)||LA70_20==KW_LEVEL||(LA70_20 >= KW_LIMIT && LA70_20 <= KW_LOAD)||(LA70_20 >= KW_LOCATION && LA70_20 <= KW_LONG)||(LA70_20 >= KW_MAPJOIN && LA70_20 <= KW_MATERIALIZED)||LA70_20==KW_METADATA||(LA70_20 >= KW_MINUTE && LA70_20 <= KW_MONTH)||LA70_20==KW_MSCK||(LA70_20 >= KW_NORELY && LA70_20 <= KW_NOSCAN)||LA70_20==KW_NOVALIDATE||LA70_20==KW_NULLS||LA70_20==KW_OFFSET||(LA70_20 >= KW_OPERATOR && LA70_20 <= KW_OPTION)||(LA70_20 >= KW_OUTPUTDRIVER && LA70_20 <= KW_OUTPUTFORMAT)||(LA70_20 >= KW_OVERWRITE && LA70_20 <= KW_OWNER)||(LA70_20 >= KW_PARTITIONED && LA70_20 <= KW_PARTITIONS)||LA70_20==KW_PLUS||LA70_20==KW_PRETTY||LA70_20==KW_PRINCIPALS||(LA70_20 >= KW_PURGE && LA70_20 <= KW_QUARTER)||LA70_20==KW_READ||(LA70_20 >= KW_REBUILD && LA70_20 <= KW_RECORDWRITER)||(LA70_20 >= KW_RELOAD && LA70_20 <= KW_RESTRICT)||LA70_20==KW_REWRITE||(LA70_20 >= KW_ROLE && LA70_20 <= KW_ROLES)||(LA70_20 >= KW_SCHEMA && LA70_20 <= KW_SECOND)||(LA70_20 >= KW_SEMI && LA70_20 <= KW_SERVER)||(LA70_20 >= KW_SETS && LA70_20 <= KW_SKEWED)||(LA70_20 >= KW_SNAPSHOT && LA70_20 <= KW_SSL)||(LA70_20 >= KW_STATISTICS && LA70_20 <= KW_SUMMARY)||LA70_20==KW_TABLES||(LA70_20 >= KW_TBLPROPERTIES && LA70_20 <= KW_TERMINATED)||LA70_20==KW_TINYINT||(LA70_20 >= KW_TOUCH && LA70_20 <= KW_TRANSACTIONS)||LA70_20==KW_UNARCHIVE||LA70_20==KW_UNDO||LA70_20==KW_UNIONTYPE||(LA70_20 >= KW_UNLOCK && LA70_20 <= KW_UNSIGNED)||(LA70_20 >= KW_URI && LA70_20 <= KW_USE)||(LA70_20 >= KW_UTC && LA70_20 <= KW_VALIDATE)||LA70_20==KW_VALUE_TYPE||(LA70_20 >= KW_VECTORIZATION && LA70_20 <= KW_WEEK)||LA70_20==KW_WHILE||(LA70_20 >= KW_WORK && LA70_20 <= KW_YEAR)||LA70_20==KW_BATCH||LA70_20==KW_DAYOFWEEK||LA70_20==KW_HOLD_DDLTIME||LA70_20==KW_IGNORE||LA70_20==KW_NO_DROP||LA70_20==KW_OFFLINE||LA70_20==KW_PROTECTION||LA70_20==KW_READONLY) && (synpred3_HiveASTParser())) {
						alt70=1;
					}
					else if ( (LA70_20==KW_PARTITION) ) {
						alt70=13;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 70, 20, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 70, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_DROP:
				{
				int LA70_2 = input.LA(2);
				if ( (LA70_2==KW_CONSTRAINT) ) {
					alt70=11;
				}
				else if ( (LA70_2==KW_IF||LA70_2==KW_PARTITION) ) {
					alt70=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 70, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_ADD:
				{
				switch ( input.LA(2) ) {
				case KW_IF:
				case KW_PARTITION:
					{
					alt70=3;
					}
					break;
				case KW_CONSTRAINT:
					{
					alt70=12;
					}
					break;
				case KW_COLUMNS:
					{
					alt70=13;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 70, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case KW_TOUCH:
				{
				alt70=4;
				}
				break;
			case KW_ARCHIVE:
				{
				alt70=5;
				}
				break;
			case KW_UNARCHIVE:
				{
				alt70=6;
				}
				break;
			case KW_SET:
				{
				int LA70_7 = input.LA(2);
				if ( (LA70_7==KW_TBLPROPERTIES) ) {
					alt70=7;
				}
				else if ( (LA70_7==KW_FILEFORMAT||LA70_7==KW_LOCATION||(LA70_7 >= KW_SERDE && LA70_7 <= KW_SERDEPROPERTIES)||LA70_7==KW_SKEWED) ) {
					alt70=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 70, 7, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_UNSET:
				{
				alt70=7;
				}
				break;
			case KW_SKEWED:
				{
				alt70=8;
				}
				break;
			case KW_NOT:
				{
				int LA70_10 = input.LA(2);
				if ( (LA70_10==KW_SKEWED||LA70_10==KW_STORED) ) {
					alt70=8;
				}
				else if ( (LA70_10==KW_CLUSTERED||LA70_10==KW_SORTED) ) {
					alt70=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 70, 10, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_EXCHANGE:
				{
				alt70=9;
				}
				break;
			case KW_PARTITION:
				{
				int LA70_12 = input.LA(2);
				if ( (LA70_12==KW_COLUMN) ) {
					alt70=10;
				}
				else if ( (LA70_12==LPAREN) ) {
					alt70=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 70, 12, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_CHANGE:
			case KW_CLUSTERED:
			case KW_COMPACT:
			case KW_CONCATENATE:
			case KW_INTO:
			case KW_REPLACE:
			case KW_UPDATE:
				{
				alt70=13;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				throw nvae;
			}
			switch (alt70) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1138:7: ( alterStatementSuffixRename[true] )=> alterStatementSuffixRename[true]
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix4572);
					alterStatementSuffixRename227=alterStatementSuffixRename(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRename227.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1139:7: alterStatementSuffixDropPartitions[true]
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix4581);
					alterStatementSuffixDropPartitions228=alterStatementSuffixDropPartitions(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixDropPartitions228.getTree());

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1140:7: alterStatementSuffixAddPartitions[true]
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix4590);
					alterStatementSuffixAddPartitions229=alterStatementSuffixAddPartitions(true);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddPartitions229.getTree());

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1141:7: alterStatementSuffixTouch
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix4599);
					alterStatementSuffixTouch230=alterStatementSuffixTouch();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixTouch230.getTree());

					}
					break;
				case 5 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1142:7: alterStatementSuffixArchive
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix4607);
					alterStatementSuffixArchive231=alterStatementSuffixArchive();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixArchive231.getTree());

					}
					break;
				case 6 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1143:7: alterStatementSuffixUnArchive
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix4615);
					alterStatementSuffixUnArchive232=alterStatementSuffixUnArchive();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUnArchive232.getTree());

					}
					break;
				case 7 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1144:7: alterStatementSuffixProperties
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix4623);
					alterStatementSuffixProperties233=alterStatementSuffixProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixProperties233.getTree());

					}
					break;
				case 8 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1145:7: alterStatementSuffixSkewedby
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix4631);
					alterStatementSuffixSkewedby234=alterStatementSuffixSkewedby();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixSkewedby234.getTree());

					}
					break;
				case 9 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1146:7: alterStatementSuffixExchangePartition
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixExchangePartition_in_alterTableStatementSuffix4639);
					alterStatementSuffixExchangePartition235=alterStatementSuffixExchangePartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixExchangePartition235.getTree());

					}
					break;
				case 10 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1147:7: alterStatementPartitionKeyType
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementPartitionKeyType_in_alterTableStatementSuffix4647);
					alterStatementPartitionKeyType236=alterStatementPartitionKeyType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementPartitionKeyType236.getTree());

					}
					break;
				case 11 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1148:7: alterStatementSuffixDropConstraint
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixDropConstraint_in_alterTableStatementSuffix4655);
					alterStatementSuffixDropConstraint237=alterStatementSuffixDropConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixDropConstraint237.getTree());

					}
					break;
				case 12 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1149:7: alterStatementSuffixAddConstraint
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddConstraint_in_alterTableStatementSuffix4663);
					alterStatementSuffixAddConstraint238=alterStatementSuffixAddConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddConstraint238.getTree());

					}
					break;
				case 13 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1150:7: ( partitionSpec )? alterTblPartitionStatementSuffix
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1150:7: ( partitionSpec )?
					int alt69=2;
					int LA69_0 = input.LA(1);
					if ( (LA69_0==KW_PARTITION) ) {
						alt69=1;
					}
					switch (alt69) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1150:7: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_alterTableStatementSuffix4671);
							partitionSpec239=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec239.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_alterTblPartitionStatementSuffix_in_alterTableStatementSuffix4674);
					alterTblPartitionStatementSuffix240=alterTblPartitionStatementSuffix();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterTblPartitionStatementSuffix.add(alterTblPartitionStatementSuffix240.getTree());
					// AST REWRITE
					// elements: partitionSpec, alterTblPartitionStatementSuffix
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1150:55: -> alterTblPartitionStatementSuffix ( partitionSpec )?
					{
						adaptor.addChild(root_0, stream_alterTblPartitionStatementSuffix.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1150:91: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_0, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTableStatementSuffix"


	public static class alterTblPartitionStatementSuffix_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterTblPartitionStatementSuffix"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1153:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation | alterStatementSuffixClusterbySortby | alterStatementSuffixCompact | alterStatementSuffixUpdateStatsCol | alterStatementSuffixUpdateStats | alterStatementSuffixRenameCol | alterStatementSuffixAddCol );
	public final HiveASTParser.alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix() throws RecognitionException {
		HiveASTParser.alterTblPartitionStatementSuffix_return retval = new HiveASTParser.alterTblPartitionStatementSuffix_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope alterStatementSuffixFileFormat241 =null;
		ParserRuleReturnScope alterStatementSuffixLocation242 =null;
		ParserRuleReturnScope alterStatementSuffixMergeFiles243 =null;
		ParserRuleReturnScope alterStatementSuffixSerdeProperties244 =null;
		ParserRuleReturnScope alterStatementSuffixRenamePart245 =null;
		ParserRuleReturnScope alterStatementSuffixBucketNum246 =null;
		ParserRuleReturnScope alterTblPartitionStatementSuffixSkewedLocation247 =null;
		ParserRuleReturnScope alterStatementSuffixClusterbySortby248 =null;
		ParserRuleReturnScope alterStatementSuffixCompact249 =null;
		ParserRuleReturnScope alterStatementSuffixUpdateStatsCol250 =null;
		ParserRuleReturnScope alterStatementSuffixUpdateStats251 =null;
		ParserRuleReturnScope alterStatementSuffixRenameCol252 =null;
		ParserRuleReturnScope alterStatementSuffixAddCol253 =null;


		pushMsg("alter table partition statement suffix", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1156:3: ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation | alterStatementSuffixClusterbySortby | alterStatementSuffixCompact | alterStatementSuffixUpdateStatsCol | alterStatementSuffixUpdateStats | alterStatementSuffixRenameCol | alterStatementSuffixAddCol )
			int alt71=13;
			switch ( input.LA(1) ) {
			case KW_SET:
				{
				switch ( input.LA(2) ) {
				case KW_FILEFORMAT:
					{
					alt71=1;
					}
					break;
				case KW_LOCATION:
					{
					alt71=2;
					}
					break;
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
					{
					alt71=4;
					}
					break;
				case KW_SKEWED:
					{
					alt71=7;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 71, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case KW_CONCATENATE:
				{
				alt71=3;
				}
				break;
			case KW_RENAME:
				{
				alt71=5;
				}
				break;
			case KW_INTO:
				{
				alt71=6;
				}
				break;
			case KW_CLUSTERED:
			case KW_NOT:
				{
				alt71=8;
				}
				break;
			case KW_COMPACT:
				{
				alt71=9;
				}
				break;
			case KW_UPDATE:
				{
				int LA71_8 = input.LA(2);
				if ( (LA71_8==KW_STATISTICS) ) {
					int LA71_17 = input.LA(3);
					if ( (LA71_17==KW_FOR) ) {
						alt71=10;
					}
					else if ( (LA71_17==KW_SET) ) {
						alt71=11;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 71, 17, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 71, 8, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_CHANGE:
				{
				alt71=12;
				}
				break;
			case KW_ADD:
			case KW_REPLACE:
				{
				alt71=13;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 71, 0, input);
				throw nvae;
			}
			switch (alt71) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1156:5: alterStatementSuffixFileFormat
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4706);
					alterStatementSuffixFileFormat241=alterStatementSuffixFileFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixFileFormat241.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1157:5: alterStatementSuffixLocation
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4712);
					alterStatementSuffixLocation242=alterStatementSuffixLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixLocation242.getTree());

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1158:5: alterStatementSuffixMergeFiles
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4718);
					alterStatementSuffixMergeFiles243=alterStatementSuffixMergeFiles();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixMergeFiles243.getTree());

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1159:5: alterStatementSuffixSerdeProperties
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4724);
					alterStatementSuffixSerdeProperties244=alterStatementSuffixSerdeProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixSerdeProperties244.getTree());

					}
					break;
				case 5 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1160:5: alterStatementSuffixRenamePart
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4730);
					alterStatementSuffixRenamePart245=alterStatementSuffixRenamePart();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRenamePart245.getTree());

					}
					break;
				case 6 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1161:5: alterStatementSuffixBucketNum
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix4736);
					alterStatementSuffixBucketNum246=alterStatementSuffixBucketNum();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixBucketNum246.getTree());

					}
					break;
				case 7 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1162:5: alterTblPartitionStatementSuffixSkewedLocation
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4742);
					alterTblPartitionStatementSuffixSkewedLocation247=alterTblPartitionStatementSuffixSkewedLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterTblPartitionStatementSuffixSkewedLocation247.getTree());

					}
					break;
				case 8 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1163:5: alterStatementSuffixClusterbySortby
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixClusterbySortby_in_alterTblPartitionStatementSuffix4748);
					alterStatementSuffixClusterbySortby248=alterStatementSuffixClusterbySortby();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixClusterbySortby248.getTree());

					}
					break;
				case 9 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1164:5: alterStatementSuffixCompact
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixCompact_in_alterTblPartitionStatementSuffix4754);
					alterStatementSuffixCompact249=alterStatementSuffixCompact();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixCompact249.getTree());

					}
					break;
				case 10 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1165:5: alterStatementSuffixUpdateStatsCol
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUpdateStatsCol_in_alterTblPartitionStatementSuffix4760);
					alterStatementSuffixUpdateStatsCol250=alterStatementSuffixUpdateStatsCol();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUpdateStatsCol250.getTree());

					}
					break;
				case 11 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1166:5: alterStatementSuffixUpdateStats
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixUpdateStats_in_alterTblPartitionStatementSuffix4766);
					alterStatementSuffixUpdateStats251=alterStatementSuffixUpdateStats();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixUpdateStats251.getTree());

					}
					break;
				case 12 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1167:5: alterStatementSuffixRenameCol
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRenameCol_in_alterTblPartitionStatementSuffix4772);
					alterStatementSuffixRenameCol252=alterStatementSuffixRenameCol();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRenameCol252.getTree());

					}
					break;
				case 13 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1168:5: alterStatementSuffixAddCol
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddCol_in_alterTblPartitionStatementSuffix4778);
					alterStatementSuffixAddCol253=alterStatementSuffixAddCol();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddCol253.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTblPartitionStatementSuffix"


	public static class alterStatementPartitionKeyType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementPartitionKeyType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1171:1: alterStatementPartitionKeyType : KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType ) ;
	public final HiveASTParser.alterStatementPartitionKeyType_return alterStatementPartitionKeyType() throws RecognitionException {
		HiveASTParser.alterStatementPartitionKeyType_return retval = new HiveASTParser.alterStatementPartitionKeyType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_PARTITION254=null;
		Token KW_COLUMN255=null;
		Token LPAREN256=null;
		Token RPAREN258=null;
		ParserRuleReturnScope columnNameType257 =null;

		HiveParserASTNode KW_PARTITION254_tree=null;
		HiveParserASTNode KW_COLUMN255_tree=null;
		HiveParserASTNode LPAREN256_tree=null;
		HiveParserASTNode RPAREN258_tree=null;
		RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");

		msgs.push("alter partition key type"); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1174:2: ( KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1174:4: KW_PARTITION KW_COLUMN LPAREN columnNameType RPAREN
			{
			KW_PARTITION254=(Token)match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_alterStatementPartitionKeyType4800); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PARTITION.add(KW_PARTITION254);

			KW_COLUMN255=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementPartitionKeyType4802); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN255);

			LPAREN256=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementPartitionKeyType4804); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN256);

			pushFollow(FOLLOW_columnNameType_in_alterStatementPartitionKeyType4806);
			columnNameType257=columnNameType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType257.getTree());
			RPAREN258=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementPartitionKeyType4808); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN258);

			// AST REWRITE
			// elements: columnNameType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1175:2: -> ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1175:5: ^( TOK_ALTERTABLE_PARTCOLTYPE columnNameType )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_PARTCOLTYPE, "TOK_ALTERTABLE_PARTCOLTYPE"), root_1);
				adaptor.addChild(root_1, stream_columnNameType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {msgs.pop();}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementPartitionKeyType"


	public static class alterViewStatementSuffix_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterViewStatementSuffix"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1178:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename[false] | alterStatementSuffixAddPartitions[false] | alterStatementSuffixDropPartitions[false] | selectStatementWithCTE );
	public final HiveASTParser.alterViewStatementSuffix_return alterViewStatementSuffix() throws RecognitionException {
		HiveASTParser.alterViewStatementSuffix_return retval = new HiveASTParser.alterViewStatementSuffix_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope alterViewSuffixProperties259 =null;
		ParserRuleReturnScope alterStatementSuffixRename260 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitions261 =null;
		ParserRuleReturnScope alterStatementSuffixDropPartitions262 =null;
		ParserRuleReturnScope selectStatementWithCTE263 =null;


		 pushMsg("alter view statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1181:5: ( alterViewSuffixProperties | alterStatementSuffixRename[false] | alterStatementSuffixAddPartitions[false] | alterStatementSuffixDropPartitions[false] | selectStatementWithCTE )
			int alt72=5;
			switch ( input.LA(1) ) {
			case KW_SET:
			case KW_UNSET:
				{
				alt72=1;
				}
				break;
			case KW_RENAME:
				{
				alt72=2;
				}
				break;
			case KW_ADD:
				{
				alt72=3;
				}
				break;
			case KW_DROP:
				{
				alt72=4;
				}
				break;
			case KW_MAP:
			case KW_REDUCE:
			case KW_SELECT:
			case KW_WITH:
			case LPAREN:
				{
				alt72=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 72, 0, input);
				throw nvae;
			}
			switch (alt72) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1181:7: alterViewSuffixProperties
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix4841);
					alterViewSuffixProperties259=alterViewSuffixProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterViewSuffixProperties259.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1182:7: alterStatementSuffixRename[false]
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix4849);
					alterStatementSuffixRename260=alterStatementSuffixRename(false);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixRename260.getTree());

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1183:7: alterStatementSuffixAddPartitions[false]
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix4858);
					alterStatementSuffixAddPartitions261=alterStatementSuffixAddPartitions(false);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixAddPartitions261.getTree());

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1184:7: alterStatementSuffixDropPartitions[false]
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix4867);
					alterStatementSuffixDropPartitions262=alterStatementSuffixDropPartitions(false);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterStatementSuffixDropPartitions262.getTree());

					}
					break;
				case 5 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1185:7: selectStatementWithCTE
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_selectStatementWithCTE_in_alterViewStatementSuffix4876);
					selectStatementWithCTE263=selectStatementWithCTE();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatementWithCTE263.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterViewStatementSuffix"


	public static class alterIndexStatementSuffix_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterIndexStatementSuffix"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1188:1: alterIndexStatementSuffix : indexName= identifier KW_ON tableName ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) ) ;
	public final HiveASTParser.alterIndexStatementSuffix_return alterIndexStatementSuffix() throws RecognitionException {
		HiveASTParser.alterIndexStatementSuffix_return retval = new HiveASTParser.alterIndexStatementSuffix_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ON264=null;
		Token KW_REBUILD267=null;
		Token KW_SET268=null;
		Token KW_IDXPROPERTIES269=null;
		ParserRuleReturnScope indexName =null;
		ParserRuleReturnScope tableName265 =null;
		ParserRuleReturnScope partitionSpec266 =null;
		ParserRuleReturnScope indexProperties270 =null;

		HiveParserASTNode KW_ON264_tree=null;
		HiveParserASTNode KW_REBUILD267_tree=null;
		HiveParserASTNode KW_SET268_tree=null;
		HiveParserASTNode KW_IDXPROPERTIES269_tree=null;
		RewriteRuleTokenStream stream_KW_IDXPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_IDXPROPERTIES");
		RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_indexProperties=new RewriteRuleSubtreeStream(adaptor,"rule indexProperties");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("alter index statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1191:5: (indexName= identifier KW_ON tableName ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1191:7: indexName= identifier KW_ON tableName ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) )
			{
			pushFollow(FOLLOW_identifier_in_alterIndexStatementSuffix4905);
			indexName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(indexName.getTree());
			KW_ON264=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_alterIndexStatementSuffix4907); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON264);

			pushFollow(FOLLOW_tableName_in_alterIndexStatementSuffix4909);
			tableName265=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName265.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1191:44: ( partitionSpec )?
			int alt73=2;
			int LA73_0 = input.LA(1);
			if ( (LA73_0==KW_PARTITION) ) {
				alt73=1;
			}
			switch (alt73) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1191:44: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterIndexStatementSuffix4911);
					partitionSpec266=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec266.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1192:5: ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties ) )
			int alt74=2;
			int LA74_0 = input.LA(1);
			if ( (LA74_0==KW_REBUILD) ) {
				alt74=1;
			}
			else if ( (LA74_0==KW_SET) ) {
				alt74=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 74, 0, input);
				throw nvae;
			}

			switch (alt74) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1193:7: KW_REBUILD
					{
					KW_REBUILD267=(Token)match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix4926); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REBUILD.add(KW_REBUILD267);

					// AST REWRITE
					// elements: partitionSpec, tableName, indexName
					// token labels: 
					// rule labels: indexName, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1194:7: -> ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1194:9: ^( TOK_ALTERINDEX_REBUILD tableName $indexName ( partitionSpec )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERINDEX_REBUILD, "TOK_ALTERINDEX_REBUILD"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_1, stream_indexName.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1194:55: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1196:7: KW_SET KW_IDXPROPERTIES indexProperties
					{
					KW_SET268=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterIndexStatementSuffix4959); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET268);

					KW_IDXPROPERTIES269=(Token)match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix4961); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_IDXPROPERTIES.add(KW_IDXPROPERTIES269);

					pushFollow(FOLLOW_indexProperties_in_alterIndexStatementSuffix4969);
					indexProperties270=indexProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_indexProperties.add(indexProperties270.getTree());
					// AST REWRITE
					// elements: tableName, indexProperties, indexName
					// token labels: 
					// rule labels: indexName, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_indexName=new RewriteRuleSubtreeStream(adaptor,"rule indexName",indexName!=null?indexName.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1198:7: -> ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1198:9: ^( TOK_ALTERINDEX_PROPERTIES tableName $indexName indexProperties )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERINDEX_PROPERTIES, "TOK_ALTERINDEX_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						adaptor.addChild(root_1, stream_indexName.nextTree());
						adaptor.addChild(root_1, stream_indexProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterIndexStatementSuffix"


	public static class alterDatabaseStatementSuffix_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseStatementSuffix"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1202:1: alterDatabaseStatementSuffix : ( alterDatabaseSuffixProperties | alterDatabaseSuffixSetOwner | alterDatabaseSuffixSetLocation );
	public final HiveASTParser.alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix() throws RecognitionException {
		HiveASTParser.alterDatabaseStatementSuffix_return retval = new HiveASTParser.alterDatabaseStatementSuffix_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope alterDatabaseSuffixProperties271 =null;
		ParserRuleReturnScope alterDatabaseSuffixSetOwner272 =null;
		ParserRuleReturnScope alterDatabaseSuffixSetLocation273 =null;


		 pushMsg("alter database statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1205:5: ( alterDatabaseSuffixProperties | alterDatabaseSuffixSetOwner | alterDatabaseSuffixSetLocation )
			int alt75=3;
			int LA75_0 = input.LA(1);
			if ( (LA75_0==Identifier) ) {
				int LA75_1 = input.LA(2);
				if ( (LA75_1==KW_SET) ) {
					switch ( input.LA(3) ) {
					case KW_DBPROPERTIES:
						{
						alt75=1;
						}
						break;
					case KW_OWNER:
						{
						alt75=2;
						}
						break;
					case KW_LOCATION:
						{
						alt75=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 75, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 75, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( ((LA75_0 >= KW_ABORT && LA75_0 <= KW_AFTER)||LA75_0==KW_ANALYZE||LA75_0==KW_ARCHIVE||LA75_0==KW_ASC||(LA75_0 >= KW_AUTOCOMMIT && LA75_0 <= KW_BEFORE)||(LA75_0 >= KW_BUCKET && LA75_0 <= KW_BUCKETS)||(LA75_0 >= KW_CACHE && LA75_0 <= KW_CASCADE)||LA75_0==KW_CHANGE||(LA75_0 >= KW_CLUSTER && LA75_0 <= KW_COLLECTION)||(LA75_0 >= KW_COLUMNS && LA75_0 <= KW_COMMENT)||(LA75_0 >= KW_COMPACT && LA75_0 <= KW_CONCATENATE)||LA75_0==KW_CONTINUE||LA75_0==KW_DATA||LA75_0==KW_DATABASES||(LA75_0 >= KW_DATETIME && LA75_0 <= KW_DBPROPERTIES)||(LA75_0 >= KW_DEFERRED && LA75_0 <= KW_DEFINED)||(LA75_0 >= KW_DELIMITED && LA75_0 <= KW_DESC)||(LA75_0 >= KW_DETAIL && LA75_0 <= KW_DISABLE)||LA75_0==KW_DISTRIBUTE||LA75_0==KW_DOW||(LA75_0 >= KW_DUMP && LA75_0 <= KW_ELEM_TYPE)||LA75_0==KW_ENABLE||LA75_0==KW_ESCAPED||LA75_0==KW_EXCLUSIVE||(LA75_0 >= KW_EXPLAIN && LA75_0 <= KW_EXPRESSION)||(LA75_0 >= KW_FIELDS && LA75_0 <= KW_FIRST)||(LA75_0 >= KW_FORMAT && LA75_0 <= KW_FORMATTED)||LA75_0==KW_FUNCTIONS||(LA75_0 >= KW_HOUR && LA75_0 <= KW_IDXPROPERTIES)||(LA75_0 >= KW_INDEX && LA75_0 <= KW_INDEXES)||(LA75_0 >= KW_INPATH && LA75_0 <= KW_INPUTFORMAT)||(LA75_0 >= KW_ISOLATION && LA75_0 <= KW_JAR)||(LA75_0 >= KW_KEY && LA75_0 <= KW_LAST)||LA75_0==KW_LEVEL||(LA75_0 >= KW_LIMIT && LA75_0 <= KW_LOAD)||(LA75_0 >= KW_LOCATION && LA75_0 <= KW_LONG)||(LA75_0 >= KW_MAPJOIN && LA75_0 <= KW_MATERIALIZED)||LA75_0==KW_METADATA||(LA75_0 >= KW_MINUTE && LA75_0 <= KW_MONTH)||LA75_0==KW_MSCK||(LA75_0 >= KW_NORELY && LA75_0 <= KW_NOSCAN)||LA75_0==KW_NOVALIDATE||LA75_0==KW_NULLS||LA75_0==KW_OFFSET||(LA75_0 >= KW_OPERATOR && LA75_0 <= KW_OPTION)||(LA75_0 >= KW_OUTPUTDRIVER && LA75_0 <= KW_OUTPUTFORMAT)||(LA75_0 >= KW_OVERWRITE && LA75_0 <= KW_OWNER)||(LA75_0 >= KW_PARTITIONED && LA75_0 <= KW_PARTITIONS)||LA75_0==KW_PLUS||LA75_0==KW_PRETTY||LA75_0==KW_PRINCIPALS||(LA75_0 >= KW_PURGE && LA75_0 <= KW_QUARTER)||LA75_0==KW_READ||(LA75_0 >= KW_REBUILD && LA75_0 <= KW_RECORDWRITER)||(LA75_0 >= KW_RELOAD && LA75_0 <= KW_RESTRICT)||LA75_0==KW_REWRITE||(LA75_0 >= KW_ROLE && LA75_0 <= KW_ROLES)||(LA75_0 >= KW_SCHEMA && LA75_0 <= KW_SECOND)||(LA75_0 >= KW_SEMI && LA75_0 <= KW_SERVER)||(LA75_0 >= KW_SETS && LA75_0 <= KW_SKEWED)||(LA75_0 >= KW_SNAPSHOT && LA75_0 <= KW_SSL)||(LA75_0 >= KW_STATISTICS && LA75_0 <= KW_SUMMARY)||LA75_0==KW_TABLES||(LA75_0 >= KW_TBLPROPERTIES && LA75_0 <= KW_TERMINATED)||LA75_0==KW_TINYINT||(LA75_0 >= KW_TOUCH && LA75_0 <= KW_TRANSACTIONS)||LA75_0==KW_UNARCHIVE||LA75_0==KW_UNDO||LA75_0==KW_UNIONTYPE||(LA75_0 >= KW_UNLOCK && LA75_0 <= KW_UNSIGNED)||(LA75_0 >= KW_URI && LA75_0 <= KW_USE)||(LA75_0 >= KW_UTC && LA75_0 <= KW_VALIDATE)||LA75_0==KW_VALUE_TYPE||(LA75_0 >= KW_VECTORIZATION && LA75_0 <= KW_WEEK)||LA75_0==KW_WHILE||(LA75_0 >= KW_WORK && LA75_0 <= KW_YEAR)||LA75_0==KW_BATCH||LA75_0==KW_DAYOFWEEK||LA75_0==KW_HOLD_DDLTIME||LA75_0==KW_IGNORE||LA75_0==KW_NO_DROP||LA75_0==KW_OFFLINE||LA75_0==KW_PROTECTION||LA75_0==KW_READONLY) ) {
				int LA75_2 = input.LA(2);
				if ( (LA75_2==KW_SET) ) {
					switch ( input.LA(3) ) {
					case KW_DBPROPERTIES:
						{
						alt75=1;
						}
						break;
					case KW_OWNER:
						{
						alt75=2;
						}
						break;
					case KW_LOCATION:
						{
						alt75=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 75, 4, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 75, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 75, 0, input);
				throw nvae;
			}

			switch (alt75) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1205:7: alterDatabaseSuffixProperties
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix5020);
					alterDatabaseSuffixProperties271=alterDatabaseSuffixProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterDatabaseSuffixProperties271.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1206:7: alterDatabaseSuffixSetOwner
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterDatabaseSuffixSetOwner_in_alterDatabaseStatementSuffix5028);
					alterDatabaseSuffixSetOwner272=alterDatabaseSuffixSetOwner();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterDatabaseSuffixSetOwner272.getTree());

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1207:7: alterDatabaseSuffixSetLocation
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_alterDatabaseSuffixSetLocation_in_alterDatabaseStatementSuffix5036);
					alterDatabaseSuffixSetLocation273=alterDatabaseSuffixSetLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterDatabaseSuffixSetLocation273.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseStatementSuffix"


	public static class alterDatabaseSuffixProperties_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseSuffixProperties"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1210:1: alterDatabaseSuffixProperties : name= identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) ;
	public final HiveASTParser.alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties() throws RecognitionException {
		HiveASTParser.alterDatabaseSuffixProperties_return retval = new HiveASTParser.alterDatabaseSuffixProperties_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SET274=null;
		Token KW_DBPROPERTIES275=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope dbProperties276 =null;

		HiveParserASTNode KW_SET274_tree=null;
		HiveParserASTNode KW_DBPROPERTIES275_tree=null;
		RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");

		 pushMsg("alter database properties statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1213:5: (name= identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1213:7: name= identifier KW_SET KW_DBPROPERTIES dbProperties
			{
			pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixProperties5065);
			name=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(name.getTree());
			KW_SET274=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixProperties5067); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET274);

			KW_DBPROPERTIES275=(Token)match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties5069); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES275);

			pushFollow(FOLLOW_dbProperties_in_alterDatabaseSuffixProperties5071);
			dbProperties276=dbProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dbProperties.add(dbProperties276.getTree());
			// AST REWRITE
			// elements: name, dbProperties
			// token labels: 
			// rule labels: name, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1214:5: -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1214:8: ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERDATABASE_PROPERTIES, "TOK_ALTERDATABASE_PROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				adaptor.addChild(root_1, stream_dbProperties.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseSuffixProperties"


	public static class alterDatabaseSuffixSetOwner_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseSuffixSetOwner"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1217:1: alterDatabaseSuffixSetOwner : dbName= identifier KW_SET KW_OWNER principalName -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName ) ;
	public final HiveASTParser.alterDatabaseSuffixSetOwner_return alterDatabaseSuffixSetOwner() throws RecognitionException {
		HiveASTParser.alterDatabaseSuffixSetOwner_return retval = new HiveASTParser.alterDatabaseSuffixSetOwner_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SET277=null;
		Token KW_OWNER278=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope principalName279 =null;

		HiveParserASTNode KW_SET277_tree=null;
		HiveParserASTNode KW_OWNER278_tree=null;
		RewriteRuleTokenStream stream_KW_OWNER=new RewriteRuleTokenStream(adaptor,"token KW_OWNER");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		 pushMsg("alter database set owner", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1220:5: (dbName= identifier KW_SET KW_OWNER principalName -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1220:7: dbName= identifier KW_SET KW_OWNER principalName
			{
			pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixSetOwner5115);
			dbName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
			KW_SET277=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixSetOwner5117); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET277);

			KW_OWNER278=(Token)match(input,KW_OWNER,FOLLOW_KW_OWNER_in_alterDatabaseSuffixSetOwner5119); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OWNER.add(KW_OWNER278);

			pushFollow(FOLLOW_principalName_in_alterDatabaseSuffixSetOwner5121);
			principalName279=principalName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalName.add(principalName279.getTree());
			// AST REWRITE
			// elements: dbName, principalName
			// token labels: 
			// rule labels: dbName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1221:5: -> ^( TOK_ALTERDATABASE_OWNER $dbName principalName )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1221:8: ^( TOK_ALTERDATABASE_OWNER $dbName principalName )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERDATABASE_OWNER, "TOK_ALTERDATABASE_OWNER"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				adaptor.addChild(root_1, stream_principalName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseSuffixSetOwner"


	public static class alterDatabaseSuffixSetLocation_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterDatabaseSuffixSetLocation"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1224:1: alterDatabaseSuffixSetLocation : dbName= identifier KW_SET KW_LOCATION newLocation= StringLiteral -> ^( TOK_ALTERDATABASE_LOCATION $dbName $newLocation) ;
	public final HiveASTParser.alterDatabaseSuffixSetLocation_return alterDatabaseSuffixSetLocation() throws RecognitionException {
		HiveASTParser.alterDatabaseSuffixSetLocation_return retval = new HiveASTParser.alterDatabaseSuffixSetLocation_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token newLocation=null;
		Token KW_SET280=null;
		Token KW_LOCATION281=null;
		ParserRuleReturnScope dbName =null;

		HiveParserASTNode newLocation_tree=null;
		HiveParserASTNode KW_SET280_tree=null;
		HiveParserASTNode KW_LOCATION281_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("alter database set location", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1227:5: (dbName= identifier KW_SET KW_LOCATION newLocation= StringLiteral -> ^( TOK_ALTERDATABASE_LOCATION $dbName $newLocation) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1227:7: dbName= identifier KW_SET KW_LOCATION newLocation= StringLiteral
			{
			pushFollow(FOLLOW_identifier_in_alterDatabaseSuffixSetLocation5165);
			dbName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
			KW_SET280=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixSetLocation5167); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET280);

			KW_LOCATION281=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterDatabaseSuffixSetLocation5169); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION281);

			newLocation=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterDatabaseSuffixSetLocation5173); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(newLocation);

			// AST REWRITE
			// elements: newLocation, dbName
			// token labels: newLocation
			// rule labels: dbName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_newLocation=new RewriteRuleTokenStream(adaptor,"token newLocation",newLocation);
			RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1228:5: -> ^( TOK_ALTERDATABASE_LOCATION $dbName $newLocation)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1228:8: ^( TOK_ALTERDATABASE_LOCATION $dbName $newLocation)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERDATABASE_LOCATION, "TOK_ALTERDATABASE_LOCATION"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextTree());
				adaptor.addChild(root_1, stream_newLocation.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterDatabaseSuffixSetLocation"


	public static class alterStatementSuffixRename_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRename"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1231:1: alterStatementSuffixRename[boolean table] : KW_RENAME KW_TO tableName -> { table }? ^( TOK_ALTERTABLE_RENAME tableName ) -> ^( TOK_ALTERVIEW_RENAME tableName ) ;
	public final HiveASTParser.alterStatementSuffixRename_return alterStatementSuffixRename(boolean table) throws RecognitionException {
		HiveASTParser.alterStatementSuffixRename_return retval = new HiveASTParser.alterStatementSuffixRename_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_RENAME282=null;
		Token KW_TO283=null;
		ParserRuleReturnScope tableName284 =null;

		HiveParserASTNode KW_RENAME282_tree=null;
		HiveParserASTNode KW_TO283_tree=null;
		RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("rename statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1234:5: ( KW_RENAME KW_TO tableName -> { table }? ^( TOK_ALTERTABLE_RENAME tableName ) -> ^( TOK_ALTERVIEW_RENAME tableName ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1234:7: KW_RENAME KW_TO tableName
			{
			KW_RENAME282=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRename5217); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_RENAME.add(KW_RENAME282);

			KW_TO283=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRename5219); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO283);

			pushFollow(FOLLOW_tableName_in_alterStatementSuffixRename5221);
			tableName284=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName284.getTree());
			// AST REWRITE
			// elements: tableName, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1235:5: -> { table }? ^( TOK_ALTERTABLE_RENAME tableName )
			if ( table ) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1235:19: ^( TOK_ALTERTABLE_RENAME tableName )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_RENAME, "TOK_ALTERTABLE_RENAME"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1236:5: -> ^( TOK_ALTERVIEW_RENAME tableName )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1236:19: ^( TOK_ALTERVIEW_RENAME tableName )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERVIEW_RENAME, "TOK_ALTERVIEW_RENAME"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRename"


	public static class alterStatementSuffixAddCol_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddCol"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1239:1: alterStatementSuffixAddCol : (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )? -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? ) -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? ) ;
	public final HiveASTParser.alterStatementSuffixAddCol_return alterStatementSuffixAddCol() throws RecognitionException {
		HiveASTParser.alterStatementSuffixAddCol_return retval = new HiveASTParser.alterStatementSuffixAddCol_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token add=null;
		Token replace=null;
		Token KW_COLUMNS285=null;
		Token LPAREN286=null;
		Token RPAREN288=null;
		ParserRuleReturnScope columnNameTypeList287 =null;
		ParserRuleReturnScope restrictOrCascade289 =null;

		HiveParserASTNode add_tree=null;
		HiveParserASTNode replace_tree=null;
		HiveParserASTNode KW_COLUMNS285_tree=null;
		HiveParserASTNode LPAREN286_tree=null;
		HiveParserASTNode RPAREN288_tree=null;
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");

		 pushMsg("add column statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1242:5: ( (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )? -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? ) -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1242:7: (add= KW_ADD |replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN ( restrictOrCascade )?
			{
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1242:7: (add= KW_ADD |replace= KW_REPLACE )
			int alt76=2;
			int LA76_0 = input.LA(1);
			if ( (LA76_0==KW_ADD) ) {
				alt76=1;
			}
			else if ( (LA76_0==KW_REPLACE) ) {
				alt76=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 76, 0, input);
				throw nvae;
			}

			switch (alt76) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1242:8: add= KW_ADD
					{
					add=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddCol5288); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ADD.add(add);

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1242:21: replace= KW_REPLACE
					{
					replace=(Token)match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol5294); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REPLACE.add(replace);

					}
					break;

			}

			KW_COLUMNS285=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol5297); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS285);

			LPAREN286=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementSuffixAddCol5299); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN286);

			pushFollow(FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol5301);
			columnNameTypeList287=columnNameTypeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList287.getTree());
			RPAREN288=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementSuffixAddCol5303); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN288);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1242:85: ( restrictOrCascade )?
			int alt77=2;
			int LA77_0 = input.LA(1);
			if ( (LA77_0==KW_CASCADE||LA77_0==KW_RESTRICT) ) {
				alt77=1;
			}
			switch (alt77) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1242:85: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_alterStatementSuffixAddCol5305);
					restrictOrCascade289=restrictOrCascade();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade289.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: columnNameTypeList, restrictOrCascade, restrictOrCascade, columnNameTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1243:5: -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? )
			if (add != null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1243:24: ^( TOK_ALTERTABLE_ADDCOLS columnNameTypeList ( restrictOrCascade )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_ADDCOLS, "TOK_ALTERTABLE_ADDCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1243:68: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1244:5: -> ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1244:24: ^( TOK_ALTERTABLE_REPLACECOLS columnNameTypeList ( restrictOrCascade )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_REPLACECOLS, "TOK_ALTERTABLE_REPLACECOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1244:72: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddCol"


	public static class alterStatementSuffixAddConstraint_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddConstraint"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1247:1: alterStatementSuffixAddConstraint : KW_ADD (fk= alterForeignKeyWithName | alterConstraintWithName ) -> {fk != null}? ^( TOK_ALTERTABLE_ADDCONSTRAINT alterForeignKeyWithName ) -> ^( TOK_ALTERTABLE_ADDCONSTRAINT alterConstraintWithName ) ;
	public final HiveASTParser.alterStatementSuffixAddConstraint_return alterStatementSuffixAddConstraint() throws RecognitionException {
		HiveASTParser.alterStatementSuffixAddConstraint_return retval = new HiveASTParser.alterStatementSuffixAddConstraint_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ADD290=null;
		ParserRuleReturnScope fk =null;
		ParserRuleReturnScope alterConstraintWithName291 =null;

		HiveParserASTNode KW_ADD290_tree=null;
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_alterForeignKeyWithName=new RewriteRuleSubtreeStream(adaptor,"rule alterForeignKeyWithName");
		RewriteRuleSubtreeStream stream_alterConstraintWithName=new RewriteRuleSubtreeStream(adaptor,"rule alterConstraintWithName");

		 pushMsg("add constraint statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1250:4: ( KW_ADD (fk= alterForeignKeyWithName | alterConstraintWithName ) -> {fk != null}? ^( TOK_ALTERTABLE_ADDCONSTRAINT alterForeignKeyWithName ) -> ^( TOK_ALTERTABLE_ADDCONSTRAINT alterConstraintWithName ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1250:7: KW_ADD (fk= alterForeignKeyWithName | alterConstraintWithName )
			{
			KW_ADD290=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddConstraint5381); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADD.add(KW_ADD290);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1250:14: (fk= alterForeignKeyWithName | alterConstraintWithName )
			int alt78=2;
			int LA78_0 = input.LA(1);
			if ( (LA78_0==KW_CONSTRAINT) ) {
				int LA78_1 = input.LA(2);
				if ( (LA78_1==Identifier) ) {
					int LA78_2 = input.LA(3);
					if ( (LA78_2==KW_FOREIGN) ) {
						alt78=1;
					}
					else if ( (LA78_2==KW_PRIMARY||LA78_2==KW_UNIQUE) ) {
						alt78=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 78, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( ((LA78_1 >= KW_ABORT && LA78_1 <= KW_AFTER)||LA78_1==KW_ANALYZE||LA78_1==KW_ARCHIVE||LA78_1==KW_ASC||(LA78_1 >= KW_AUTOCOMMIT && LA78_1 <= KW_BEFORE)||(LA78_1 >= KW_BUCKET && LA78_1 <= KW_BUCKETS)||(LA78_1 >= KW_CACHE && LA78_1 <= KW_CASCADE)||LA78_1==KW_CHANGE||(LA78_1 >= KW_CLUSTER && LA78_1 <= KW_COLLECTION)||(LA78_1 >= KW_COLUMNS && LA78_1 <= KW_COMMENT)||(LA78_1 >= KW_COMPACT && LA78_1 <= KW_CONCATENATE)||LA78_1==KW_CONTINUE||LA78_1==KW_DATA||LA78_1==KW_DATABASES||(LA78_1 >= KW_DATETIME && LA78_1 <= KW_DBPROPERTIES)||(LA78_1 >= KW_DEFERRED && LA78_1 <= KW_DEFINED)||(LA78_1 >= KW_DELIMITED && LA78_1 <= KW_DESC)||(LA78_1 >= KW_DETAIL && LA78_1 <= KW_DISABLE)||LA78_1==KW_DISTRIBUTE||LA78_1==KW_DOW||(LA78_1 >= KW_DUMP && LA78_1 <= KW_ELEM_TYPE)||LA78_1==KW_ENABLE||LA78_1==KW_ESCAPED||LA78_1==KW_EXCLUSIVE||(LA78_1 >= KW_EXPLAIN && LA78_1 <= KW_EXPRESSION)||(LA78_1 >= KW_FIELDS && LA78_1 <= KW_FIRST)||(LA78_1 >= KW_FORMAT && LA78_1 <= KW_FORMATTED)||LA78_1==KW_FUNCTIONS||(LA78_1 >= KW_HOUR && LA78_1 <= KW_IDXPROPERTIES)||(LA78_1 >= KW_INDEX && LA78_1 <= KW_INDEXES)||(LA78_1 >= KW_INPATH && LA78_1 <= KW_INPUTFORMAT)||(LA78_1 >= KW_ISOLATION && LA78_1 <= KW_JAR)||(LA78_1 >= KW_KEY && LA78_1 <= KW_LAST)||LA78_1==KW_LEVEL||(LA78_1 >= KW_LIMIT && LA78_1 <= KW_LOAD)||(LA78_1 >= KW_LOCATION && LA78_1 <= KW_LONG)||(LA78_1 >= KW_MAPJOIN && LA78_1 <= KW_MATERIALIZED)||LA78_1==KW_METADATA||(LA78_1 >= KW_MINUTE && LA78_1 <= KW_MONTH)||LA78_1==KW_MSCK||(LA78_1 >= KW_NORELY && LA78_1 <= KW_NOSCAN)||LA78_1==KW_NOVALIDATE||LA78_1==KW_NULLS||LA78_1==KW_OFFSET||(LA78_1 >= KW_OPERATOR && LA78_1 <= KW_OPTION)||(LA78_1 >= KW_OUTPUTDRIVER && LA78_1 <= KW_OUTPUTFORMAT)||(LA78_1 >= KW_OVERWRITE && LA78_1 <= KW_OWNER)||(LA78_1 >= KW_PARTITIONED && LA78_1 <= KW_PARTITIONS)||LA78_1==KW_PLUS||LA78_1==KW_PRETTY||LA78_1==KW_PRINCIPALS||(LA78_1 >= KW_PURGE && LA78_1 <= KW_QUARTER)||LA78_1==KW_READ||(LA78_1 >= KW_REBUILD && LA78_1 <= KW_RECORDWRITER)||(LA78_1 >= KW_RELOAD && LA78_1 <= KW_RESTRICT)||LA78_1==KW_REWRITE||(LA78_1 >= KW_ROLE && LA78_1 <= KW_ROLES)||(LA78_1 >= KW_SCHEMA && LA78_1 <= KW_SECOND)||(LA78_1 >= KW_SEMI && LA78_1 <= KW_SERVER)||(LA78_1 >= KW_SETS && LA78_1 <= KW_SKEWED)||(LA78_1 >= KW_SNAPSHOT && LA78_1 <= KW_SSL)||(LA78_1 >= KW_STATISTICS && LA78_1 <= KW_SUMMARY)||LA78_1==KW_TABLES||(LA78_1 >= KW_TBLPROPERTIES && LA78_1 <= KW_TERMINATED)||LA78_1==KW_TINYINT||(LA78_1 >= KW_TOUCH && LA78_1 <= KW_TRANSACTIONS)||LA78_1==KW_UNARCHIVE||LA78_1==KW_UNDO||LA78_1==KW_UNIONTYPE||(LA78_1 >= KW_UNLOCK && LA78_1 <= KW_UNSIGNED)||(LA78_1 >= KW_URI && LA78_1 <= KW_USE)||(LA78_1 >= KW_UTC && LA78_1 <= KW_VALIDATE)||LA78_1==KW_VALUE_TYPE||(LA78_1 >= KW_VECTORIZATION && LA78_1 <= KW_WEEK)||LA78_1==KW_WHILE||(LA78_1 >= KW_WORK && LA78_1 <= KW_YEAR)||LA78_1==KW_BATCH||LA78_1==KW_DAYOFWEEK||LA78_1==KW_HOLD_DDLTIME||LA78_1==KW_IGNORE||LA78_1==KW_NO_DROP||LA78_1==KW_OFFLINE||LA78_1==KW_PROTECTION||LA78_1==KW_READONLY) ) {
					int LA78_3 = input.LA(3);
					if ( (LA78_3==KW_FOREIGN) ) {
						alt78=1;
					}
					else if ( (LA78_3==KW_PRIMARY||LA78_3==KW_UNIQUE) ) {
						alt78=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 78, 3, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 78, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 78, 0, input);
				throw nvae;
			}

			switch (alt78) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1250:15: fk= alterForeignKeyWithName
					{
					pushFollow(FOLLOW_alterForeignKeyWithName_in_alterStatementSuffixAddConstraint5386);
					fk=alterForeignKeyWithName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterForeignKeyWithName.add(fk.getTree());
					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1250:44: alterConstraintWithName
					{
					pushFollow(FOLLOW_alterConstraintWithName_in_alterStatementSuffixAddConstraint5390);
					alterConstraintWithName291=alterConstraintWithName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterConstraintWithName.add(alterConstraintWithName291.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: alterConstraintWithName, alterForeignKeyWithName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1251:4: -> {fk != null}? ^( TOK_ALTERTABLE_ADDCONSTRAINT alterForeignKeyWithName )
			if (fk != null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1251:21: ^( TOK_ALTERTABLE_ADDCONSTRAINT alterForeignKeyWithName )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_ADDCONSTRAINT, "TOK_ALTERTABLE_ADDCONSTRAINT"), root_1);
				adaptor.addChild(root_1, stream_alterForeignKeyWithName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1252:4: -> ^( TOK_ALTERTABLE_ADDCONSTRAINT alterConstraintWithName )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1252:21: ^( TOK_ALTERTABLE_ADDCONSTRAINT alterConstraintWithName )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_ADDCONSTRAINT, "TOK_ALTERTABLE_ADDCONSTRAINT"), root_1);
				adaptor.addChild(root_1, stream_alterConstraintWithName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddConstraint"


	public static class alterStatementSuffixDropConstraint_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixDropConstraint"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1255:1: alterStatementSuffixDropConstraint : KW_DROP KW_CONSTRAINT cName= identifier -> ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName) ;
	public final HiveASTParser.alterStatementSuffixDropConstraint_return alterStatementSuffixDropConstraint() throws RecognitionException {
		HiveASTParser.alterStatementSuffixDropConstraint_return retval = new HiveASTParser.alterStatementSuffixDropConstraint_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_DROP292=null;
		Token KW_CONSTRAINT293=null;
		ParserRuleReturnScope cName =null;

		HiveParserASTNode KW_DROP292_tree=null;
		HiveParserASTNode KW_CONSTRAINT293_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("drop constraint statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1258:4: ( KW_DROP KW_CONSTRAINT cName= identifier -> ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1258:6: KW_DROP KW_CONSTRAINT cName= identifier
			{
			KW_DROP292=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropConstraint5454); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP292);

			KW_CONSTRAINT293=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterStatementSuffixDropConstraint5456); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT293);

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixDropConstraint5460);
			cName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(cName.getTree());
			// AST REWRITE
			// elements: cName
			// token labels: 
			// rule labels: cName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_cName=new RewriteRuleSubtreeStream(adaptor,"rule cName",cName!=null?cName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1259:4: -> ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1259:6: ^( TOK_ALTERTABLE_DROPCONSTRAINT $cName)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_DROPCONSTRAINT, "TOK_ALTERTABLE_DROPCONSTRAINT"), root_1);
				adaptor.addChild(root_1, stream_cName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixDropConstraint"


	public static class alterStatementSuffixRenameCol_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRenameCol"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1262:1: alterStatementSuffixRenameCol : KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( alterColumnConstraint[$newName.tree] )? ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterColumnConstraint )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? ) ;
	public final HiveASTParser.alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol() throws RecognitionException {
		HiveASTParser.alterStatementSuffixRenameCol_return retval = new HiveASTParser.alterStatementSuffixRenameCol_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token comment=null;
		Token KW_CHANGE294=null;
		Token KW_COLUMN295=null;
		Token KW_COMMENT298=null;
		ParserRuleReturnScope oldName =null;
		ParserRuleReturnScope newName =null;
		ParserRuleReturnScope colType296 =null;
		ParserRuleReturnScope alterColumnConstraint297 =null;
		ParserRuleReturnScope alterStatementChangeColPosition299 =null;
		ParserRuleReturnScope restrictOrCascade300 =null;

		HiveParserASTNode comment_tree=null;
		HiveParserASTNode KW_CHANGE294_tree=null;
		HiveParserASTNode KW_COLUMN295_tree=null;
		HiveParserASTNode KW_COMMENT298_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_CHANGE=new RewriteRuleTokenStream(adaptor,"token KW_CHANGE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
		RewriteRuleSubtreeStream stream_alterStatementChangeColPosition=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementChangeColPosition");
		RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");
		RewriteRuleSubtreeStream stream_alterColumnConstraint=new RewriteRuleSubtreeStream(adaptor,"rule alterColumnConstraint");

		 pushMsg("rename column name", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:5: ( KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( alterColumnConstraint[$newName.tree] )? ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterColumnConstraint )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:7: KW_CHANGE ( KW_COLUMN )? oldName= identifier newName= identifier colType ( alterColumnConstraint[$newName.tree] )? ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? ( restrictOrCascade )?
			{
			KW_CHANGE294=(Token)match(input,KW_CHANGE,FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol5497); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CHANGE.add(KW_CHANGE294);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:17: ( KW_COLUMN )?
			int alt79=2;
			int LA79_0 = input.LA(1);
			if ( (LA79_0==KW_COLUMN) ) {
				alt79=1;
			}
			switch (alt79) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:17: KW_COLUMN
					{
					KW_COLUMN295=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol5499); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN295);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixRenameCol5504);
			oldName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(oldName.getTree());
			pushFollow(FOLLOW_identifier_in_alterStatementSuffixRenameCol5508);
			newName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(newName.getTree());
			pushFollow(FOLLOW_colType_in_alterStatementSuffixRenameCol5510);
			colType296=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType296.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:74: ( alterColumnConstraint[$newName.tree] )?
			int alt80=2;
			int LA80_0 = input.LA(1);
			if ( (LA80_0==KW_CONSTRAINT||LA80_0==KW_NOT||LA80_0==KW_PRIMARY||LA80_0==KW_REFERENCES||LA80_0==KW_UNIQUE) ) {
				alt80=1;
			}
			switch (alt80) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:74: alterColumnConstraint[$newName.tree]
					{
					pushFollow(FOLLOW_alterColumnConstraint_in_alterStatementSuffixRenameCol5512);
					alterColumnConstraint297=alterColumnConstraint((newName!=null?((HiveParserASTNode)newName.getTree()):null));
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterColumnConstraint.add(alterColumnConstraint297.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:112: ( KW_COMMENT comment= StringLiteral )?
			int alt81=2;
			int LA81_0 = input.LA(1);
			if ( (LA81_0==KW_COMMENT) ) {
				alt81=1;
			}
			switch (alt81) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:113: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT298=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol5517); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT298);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol5521); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:148: ( alterStatementChangeColPosition )?
			int alt82=2;
			int LA82_0 = input.LA(1);
			if ( (LA82_0==KW_AFTER||LA82_0==KW_FIRST) ) {
				alt82=1;
			}
			switch (alt82) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:148: alterStatementChangeColPosition
					{
					pushFollow(FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol5525);
					alterStatementChangeColPosition299=alterStatementChangeColPosition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterStatementChangeColPosition.add(alterStatementChangeColPosition299.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:181: ( restrictOrCascade )?
			int alt83=2;
			int LA83_0 = input.LA(1);
			if ( (LA83_0==KW_CASCADE||LA83_0==KW_RESTRICT) ) {
				alt83=1;
			}
			switch (alt83) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1265:181: restrictOrCascade
					{
					pushFollow(FOLLOW_restrictOrCascade_in_alterStatementSuffixRenameCol5528);
					restrictOrCascade300=restrictOrCascade();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_restrictOrCascade.add(restrictOrCascade300.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: newName, colType, alterStatementChangeColPosition, oldName, alterColumnConstraint, comment, restrictOrCascade
			// token labels: comment
			// rule labels: newName, oldName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_newName=new RewriteRuleSubtreeStream(adaptor,"rule newName",newName!=null?newName.getTree():null);
			RewriteRuleSubtreeStream stream_oldName=new RewriteRuleSubtreeStream(adaptor,"rule oldName",oldName!=null?oldName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1266:5: -> ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterColumnConstraint )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1266:7: ^( TOK_ALTERTABLE_RENAMECOL $oldName $newName colType ( $comment)? ( alterColumnConstraint )? ( alterStatementChangeColPosition )? ( restrictOrCascade )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_RENAMECOL, "TOK_ALTERTABLE_RENAMECOL"), root_1);
				adaptor.addChild(root_1, stream_oldName.nextTree());
				adaptor.addChild(root_1, stream_newName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1266:61: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1266:70: ( alterColumnConstraint )?
				if ( stream_alterColumnConstraint.hasNext() ) {
					adaptor.addChild(root_1, stream_alterColumnConstraint.nextTree());
				}
				stream_alterColumnConstraint.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1266:93: ( alterStatementChangeColPosition )?
				if ( stream_alterStatementChangeColPosition.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementChangeColPosition.nextTree());
				}
				stream_alterStatementChangeColPosition.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1266:126: ( restrictOrCascade )?
				if ( stream_restrictOrCascade.hasNext() ) {
					adaptor.addChild(root_1, stream_restrictOrCascade.nextTree());
				}
				stream_restrictOrCascade.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRenameCol"


	public static class alterStatementSuffixUpdateStatsCol_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUpdateStatsCol"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1269:1: alterStatementSuffixUpdateStatsCol : KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) ;
	public final HiveASTParser.alterStatementSuffixUpdateStatsCol_return alterStatementSuffixUpdateStatsCol() throws RecognitionException {
		HiveASTParser.alterStatementSuffixUpdateStatsCol_return retval = new HiveASTParser.alterStatementSuffixUpdateStatsCol_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token comment=null;
		Token KW_UPDATE301=null;
		Token KW_STATISTICS302=null;
		Token KW_FOR303=null;
		Token KW_COLUMN304=null;
		Token KW_SET305=null;
		Token KW_COMMENT307=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope tableProperties306 =null;

		HiveParserASTNode comment_tree=null;
		HiveParserASTNode KW_UPDATE301_tree=null;
		HiveParserASTNode KW_STATISTICS302_tree=null;
		HiveParserASTNode KW_FOR303_tree=null;
		HiveParserASTNode KW_COLUMN304_tree=null;
		HiveParserASTNode KW_SET305_tree=null;
		HiveParserASTNode KW_COMMENT307_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("update column statistics", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1272:5: ( KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1272:7: KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )?
			{
			KW_UPDATE301=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStatsCol5586); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE301);

			KW_STATISTICS302=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStatsCol5588); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS302);

			KW_FOR303=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_alterStatementSuffixUpdateStatsCol5590); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR303);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1272:38: ( KW_COLUMN )?
			int alt84=2;
			int LA84_0 = input.LA(1);
			if ( (LA84_0==KW_COLUMN) ) {
				alt84=1;
			}
			switch (alt84) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1272:38: KW_COLUMN
					{
					KW_COLUMN304=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixUpdateStatsCol5592); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN304);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixUpdateStatsCol5597);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			KW_SET305=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixUpdateStatsCol5599); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET305);

			pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixUpdateStatsCol5601);
			tableProperties306=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties306.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1272:91: ( KW_COMMENT comment= StringLiteral )?
			int alt85=2;
			int LA85_0 = input.LA(1);
			if ( (LA85_0==KW_COMMENT) ) {
				alt85=1;
			}
			switch (alt85) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1272:92: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT307=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixUpdateStatsCol5604); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT307);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixUpdateStatsCol5608); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: tableProperties, comment, colName
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1273:5: -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1273:7: ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_UPDATECOLSTATS, "TOK_ALTERTABLE_UPDATECOLSTATS"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_tableProperties.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1273:65: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUpdateStatsCol"


	public static class alterStatementSuffixUpdateStats_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUpdateStats"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1276:1: alterStatementSuffixUpdateStats : KW_UPDATE KW_STATISTICS KW_SET tableProperties -> ^( TOK_ALTERTABLE_UPDATESTATS tableProperties ) ;
	public final HiveASTParser.alterStatementSuffixUpdateStats_return alterStatementSuffixUpdateStats() throws RecognitionException {
		HiveASTParser.alterStatementSuffixUpdateStats_return retval = new HiveASTParser.alterStatementSuffixUpdateStats_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_UPDATE308=null;
		Token KW_STATISTICS309=null;
		Token KW_SET310=null;
		ParserRuleReturnScope tableProperties311 =null;

		HiveParserASTNode KW_UPDATE308_tree=null;
		HiveParserASTNode KW_STATISTICS309_tree=null;
		HiveParserASTNode KW_SET310_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("update basic statistics", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1279:5: ( KW_UPDATE KW_STATISTICS KW_SET tableProperties -> ^( TOK_ALTERTABLE_UPDATESTATS tableProperties ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1279:7: KW_UPDATE KW_STATISTICS KW_SET tableProperties
			{
			KW_UPDATE308=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStats5655); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE308);

			KW_STATISTICS309=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStats5657); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS309);

			KW_SET310=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixUpdateStats5659); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET310);

			pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixUpdateStats5661);
			tableProperties311=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties311.getTree());
			// AST REWRITE
			// elements: tableProperties
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1280:5: -> ^( TOK_ALTERTABLE_UPDATESTATS tableProperties )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1280:7: ^( TOK_ALTERTABLE_UPDATESTATS tableProperties )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_UPDATESTATS, "TOK_ALTERTABLE_UPDATESTATS"), root_1);
				adaptor.addChild(root_1, stream_tableProperties.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUpdateStats"


	public static class alterStatementChangeColPosition_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementChangeColPosition"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1283:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );
	public final HiveASTParser.alterStatementChangeColPosition_return alterStatementChangeColPosition() throws RecognitionException {
		HiveASTParser.alterStatementChangeColPosition_return retval = new HiveASTParser.alterStatementChangeColPosition_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token first=null;
		Token KW_AFTER312=null;
		ParserRuleReturnScope afterCol =null;

		HiveParserASTNode first_tree=null;
		HiveParserASTNode KW_AFTER312_tree=null;
		RewriteRuleTokenStream stream_KW_AFTER=new RewriteRuleTokenStream(adaptor,"token KW_AFTER");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1284:5: (first= KW_FIRST | KW_AFTER afterCol= identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) )
			int alt86=2;
			int LA86_0 = input.LA(1);
			if ( (LA86_0==KW_FIRST) ) {
				alt86=1;
			}
			else if ( (LA86_0==KW_AFTER) ) {
				alt86=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 86, 0, input);
				throw nvae;
			}

			switch (alt86) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1284:7: first= KW_FIRST
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					first=(Token)match(input,KW_FIRST,FOLLOW_KW_FIRST_in_alterStatementChangeColPosition5691); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					first_tree = (HiveParserASTNode)adaptor.create(first);
					adaptor.addChild(root_0, first_tree);
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1284:22: KW_AFTER afterCol= identifier
					{
					KW_AFTER312=(Token)match(input,KW_AFTER,FOLLOW_KW_AFTER_in_alterStatementChangeColPosition5693); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_AFTER.add(KW_AFTER312);

					pushFollow(FOLLOW_identifier_in_alterStatementChangeColPosition5697);
					afterCol=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(afterCol.getTree());
					// AST REWRITE
					// elements: afterCol
					// token labels: 
					// rule labels: afterCol, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_afterCol=new RewriteRuleSubtreeStream(adaptor,"rule afterCol",afterCol!=null?afterCol.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1285:5: -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
					if (first != null) {
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1285:25: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}

					else // 1286:5: -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1286:8: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);
						adaptor.addChild(root_1, stream_afterCol.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementChangeColPosition"


	public static class alterStatementSuffixAddPartitions_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddPartitions"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1289:1: alterStatementSuffixAddPartitions[boolean table] : KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) ;
	public final HiveASTParser.alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions(boolean table) throws RecognitionException {
		HiveASTParser.alterStatementSuffixAddPartitions_return retval = new HiveASTParser.alterStatementSuffixAddPartitions_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ADD313=null;
		ParserRuleReturnScope ifNotExists314 =null;
		ParserRuleReturnScope alterStatementSuffixAddPartitionsElement315 =null;

		HiveParserASTNode KW_ADD313_tree=null;
		RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_alterStatementSuffixAddPartitionsElement=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixAddPartitionsElement");

		 pushMsg("add partition statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1292:5: ( KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1292:7: KW_ADD ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+
			{
			KW_ADD313=(Token)match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions5750); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADD.add(KW_ADD313);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1292:14: ( ifNotExists )?
			int alt87=2;
			int LA87_0 = input.LA(1);
			if ( (LA87_0==KW_IF) ) {
				alt87=1;
			}
			switch (alt87) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1292:14: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions5752);
					ifNotExists314=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists314.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1292:27: ( alterStatementSuffixAddPartitionsElement )+
			int cnt88=0;
			loop88:
			while (true) {
				int alt88=2;
				int LA88_0 = input.LA(1);
				if ( (LA88_0==KW_PARTITION) ) {
					alt88=1;
				}

				switch (alt88) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1292:27: alterStatementSuffixAddPartitionsElement
					{
					pushFollow(FOLLOW_alterStatementSuffixAddPartitionsElement_in_alterStatementSuffixAddPartitions5755);
					alterStatementSuffixAddPartitionsElement315=alterStatementSuffixAddPartitionsElement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_alterStatementSuffixAddPartitionsElement.add(alterStatementSuffixAddPartitionsElement315.getTree());
					}
					break;

				default :
					if ( cnt88 >= 1 ) break loop88;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(88, input);
					throw eee;
				}
				cnt88++;
			}

			// AST REWRITE
			// elements: alterStatementSuffixAddPartitionsElement, ifNotExists, alterStatementSuffixAddPartitionsElement, ifNotExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1293:5: -> { table }? ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
			if ( table ) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1293:19: ^( TOK_ALTERTABLE_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_ADDPARTS, "TOK_ALTERTABLE_ADDPARTS"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1293:45: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				if ( !(stream_alterStatementSuffixAddPartitionsElement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_alterStatementSuffixAddPartitionsElement.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitionsElement.nextTree());
				}
				stream_alterStatementSuffixAddPartitionsElement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1294:5: -> ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1294:19: ^( TOK_ALTERVIEW_ADDPARTS ( ifNotExists )? ( alterStatementSuffixAddPartitionsElement )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERVIEW_ADDPARTS, "TOK_ALTERVIEW_ADDPARTS"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1294:44: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				if ( !(stream_alterStatementSuffixAddPartitionsElement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_alterStatementSuffixAddPartitionsElement.hasNext() ) {
					adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitionsElement.nextTree());
				}
				stream_alterStatementSuffixAddPartitionsElement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddPartitions"


	public static class alterStatementSuffixAddPartitionsElement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixAddPartitionsElement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1297:1: alterStatementSuffixAddPartitionsElement : partitionSpec ( partitionLocation )? ;
	public final HiveASTParser.alterStatementSuffixAddPartitionsElement_return alterStatementSuffixAddPartitionsElement() throws RecognitionException {
		HiveASTParser.alterStatementSuffixAddPartitionsElement_return retval = new HiveASTParser.alterStatementSuffixAddPartitionsElement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope partitionSpec316 =null;
		ParserRuleReturnScope partitionLocation317 =null;


		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1298:5: ( partitionSpec ( partitionLocation )? )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1298:7: partitionSpec ( partitionLocation )?
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitionsElement5818);
			partitionSpec316=partitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, partitionSpec316.getTree());

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1298:21: ( partitionLocation )?
			int alt89=2;
			int LA89_0 = input.LA(1);
			if ( (LA89_0==KW_LOCATION) ) {
				alt89=1;
			}
			switch (alt89) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1298:21: partitionLocation
					{
					pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitionsElement5820);
					partitionLocation317=partitionLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, partitionLocation317.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixAddPartitionsElement"


	public static class alterStatementSuffixTouch_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixTouch"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1301:1: alterStatementSuffixTouch : KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* ) ;
	public final HiveASTParser.alterStatementSuffixTouch_return alterStatementSuffixTouch() throws RecognitionException {
		HiveASTParser.alterStatementSuffixTouch_return retval = new HiveASTParser.alterStatementSuffixTouch_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_TOUCH318=null;
		ParserRuleReturnScope partitionSpec319 =null;

		HiveParserASTNode KW_TOUCH318_tree=null;
		RewriteRuleTokenStream stream_KW_TOUCH=new RewriteRuleTokenStream(adaptor,"token KW_TOUCH");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("touch statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1304:5: ( KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1304:7: KW_TOUCH ( partitionSpec )*
			{
			KW_TOUCH318=(Token)match(input,KW_TOUCH,FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch5848); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TOUCH.add(KW_TOUCH318);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1304:16: ( partitionSpec )*
			loop90:
			while (true) {
				int alt90=2;
				int LA90_0 = input.LA(1);
				if ( (LA90_0==KW_PARTITION) ) {
					alt90=1;
				}

				switch (alt90) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1304:17: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixTouch5851);
					partitionSpec319=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec319.getTree());
					}
					break;

				default :
					break loop90;
				}
			}

			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1305:5: -> ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1305:8: ^( TOK_ALTERTABLE_TOUCH ( partitionSpec )* )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_TOUCH, "TOK_ALTERTABLE_TOUCH"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1305:31: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixTouch"


	public static class alterStatementSuffixArchive_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixArchive"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1308:1: alterStatementSuffixArchive : KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* ) ;
	public final HiveASTParser.alterStatementSuffixArchive_return alterStatementSuffixArchive() throws RecognitionException {
		HiveASTParser.alterStatementSuffixArchive_return retval = new HiveASTParser.alterStatementSuffixArchive_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ARCHIVE320=null;
		ParserRuleReturnScope partitionSpec321 =null;

		HiveParserASTNode KW_ARCHIVE320_tree=null;
		RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("archive statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1311:5: ( KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1311:7: KW_ARCHIVE ( partitionSpec )*
			{
			KW_ARCHIVE320=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive5895); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ARCHIVE.add(KW_ARCHIVE320);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1311:18: ( partitionSpec )*
			loop91:
			while (true) {
				int alt91=2;
				int LA91_0 = input.LA(1);
				if ( (LA91_0==KW_PARTITION) ) {
					alt91=1;
				}

				switch (alt91) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1311:19: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixArchive5898);
					partitionSpec321=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec321.getTree());
					}
					break;

				default :
					break loop91;
				}
			}

			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1312:5: -> ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1312:8: ^( TOK_ALTERTABLE_ARCHIVE ( partitionSpec )* )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_ARCHIVE, "TOK_ALTERTABLE_ARCHIVE"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1312:33: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixArchive"


	public static class alterStatementSuffixUnArchive_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixUnArchive"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1315:1: alterStatementSuffixUnArchive : KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* ) ;
	public final HiveASTParser.alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive() throws RecognitionException {
		HiveASTParser.alterStatementSuffixUnArchive_return retval = new HiveASTParser.alterStatementSuffixUnArchive_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_UNARCHIVE322=null;
		ParserRuleReturnScope partitionSpec323 =null;

		HiveParserASTNode KW_UNARCHIVE322_tree=null;
		RewriteRuleTokenStream stream_KW_UNARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_UNARCHIVE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("unarchive statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1318:5: ( KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1318:7: KW_UNARCHIVE ( partitionSpec )*
			{
			KW_UNARCHIVE322=(Token)match(input,KW_UNARCHIVE,FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive5942); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNARCHIVE.add(KW_UNARCHIVE322);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1318:20: ( partitionSpec )*
			loop92:
			while (true) {
				int alt92=2;
				int LA92_0 = input.LA(1);
				if ( (LA92_0==KW_PARTITION) ) {
					alt92=1;
				}

				switch (alt92) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1318:21: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive5945);
					partitionSpec323=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec323.getTree());
					}
					break;

				default :
					break loop92;
				}
			}

			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1319:5: -> ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1319:8: ^( TOK_ALTERTABLE_UNARCHIVE ( partitionSpec )* )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_UNARCHIVE, "TOK_ALTERTABLE_UNARCHIVE"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1319:35: ( partitionSpec )*
				while ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixUnArchive"


	public static class partitionLocation_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "partitionLocation"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1322:1: partitionLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) ;
	public final HiveASTParser.partitionLocation_return partitionLocation() throws RecognitionException {
		HiveASTParser.partitionLocation_return retval = new HiveASTParser.partitionLocation_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token locn=null;
		Token KW_LOCATION324=null;

		HiveParserASTNode locn_tree=null;
		HiveParserASTNode KW_LOCATION324_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg("partition location", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1325:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1326:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION324=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_partitionLocation5995); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION324);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_partitionLocation5999); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1326:38: -> ^( TOK_PARTITIONLOCATION $locn)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1326:41: ^( TOK_PARTITIONLOCATION $locn)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PARTITIONLOCATION, "TOK_PARTITIONLOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partitionLocation"


	public static class alterStatementSuffixDropPartitions_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixDropPartitions"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1329:1: alterStatementSuffixDropPartitions[boolean table] : KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( KW_PURGE )? ( replicationClause )? -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? ) ;
	public final HiveASTParser.alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions(boolean table) throws RecognitionException {
		HiveASTParser.alterStatementSuffixDropPartitions_return retval = new HiveASTParser.alterStatementSuffixDropPartitions_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_DROP325=null;
		Token COMMA328=null;
		Token KW_PURGE330=null;
		ParserRuleReturnScope ifExists326 =null;
		ParserRuleReturnScope dropPartitionSpec327 =null;
		ParserRuleReturnScope dropPartitionSpec329 =null;
		ParserRuleReturnScope replicationClause331 =null;

		HiveParserASTNode KW_DROP325_tree=null;
		HiveParserASTNode COMMA328_tree=null;
		HiveParserASTNode KW_PURGE330_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_PURGE=new RewriteRuleTokenStream(adaptor,"token KW_PURGE");
		RewriteRuleSubtreeStream stream_dropPartitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionSpec");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_replicationClause=new RewriteRuleSubtreeStream(adaptor,"rule replicationClause");

		 pushMsg("drop partition statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1332:5: ( KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( KW_PURGE )? ( replicationClause )? -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? ) -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1332:7: KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( KW_PURGE )? ( replicationClause )?
			{
			KW_DROP325=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions6036); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP325);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1332:15: ( ifExists )?
			int alt93=2;
			int LA93_0 = input.LA(1);
			if ( (LA93_0==KW_IF) ) {
				alt93=1;
			}
			switch (alt93) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1332:15: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_alterStatementSuffixDropPartitions6038);
					ifExists326=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists326.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions6041);
			dropPartitionSpec327=dropPartitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_dropPartitionSpec.add(dropPartitionSpec327.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1332:43: ( COMMA dropPartitionSpec )*
			loop94:
			while (true) {
				int alt94=2;
				int LA94_0 = input.LA(1);
				if ( (LA94_0==COMMA) ) {
					alt94=1;
				}

				switch (alt94) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1332:44: COMMA dropPartitionSpec
					{
					COMMA328=(Token)match(input,COMMA,FOLLOW_COMMA_in_alterStatementSuffixDropPartitions6044); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA328);

					pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions6046);
					dropPartitionSpec329=dropPartitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_dropPartitionSpec.add(dropPartitionSpec329.getTree());
					}
					break;

				default :
					break loop94;
				}
			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1332:70: ( KW_PURGE )?
			int alt95=2;
			int LA95_0 = input.LA(1);
			if ( (LA95_0==KW_PURGE) ) {
				alt95=1;
			}
			switch (alt95) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1332:70: KW_PURGE
					{
					KW_PURGE330=(Token)match(input,KW_PURGE,FOLLOW_KW_PURGE_in_alterStatementSuffixDropPartitions6050); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_PURGE.add(KW_PURGE330);

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1332:80: ( replicationClause )?
			int alt96=2;
			int LA96_0 = input.LA(1);
			if ( (LA96_0==KW_FOR) ) {
				alt96=1;
			}
			switch (alt96) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1332:80: replicationClause
					{
					pushFollow(FOLLOW_replicationClause_in_alterStatementSuffixDropPartitions6053);
					replicationClause331=replicationClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_replicationClause.add(replicationClause331.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: KW_PURGE, ifExists, dropPartitionSpec, dropPartitionSpec, ifExists, replicationClause, replicationClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1333:5: -> { table }? ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
			if ( table ) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1333:19: ^( TOK_ALTERTABLE_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( KW_PURGE )? ( replicationClause )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_DROPPARTS, "TOK_ALTERTABLE_DROPPARTS"), root_1);
				if ( !(stream_dropPartitionSpec.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_dropPartitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_dropPartitionSpec.nextTree());
				}
				stream_dropPartitionSpec.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1333:65: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1333:75: ( KW_PURGE )?
				if ( stream_KW_PURGE.hasNext() ) {
					adaptor.addChild(root_1, stream_KW_PURGE.nextNode());
				}
				stream_KW_PURGE.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1333:85: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1334:5: -> ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1334:19: ^( TOK_ALTERVIEW_DROPPARTS ( dropPartitionSpec )+ ( ifExists )? ( replicationClause )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERVIEW_DROPPARTS, "TOK_ALTERVIEW_DROPPARTS"), root_1);
				if ( !(stream_dropPartitionSpec.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_dropPartitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_dropPartitionSpec.nextTree());
				}
				stream_dropPartitionSpec.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1334:64: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1334:74: ( replicationClause )?
				if ( stream_replicationClause.hasNext() ) {
					adaptor.addChild(root_1, stream_replicationClause.nextTree());
				}
				stream_replicationClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixDropPartitions"


	public static class alterStatementSuffixProperties_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixProperties"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1337:1: alterStatementSuffixProperties : ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? ) );
	public final HiveASTParser.alterStatementSuffixProperties_return alterStatementSuffixProperties() throws RecognitionException {
		HiveASTParser.alterStatementSuffixProperties_return retval = new HiveASTParser.alterStatementSuffixProperties_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SET332=null;
		Token KW_TBLPROPERTIES333=null;
		Token KW_UNSET335=null;
		Token KW_TBLPROPERTIES336=null;
		ParserRuleReturnScope tableProperties334 =null;
		ParserRuleReturnScope ifExists337 =null;
		ParserRuleReturnScope tableProperties338 =null;

		HiveParserASTNode KW_SET332_tree=null;
		HiveParserASTNode KW_TBLPROPERTIES333_tree=null;
		HiveParserASTNode KW_UNSET335_tree=null;
		HiveParserASTNode KW_TBLPROPERTIES336_tree=null;
		RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("alter properties statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1340:5: ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? ) )
			int alt98=2;
			int LA98_0 = input.LA(1);
			if ( (LA98_0==KW_SET) ) {
				alt98=1;
			}
			else if ( (LA98_0==KW_UNSET) ) {
				alt98=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 98, 0, input);
				throw nvae;
			}

			switch (alt98) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1340:7: KW_SET KW_TBLPROPERTIES tableProperties
					{
					KW_SET332=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixProperties6135); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET332);

					KW_TBLPROPERTIES333=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties6137); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES333);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties6139);
					tableProperties334=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties334.getTree());
					// AST REWRITE
					// elements: tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1341:5: -> ^( TOK_ALTERTABLE_PROPERTIES tableProperties )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1341:8: ^( TOK_ALTERTABLE_PROPERTIES tableProperties )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_PROPERTIES, "TOK_ALTERTABLE_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1342:7: KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
					{
					KW_UNSET335=(Token)match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterStatementSuffixProperties6159); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNSET.add(KW_UNSET335);

					KW_TBLPROPERTIES336=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties6161); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES336);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1342:33: ( ifExists )?
					int alt97=2;
					int LA97_0 = input.LA(1);
					if ( (LA97_0==KW_IF) ) {
						alt97=1;
					}
					switch (alt97) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1342:33: ifExists
							{
							pushFollow(FOLLOW_ifExists_in_alterStatementSuffixProperties6163);
							ifExists337=ifExists();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_ifExists.add(ifExists337.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties6166);
					tableProperties338=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties338.getTree());
					// AST REWRITE
					// elements: tableProperties, ifExists
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1343:5: -> ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1343:8: ^( TOK_ALTERTABLE_DROPPROPERTIES tableProperties ( ifExists )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_DROPPROPERTIES, "TOK_ALTERTABLE_DROPPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1343:56: ( ifExists )?
						if ( stream_ifExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifExists.nextTree());
						}
						stream_ifExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixProperties"


	public static class alterViewSuffixProperties_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterViewSuffixProperties"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1346:1: alterViewSuffixProperties : ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? ) );
	public final HiveASTParser.alterViewSuffixProperties_return alterViewSuffixProperties() throws RecognitionException {
		HiveASTParser.alterViewSuffixProperties_return retval = new HiveASTParser.alterViewSuffixProperties_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SET339=null;
		Token KW_TBLPROPERTIES340=null;
		Token KW_UNSET342=null;
		Token KW_TBLPROPERTIES343=null;
		ParserRuleReturnScope tableProperties341 =null;
		ParserRuleReturnScope ifExists344 =null;
		ParserRuleReturnScope tableProperties345 =null;

		HiveParserASTNode KW_SET339_tree=null;
		HiveParserASTNode KW_TBLPROPERTIES340_tree=null;
		HiveParserASTNode KW_UNSET342_tree=null;
		HiveParserASTNode KW_TBLPROPERTIES343_tree=null;
		RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("alter view properties statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1349:5: ( KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties ) | KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? ) )
			int alt100=2;
			int LA100_0 = input.LA(1);
			if ( (LA100_0==KW_SET) ) {
				alt100=1;
			}
			else if ( (LA100_0==KW_UNSET) ) {
				alt100=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 100, 0, input);
				throw nvae;
			}

			switch (alt100) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1349:7: KW_SET KW_TBLPROPERTIES tableProperties
					{
					KW_SET339=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterViewSuffixProperties6208); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET339);

					KW_TBLPROPERTIES340=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties6210); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES340);

					pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties6212);
					tableProperties341=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties341.getTree());
					// AST REWRITE
					// elements: tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1350:5: -> ^( TOK_ALTERVIEW_PROPERTIES tableProperties )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1350:8: ^( TOK_ALTERVIEW_PROPERTIES tableProperties )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERVIEW_PROPERTIES, "TOK_ALTERVIEW_PROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1351:7: KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
					{
					KW_UNSET342=(Token)match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterViewSuffixProperties6232); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNSET.add(KW_UNSET342);

					KW_TBLPROPERTIES343=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties6234); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES343);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1351:33: ( ifExists )?
					int alt99=2;
					int LA99_0 = input.LA(1);
					if ( (LA99_0==KW_IF) ) {
						alt99=1;
					}
					switch (alt99) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1351:33: ifExists
							{
							pushFollow(FOLLOW_ifExists_in_alterViewSuffixProperties6236);
							ifExists344=ifExists();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_ifExists.add(ifExists344.getTree());
							}
							break;

					}

					pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties6239);
					tableProperties345=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties345.getTree());
					// AST REWRITE
					// elements: tableProperties, ifExists
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1352:5: -> ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1352:8: ^( TOK_ALTERVIEW_DROPPROPERTIES tableProperties ( ifExists )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERVIEW_DROPPROPERTIES, "TOK_ALTERVIEW_DROPPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1352:55: ( ifExists )?
						if ( stream_ifExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifExists.nextTree());
						}
						stream_ifExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterViewSuffixProperties"


	public static class alterStatementSuffixSerdeProperties_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixSerdeProperties"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1355:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );
	public final HiveASTParser.alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties() throws RecognitionException {
		HiveASTParser.alterStatementSuffixSerdeProperties_return retval = new HiveASTParser.alterStatementSuffixSerdeProperties_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token serdeName=null;
		Token KW_SET346=null;
		Token KW_SERDE347=null;
		Token KW_WITH348=null;
		Token KW_SERDEPROPERTIES349=null;
		Token KW_SET351=null;
		Token KW_SERDEPROPERTIES352=null;
		ParserRuleReturnScope tableProperties350 =null;
		ParserRuleReturnScope tableProperties353 =null;

		HiveParserASTNode serdeName_tree=null;
		HiveParserASTNode KW_SET346_tree=null;
		HiveParserASTNode KW_SERDE347_tree=null;
		HiveParserASTNode KW_WITH348_tree=null;
		HiveParserASTNode KW_SERDEPROPERTIES349_tree=null;
		HiveParserASTNode KW_SET351_tree=null;
		HiveParserASTNode KW_SERDEPROPERTIES352_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("alter serdes statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1358:5: ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) )
			int alt102=2;
			int LA102_0 = input.LA(1);
			if ( (LA102_0==KW_SET) ) {
				int LA102_1 = input.LA(2);
				if ( (LA102_1==KW_SERDE) ) {
					alt102=1;
				}
				else if ( (LA102_1==KW_SERDEPROPERTIES) ) {
					alt102=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 102, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 102, 0, input);
				throw nvae;
			}

			switch (alt102) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1358:7: KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
					{
					KW_SET346=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties6281); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET346);

					KW_SERDE347=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties6283); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE347);

					serdeName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties6287); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(serdeName);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1358:47: ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
					int alt101=2;
					int LA101_0 = input.LA(1);
					if ( (LA101_0==KW_WITH) ) {
						alt101=1;
					}
					switch (alt101) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1358:48: KW_WITH KW_SERDEPROPERTIES tableProperties
							{
							KW_WITH348=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties6290); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH348);

							KW_SERDEPROPERTIES349=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties6292); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES349);

							pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties6294);
							tableProperties350=tableProperties();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties350.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: serdeName, tableProperties
					// token labels: serdeName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_serdeName=new RewriteRuleTokenStream(adaptor,"token serdeName",serdeName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1359:5: -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1359:8: ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_SERIALIZER, "TOK_ALTERTABLE_SERIALIZER"), root_1);
						adaptor.addChild(root_1, stream_serdeName.nextNode());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1359:47: ( tableProperties )?
						if ( stream_tableProperties.hasNext() ) {
							adaptor.addChild(root_1, stream_tableProperties.nextTree());
						}
						stream_tableProperties.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1360:7: KW_SET KW_SERDEPROPERTIES tableProperties
					{
					KW_SET351=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties6320); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET351);

					KW_SERDEPROPERTIES352=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties6322); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES352);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties6324);
					tableProperties353=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties353.getTree());
					// AST REWRITE
					// elements: tableProperties
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1361:5: -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1361:8: ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_SERDEPROPERTIES, "TOK_ALTERTABLE_SERDEPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableProperties.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixSerdeProperties"


	public static class tablePartitionPrefix_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tablePartitionPrefix"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1364:1: tablePartitionPrefix : tableName ( partitionSpec )? -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? ) ;
	public final HiveASTParser.tablePartitionPrefix_return tablePartitionPrefix() throws RecognitionException {
		HiveASTParser.tablePartitionPrefix_return retval = new HiveASTParser.tablePartitionPrefix_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope tableName354 =null;
		ParserRuleReturnScope partitionSpec355 =null;

		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		pushMsg("table partition prefix", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1367:3: ( tableName ( partitionSpec )? -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1367:5: tableName ( partitionSpec )?
			{
			pushFollow(FOLLOW_tableName_in_tablePartitionPrefix6361);
			tableName354=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName354.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1367:15: ( partitionSpec )?
			int alt103=2;
			int LA103_0 = input.LA(1);
			if ( (LA103_0==KW_PARTITION) ) {
				alt103=1;
			}
			switch (alt103) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1367:15: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_tablePartitionPrefix6363);
					partitionSpec355=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec355.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1368:3: -> ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1368:5: ^( TOK_TABLE_PARTITION tableName ( partitionSpec )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLE_PARTITION, "TOK_TABLE_PARTITION"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1368:37: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePartitionPrefix"


	public static class alterStatementSuffixFileFormat_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixFileFormat"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1371:1: alterStatementSuffixFileFormat : KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) ;
	public final HiveASTParser.alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat() throws RecognitionException {
		HiveASTParser.alterStatementSuffixFileFormat_return retval = new HiveASTParser.alterStatementSuffixFileFormat_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SET356=null;
		Token KW_FILEFORMAT357=null;
		ParserRuleReturnScope fileFormat358 =null;

		HiveParserASTNode KW_SET356_tree=null;
		HiveParserASTNode KW_FILEFORMAT357_tree=null;
		RewriteRuleTokenStream stream_KW_FILEFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FILEFORMAT");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_fileFormat=new RewriteRuleSubtreeStream(adaptor,"rule fileFormat");

		pushMsg("alter fileformat statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1374:2: ( KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1374:4: KW_SET KW_FILEFORMAT fileFormat
			{
			KW_SET356=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixFileFormat6398); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET356);

			KW_FILEFORMAT357=(Token)match(input,KW_FILEFORMAT,FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat6400); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FILEFORMAT.add(KW_FILEFORMAT357);

			pushFollow(FOLLOW_fileFormat_in_alterStatementSuffixFileFormat6402);
			fileFormat358=fileFormat();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_fileFormat.add(fileFormat358.getTree());
			// AST REWRITE
			// elements: fileFormat
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1375:2: -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1375:5: ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_FILEFORMAT, "TOK_ALTERTABLE_FILEFORMAT"), root_1);
				adaptor.addChild(root_1, stream_fileFormat.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixFileFormat"


	public static class alterStatementSuffixClusterbySortby_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixClusterbySortby"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1378:1: alterStatementSuffixClusterbySortby : ( KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED ) | KW_NOT KW_SORTED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED ) | tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets ) );
	public final HiveASTParser.alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby() throws RecognitionException {
		HiveASTParser.alterStatementSuffixClusterbySortby_return retval = new HiveASTParser.alterStatementSuffixClusterbySortby_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_NOT359=null;
		Token KW_CLUSTERED360=null;
		Token KW_NOT361=null;
		Token KW_SORTED362=null;
		ParserRuleReturnScope tableBuckets363 =null;

		HiveParserASTNode KW_NOT359_tree=null;
		HiveParserASTNode KW_CLUSTERED360_tree=null;
		HiveParserASTNode KW_NOT361_tree=null;
		HiveParserASTNode KW_SORTED362_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
		RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
		RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");

		pushMsg("alter partition cluster by sort by statement", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1381:3: ( KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED ) | KW_NOT KW_SORTED -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED ) | tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets ) )
			int alt104=3;
			int LA104_0 = input.LA(1);
			if ( (LA104_0==KW_NOT) ) {
				int LA104_1 = input.LA(2);
				if ( (LA104_1==KW_CLUSTERED) ) {
					alt104=1;
				}
				else if ( (LA104_1==KW_SORTED) ) {
					alt104=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 104, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA104_0==KW_CLUSTERED) ) {
				alt104=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 104, 0, input);
				throw nvae;
			}

			switch (alt104) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1381:5: KW_NOT KW_CLUSTERED
					{
					KW_NOT359=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby6433); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT359);

					KW_CLUSTERED360=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby6435); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CLUSTERED.add(KW_CLUSTERED360);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1381:25: -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1381:28: ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_CLUSTERED )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, (HiveParserASTNode)adaptor.create(TOK_NOT_CLUSTERED, "TOK_NOT_CLUSTERED"));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1382:5: KW_NOT KW_SORTED
					{
					KW_NOT361=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby6449); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT361);

					KW_SORTED362=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_alterStatementSuffixClusterbySortby6451); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SORTED.add(KW_SORTED362);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1382:22: -> ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1382:25: ^( TOK_ALTERTABLE_CLUSTER_SORT TOK_NOT_SORTED )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, (HiveParserASTNode)adaptor.create(TOK_NOT_SORTED, "TOK_NOT_SORTED"));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1383:5: tableBuckets
					{
					pushFollow(FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby6465);
					tableBuckets363=tableBuckets();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableBuckets.add(tableBuckets363.getTree());
					// AST REWRITE
					// elements: tableBuckets
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1383:18: -> ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1383:21: ^( TOK_ALTERTABLE_CLUSTER_SORT tableBuckets )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);
						adaptor.addChild(root_1, stream_tableBuckets.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixClusterbySortby"


	public static class alterTblPartitionStatementSuffixSkewedLocation_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterTblPartitionStatementSuffixSkewedLocation"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1386:1: alterTblPartitionStatementSuffixSkewedLocation : KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations ) ;
	public final HiveASTParser.alterTblPartitionStatementSuffixSkewedLocation_return alterTblPartitionStatementSuffixSkewedLocation() throws RecognitionException {
		HiveASTParser.alterTblPartitionStatementSuffixSkewedLocation_return retval = new HiveASTParser.alterTblPartitionStatementSuffixSkewedLocation_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SET364=null;
		Token KW_SKEWED365=null;
		Token KW_LOCATION366=null;
		ParserRuleReturnScope skewedLocations367 =null;

		HiveParserASTNode KW_SET364_tree=null;
		HiveParserASTNode KW_SKEWED365_tree=null;
		HiveParserASTNode KW_LOCATION366_tree=null;
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_skewedLocations=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocations");

		pushMsg("alter partition skewed location", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1389:3: ( KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1389:5: KW_SET KW_SKEWED KW_LOCATION skewedLocations
			{
			KW_SET364=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation6496); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET364);

			KW_SKEWED365=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation6498); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED365);

			KW_LOCATION366=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation6500); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION366);

			pushFollow(FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation6502);
			skewedLocations367=skewedLocations();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedLocations.add(skewedLocations367.getTree());
			// AST REWRITE
			// elements: skewedLocations
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1390:3: -> ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1390:6: ^( TOK_ALTERTABLE_SKEWED_LOCATION skewedLocations )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_SKEWED_LOCATION, "TOK_ALTERTABLE_SKEWED_LOCATION"), root_1);
				adaptor.addChild(root_1, stream_skewedLocations.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterTblPartitionStatementSuffixSkewedLocation"


	public static class skewedLocations_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedLocations"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1393:1: skewedLocations : LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) ;
	public final HiveASTParser.skewedLocations_return skewedLocations() throws RecognitionException {
		HiveASTParser.skewedLocations_return retval = new HiveASTParser.skewedLocations_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token LPAREN368=null;
		Token RPAREN370=null;
		ParserRuleReturnScope skewedLocationsList369 =null;

		HiveParserASTNode LPAREN368_tree=null;
		HiveParserASTNode RPAREN370_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_skewedLocationsList=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationsList");

		 pushMsg("skewed locations", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1396:5: ( LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1397:7: LPAREN skewedLocationsList RPAREN
			{
			LPAREN368=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedLocations6545); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN368);

			pushFollow(FOLLOW_skewedLocationsList_in_skewedLocations6547);
			skewedLocationsList369=skewedLocationsList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedLocationsList.add(skewedLocationsList369.getTree());
			RPAREN370=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedLocations6549); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN370);

			// AST REWRITE
			// elements: skewedLocationsList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1397:41: -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1397:44: ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SKEWED_LOCATIONS, "TOK_SKEWED_LOCATIONS"), root_1);
				adaptor.addChild(root_1, stream_skewedLocationsList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocations"


	public static class skewedLocationsList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedLocationsList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1400:1: skewedLocationsList : skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) ;
	public final HiveASTParser.skewedLocationsList_return skewedLocationsList() throws RecognitionException {
		HiveASTParser.skewedLocationsList_return retval = new HiveASTParser.skewedLocationsList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA372=null;
		ParserRuleReturnScope skewedLocationMap371 =null;
		ParserRuleReturnScope skewedLocationMap373 =null;

		HiveParserASTNode COMMA372_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedLocationMap=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationMap");

		 pushMsg("skewed locations list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1403:5: ( skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1404:7: skewedLocationMap ( COMMA skewedLocationMap )*
			{
			pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList6590);
			skewedLocationMap371=skewedLocationMap();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedLocationMap.add(skewedLocationMap371.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1404:25: ( COMMA skewedLocationMap )*
			loop105:
			while (true) {
				int alt105=2;
				int LA105_0 = input.LA(1);
				if ( (LA105_0==COMMA) ) {
					alt105=1;
				}

				switch (alt105) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1404:26: COMMA skewedLocationMap
					{
					COMMA372=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedLocationsList6593); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA372);

					pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList6595);
					skewedLocationMap373=skewedLocationMap();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_skewedLocationMap.add(skewedLocationMap373.getTree());
					}
					break;

				default :
					break loop105;
				}
			}

			// AST REWRITE
			// elements: skewedLocationMap
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1404:52: -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1404:55: ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SKEWED_LOCATION_LIST, "TOK_SKEWED_LOCATION_LIST"), root_1);
				if ( !(stream_skewedLocationMap.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedLocationMap.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedLocationMap.nextTree());
				}
				stream_skewedLocationMap.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocationsList"


	public static class skewedLocationMap_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedLocationMap"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1407:1: skewedLocationMap : key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) ;
	public final HiveASTParser.skewedLocationMap_return skewedLocationMap() throws RecognitionException {
		HiveASTParser.skewedLocationMap_return retval = new HiveASTParser.skewedLocationMap_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token value=null;
		Token EQUAL374=null;
		ParserRuleReturnScope key =null;

		HiveParserASTNode value_tree=null;
		HiveParserASTNode EQUAL374_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
		RewriteRuleSubtreeStream stream_skewedValueLocationElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueLocationElement");

		 pushMsg("specifying skewed location map", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1410:5: (key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1411:7: key= skewedValueLocationElement EQUAL value= StringLiteral
			{
			pushFollow(FOLLOW_skewedValueLocationElement_in_skewedLocationMap6641);
			key=skewedValueLocationElement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedValueLocationElement.add(key.getTree());
			EQUAL374=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_skewedLocationMap6643); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL374);

			value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_skewedLocationMap6647); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(value);

			// AST REWRITE
			// elements: value, key
			// token labels: value
			// rule labels: key, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
			RewriteRuleSubtreeStream stream_key=new RewriteRuleSubtreeStream(adaptor,"rule key",key!=null?key.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1411:64: -> ^( TOK_SKEWED_LOCATION_MAP $key $value)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1411:67: ^( TOK_SKEWED_LOCATION_MAP $key $value)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SKEWED_LOCATION_MAP, "TOK_SKEWED_LOCATION_MAP"), root_1);
				adaptor.addChild(root_1, stream_key.nextTree());
				adaptor.addChild(root_1, stream_value.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedLocationMap"


	public static class alterStatementSuffixLocation_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixLocation"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1414:1: alterStatementSuffixLocation : KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) ;
	public final HiveASTParser.alterStatementSuffixLocation_return alterStatementSuffixLocation() throws RecognitionException {
		HiveASTParser.alterStatementSuffixLocation_return retval = new HiveASTParser.alterStatementSuffixLocation_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token newLoc=null;
		Token KW_SET375=null;
		Token KW_LOCATION376=null;

		HiveParserASTNode newLoc_tree=null;
		HiveParserASTNode KW_SET375_tree=null;
		HiveParserASTNode KW_LOCATION376_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");

		pushMsg("alter location", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1417:3: ( KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1417:5: KW_SET KW_LOCATION newLoc= StringLiteral
			{
			KW_SET375=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixLocation6684); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET375);

			KW_LOCATION376=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation6686); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION376);

			newLoc=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixLocation6690); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(newLoc);

			// AST REWRITE
			// elements: newLoc
			// token labels: newLoc
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_newLoc=new RewriteRuleTokenStream(adaptor,"token newLoc",newLoc);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1418:3: -> ^( TOK_ALTERTABLE_LOCATION $newLoc)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1418:6: ^( TOK_ALTERTABLE_LOCATION $newLoc)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_LOCATION, "TOK_ALTERTABLE_LOCATION"), root_1);
				adaptor.addChild(root_1, stream_newLoc.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixLocation"


	public static class alterStatementSuffixSkewedby_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixSkewedby"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1422:1: alterStatementSuffixSkewedby : ( tableSkewed -> ^( TOK_ALTERTABLE_SKEWED tableSkewed ) | KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED ) | KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs ) );
	public final HiveASTParser.alterStatementSuffixSkewedby_return alterStatementSuffixSkewedby() throws RecognitionException {
		HiveASTParser.alterStatementSuffixSkewedby_return retval = new HiveASTParser.alterStatementSuffixSkewedby_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_NOT378=null;
		Token KW_SKEWED379=null;
		Token KW_NOT380=null;
		ParserRuleReturnScope tableSkewed377 =null;
		ParserRuleReturnScope storedAsDirs381 =null;

		HiveParserASTNode KW_NOT378_tree=null;
		HiveParserASTNode KW_SKEWED379_tree=null;
		HiveParserASTNode KW_NOT380_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
		RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");

		pushMsg("alter skewed by statement", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1425:2: ( tableSkewed -> ^( TOK_ALTERTABLE_SKEWED tableSkewed ) | KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED ) | KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs ) )
			int alt106=3;
			int LA106_0 = input.LA(1);
			if ( (LA106_0==KW_SKEWED) ) {
				alt106=1;
			}
			else if ( (LA106_0==KW_NOT) ) {
				int LA106_2 = input.LA(2);
				if ( (LA106_2==KW_SKEWED) ) {
					alt106=2;
				}
				else if ( (LA106_2==KW_STORED) ) {
					alt106=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 106, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 106, 0, input);
				throw nvae;
			}

			switch (alt106) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1425:4: tableSkewed
					{
					pushFollow(FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby6724);
					tableSkewed377=tableSkewed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableSkewed.add(tableSkewed377.getTree());
					// AST REWRITE
					// elements: tableSkewed
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1426:2: -> ^( TOK_ALTERTABLE_SKEWED tableSkewed )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1426:4: ^( TOK_ALTERTABLE_SKEWED tableSkewed )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_1, stream_tableSkewed.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1428:3: KW_NOT KW_SKEWED
					{
					KW_NOT378=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby6739); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT378);

					KW_SKEWED379=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby6741); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED379);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1429:2: -> ^( TOK_ALTERTABLE_SKEWED )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1429:4: ^( TOK_ALTERTABLE_SKEWED )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1431:3: KW_NOT storedAsDirs
					{
					KW_NOT380=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby6754); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT380);

					pushFollow(FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby6756);
					storedAsDirs381=storedAsDirs();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_storedAsDirs.add(storedAsDirs381.getTree());
					// AST REWRITE
					// elements: storedAsDirs
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1432:2: -> ^( TOK_ALTERTABLE_SKEWED storedAsDirs )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1432:4: ^( TOK_ALTERTABLE_SKEWED storedAsDirs )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);
						adaptor.addChild(root_1, stream_storedAsDirs.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixSkewedby"


	public static class alterStatementSuffixExchangePartition_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixExchangePartition"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1435:1: alterStatementSuffixExchangePartition : KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename) ;
	public final HiveASTParser.alterStatementSuffixExchangePartition_return alterStatementSuffixExchangePartition() throws RecognitionException {
		HiveASTParser.alterStatementSuffixExchangePartition_return retval = new HiveASTParser.alterStatementSuffixExchangePartition_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_EXCHANGE382=null;
		Token KW_WITH384=null;
		Token KW_TABLE385=null;
		ParserRuleReturnScope exchangename =null;
		ParserRuleReturnScope partitionSpec383 =null;

		HiveParserASTNode KW_EXCHANGE382_tree=null;
		HiveParserASTNode KW_WITH384_tree=null;
		HiveParserASTNode KW_TABLE385_tree=null;
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_EXCHANGE=new RewriteRuleTokenStream(adaptor,"token KW_EXCHANGE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		pushMsg("alter exchange partition", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1438:5: ( KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1438:7: KW_EXCHANGE partitionSpec KW_WITH KW_TABLE exchangename= tableName
			{
			KW_EXCHANGE382=(Token)match(input,KW_EXCHANGE,FOLLOW_KW_EXCHANGE_in_alterStatementSuffixExchangePartition6787); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_EXCHANGE.add(KW_EXCHANGE382);

			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixExchangePartition6789);
			partitionSpec383=partitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec383.getTree());
			KW_WITH384=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixExchangePartition6791); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH384);

			KW_TABLE385=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatementSuffixExchangePartition6793); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE385);

			pushFollow(FOLLOW_tableName_in_alterStatementSuffixExchangePartition6797);
			exchangename=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(exchangename.getTree());
			// AST REWRITE
			// elements: partitionSpec, exchangename
			// token labels: 
			// rule labels: exchangename, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_exchangename=new RewriteRuleSubtreeStream(adaptor,"rule exchangename",exchangename!=null?exchangename.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1439:5: -> ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1439:8: ^( TOK_ALTERTABLE_EXCHANGEPARTITION partitionSpec $exchangename)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_EXCHANGEPARTITION, "TOK_ALTERTABLE_EXCHANGEPARTITION"), root_1);
				adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				adaptor.addChild(root_1, stream_exchangename.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixExchangePartition"


	public static class alterStatementSuffixRenamePart_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixRenamePart"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1442:1: alterStatementSuffixRenamePart : KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) ;
	public final HiveASTParser.alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart() throws RecognitionException {
		HiveASTParser.alterStatementSuffixRenamePart_return retval = new HiveASTParser.alterStatementSuffixRenamePart_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_RENAME386=null;
		Token KW_TO387=null;
		ParserRuleReturnScope partitionSpec388 =null;

		HiveParserASTNode KW_RENAME386_tree=null;
		HiveParserASTNode KW_TO387_tree=null;
		RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");

		 pushMsg("alter table rename partition statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1445:5: ( KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1445:7: KW_RENAME KW_TO partitionSpec
			{
			KW_RENAME386=(Token)match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart6839); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_RENAME.add(KW_RENAME386);

			KW_TO387=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRenamePart6841); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO387);

			pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart6843);
			partitionSpec388=partitionSpec();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec388.getTree());
			// AST REWRITE
			// elements: partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1446:5: -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1446:7: ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_RENAMEPART, "TOK_ALTERTABLE_RENAMEPART"), root_1);
				adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixRenamePart"


	public static class alterStatementSuffixStatsPart_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixStatsPart"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1449:1: alterStatementSuffixStatsPart : KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) ;
	public final HiveASTParser.alterStatementSuffixStatsPart_return alterStatementSuffixStatsPart() throws RecognitionException {
		HiveASTParser.alterStatementSuffixStatsPart_return retval = new HiveASTParser.alterStatementSuffixStatsPart_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token comment=null;
		Token KW_UPDATE389=null;
		Token KW_STATISTICS390=null;
		Token KW_FOR391=null;
		Token KW_COLUMN392=null;
		Token KW_SET393=null;
		Token KW_COMMENT395=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope tableProperties394 =null;

		HiveParserASTNode comment_tree=null;
		HiveParserASTNode KW_UPDATE389_tree=null;
		HiveParserASTNode KW_STATISTICS390_tree=null;
		HiveParserASTNode KW_FOR391_tree=null;
		HiveParserASTNode KW_COLUMN392_tree=null;
		HiveParserASTNode KW_SET393_tree=null;
		HiveParserASTNode KW_COMMENT395_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("alter table stats partition statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1452:5: ( KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1452:7: KW_UPDATE KW_STATISTICS KW_FOR ( KW_COLUMN )? colName= identifier KW_SET tableProperties ( KW_COMMENT comment= StringLiteral )?
			{
			KW_UPDATE389=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_alterStatementSuffixStatsPart6881); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE389);

			KW_STATISTICS390=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_alterStatementSuffixStatsPart6883); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS390);

			KW_FOR391=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_alterStatementSuffixStatsPart6885); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR391);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1452:38: ( KW_COLUMN )?
			int alt107=2;
			int LA107_0 = input.LA(1);
			if ( (LA107_0==KW_COLUMN) ) {
				alt107=1;
			}
			switch (alt107) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1452:38: KW_COLUMN
					{
					KW_COLUMN392=(Token)match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixStatsPart6887); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMN.add(KW_COLUMN392);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_alterStatementSuffixStatsPart6892);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			KW_SET393=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixStatsPart6894); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET393);

			pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixStatsPart6896);
			tableProperties394=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties394.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1452:91: ( KW_COMMENT comment= StringLiteral )?
			int alt108=2;
			int LA108_0 = input.LA(1);
			if ( (LA108_0==KW_COMMENT) ) {
				alt108=1;
			}
			switch (alt108) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1452:92: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT395=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixStatsPart6899); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT395);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixStatsPart6903); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colName, tableProperties, comment
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1453:5: -> ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1453:7: ^( TOK_ALTERTABLE_UPDATECOLSTATS $colName tableProperties ( $comment)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_UPDATECOLSTATS, "TOK_ALTERTABLE_UPDATECOLSTATS"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_tableProperties.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1453:65: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixStatsPart"


	public static class alterStatementSuffixMergeFiles_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixMergeFiles"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1456:1: alterStatementSuffixMergeFiles : KW_CONCATENATE -> ^( TOK_ALTERTABLE_MERGEFILES ) ;
	public final HiveASTParser.alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles() throws RecognitionException {
		HiveASTParser.alterStatementSuffixMergeFiles_return retval = new HiveASTParser.alterStatementSuffixMergeFiles_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_CONCATENATE396=null;

		HiveParserASTNode KW_CONCATENATE396_tree=null;
		RewriteRuleTokenStream stream_KW_CONCATENATE=new RewriteRuleTokenStream(adaptor,"token KW_CONCATENATE");

		 pushMsg("", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1459:5: ( KW_CONCATENATE -> ^( TOK_ALTERTABLE_MERGEFILES ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1459:7: KW_CONCATENATE
			{
			KW_CONCATENATE396=(Token)match(input,KW_CONCATENATE,FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles6950); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONCATENATE.add(KW_CONCATENATE396);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1460:5: -> ^( TOK_ALTERTABLE_MERGEFILES )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1460:8: ^( TOK_ALTERTABLE_MERGEFILES )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_MERGEFILES, "TOK_ALTERTABLE_MERGEFILES"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixMergeFiles"


	public static class alterStatementSuffixBucketNum_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixBucketNum"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1463:1: alterStatementSuffixBucketNum : KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $num) ;
	public final HiveASTParser.alterStatementSuffixBucketNum_return alterStatementSuffixBucketNum() throws RecognitionException {
		HiveASTParser.alterStatementSuffixBucketNum_return retval = new HiveASTParser.alterStatementSuffixBucketNum_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token num=null;
		Token KW_INTO397=null;
		Token KW_BUCKETS398=null;

		HiveParserASTNode num_tree=null;
		HiveParserASTNode KW_INTO397_tree=null;
		HiveParserASTNode KW_BUCKETS398_tree=null;
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");

		 pushMsg("", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1466:5: ( KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $num) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1466:7: KW_INTO num= Number KW_BUCKETS
			{
			KW_INTO397=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum6987); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO397);

			num=(Token)match(input,Number,FOLLOW_Number_in_alterStatementSuffixBucketNum6991); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Number.add(num);

			KW_BUCKETS398=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum6993); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BUCKETS.add(KW_BUCKETS398);

			// AST REWRITE
			// elements: num
			// token labels: num
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1467:5: -> ^( TOK_ALTERTABLE_BUCKETS $num)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1467:8: ^( TOK_ALTERTABLE_BUCKETS $num)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_BUCKETS, "TOK_ALTERTABLE_BUCKETS"), root_1);
				adaptor.addChild(root_1, stream_num.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixBucketNum"


	public static class blocking_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "blocking"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1470:1: blocking : KW_AND KW_WAIT -> TOK_BLOCKING ;
	public final HiveASTParser.blocking_return blocking() throws RecognitionException {
		HiveASTParser.blocking_return retval = new HiveASTParser.blocking_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_AND399=null;
		Token KW_WAIT400=null;

		HiveParserASTNode KW_AND399_tree=null;
		HiveParserASTNode KW_WAIT400_tree=null;
		RewriteRuleTokenStream stream_KW_WAIT=new RewriteRuleTokenStream(adaptor,"token KW_WAIT");
		RewriteRuleTokenStream stream_KW_AND=new RewriteRuleTokenStream(adaptor,"token KW_AND");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1471:3: ( KW_AND KW_WAIT -> TOK_BLOCKING )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1471:5: KW_AND KW_WAIT
			{
			KW_AND399=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_blocking7021); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AND.add(KW_AND399);

			KW_WAIT400=(Token)match(input,KW_WAIT,FOLLOW_KW_WAIT_in_blocking7023); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WAIT.add(KW_WAIT400);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1472:3: -> TOK_BLOCKING
			{
				adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_BLOCKING, "TOK_BLOCKING"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "blocking"


	public static class alterStatementSuffixCompact_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterStatementSuffixCompact"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1475:1: alterStatementSuffixCompact : KW_COMPACT compactType= StringLiteral ( blocking )? ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_COMPACT $compactType ( blocking )? ( tableProperties )? ) ;
	public final HiveASTParser.alterStatementSuffixCompact_return alterStatementSuffixCompact() throws RecognitionException {
		HiveASTParser.alterStatementSuffixCompact_return retval = new HiveASTParser.alterStatementSuffixCompact_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token compactType=null;
		Token KW_COMPACT401=null;
		Token KW_WITH403=null;
		Token KW_OVERWRITE404=null;
		Token KW_TBLPROPERTIES405=null;
		ParserRuleReturnScope blocking402 =null;
		ParserRuleReturnScope tableProperties406 =null;

		HiveParserASTNode compactType_tree=null;
		HiveParserASTNode KW_COMPACT401_tree=null;
		HiveParserASTNode KW_WITH403_tree=null;
		HiveParserASTNode KW_OVERWRITE404_tree=null;
		HiveParserASTNode KW_TBLPROPERTIES405_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_COMPACT=new RewriteRuleTokenStream(adaptor,"token KW_COMPACT");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleSubtreeStream stream_blocking=new RewriteRuleSubtreeStream(adaptor,"rule blocking");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 msgs.push("compaction request"); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1478:5: ( KW_COMPACT compactType= StringLiteral ( blocking )? ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_COMPACT $compactType ( blocking )? ( tableProperties )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1478:7: KW_COMPACT compactType= StringLiteral ( blocking )? ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )?
			{
			KW_COMPACT401=(Token)match(input,KW_COMPACT,FOLLOW_KW_COMPACT_in_alterStatementSuffixCompact7054); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMPACT.add(KW_COMPACT401);

			compactType=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixCompact7058); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(compactType);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1478:44: ( blocking )?
			int alt109=2;
			int LA109_0 = input.LA(1);
			if ( (LA109_0==KW_AND) ) {
				alt109=1;
			}
			switch (alt109) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1478:44: blocking
					{
					pushFollow(FOLLOW_blocking_in_alterStatementSuffixCompact7060);
					blocking402=blocking();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_blocking.add(blocking402.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1478:54: ( KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties )?
			int alt110=2;
			int LA110_0 = input.LA(1);
			if ( (LA110_0==KW_WITH) ) {
				alt110=1;
			}
			switch (alt110) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1478:55: KW_WITH KW_OVERWRITE KW_TBLPROPERTIES tableProperties
					{
					KW_WITH403=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixCompact7064); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH403);

					KW_OVERWRITE404=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_alterStatementSuffixCompact7066); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(KW_OVERWRITE404);

					KW_TBLPROPERTIES405=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixCompact7068); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES405);

					pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixCompact7070);
					tableProperties406=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(tableProperties406.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: blocking, compactType, tableProperties
			// token labels: compactType
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_compactType=new RewriteRuleTokenStream(adaptor,"token compactType",compactType);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1479:5: -> ^( TOK_ALTERTABLE_COMPACT $compactType ( blocking )? ( tableProperties )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1479:8: ^( TOK_ALTERTABLE_COMPACT $compactType ( blocking )? ( tableProperties )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_COMPACT, "TOK_ALTERTABLE_COMPACT"), root_1);
				adaptor.addChild(root_1, stream_compactType.nextNode());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1479:46: ( blocking )?
				if ( stream_blocking.hasNext() ) {
					adaptor.addChild(root_1, stream_blocking.nextTree());
				}
				stream_blocking.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1479:56: ( tableProperties )?
				if ( stream_tableProperties.hasNext() ) {
					adaptor.addChild(root_1, stream_tableProperties.nextTree());
				}
				stream_tableProperties.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { msgs.pop(); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterStatementSuffixCompact"


	public static class fileFormat_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "fileFormat"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1483:1: fileFormat : ( KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? ) |genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
	public final HiveASTParser.fileFormat_return fileFormat() throws RecognitionException {
		HiveASTParser.fileFormat_return retval = new HiveASTParser.fileFormat_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token inFmt=null;
		Token outFmt=null;
		Token serdeCls=null;
		Token inDriver=null;
		Token outDriver=null;
		Token KW_INPUTFORMAT407=null;
		Token KW_OUTPUTFORMAT408=null;
		Token KW_SERDE409=null;
		Token KW_INPUTDRIVER410=null;
		Token KW_OUTPUTDRIVER411=null;
		ParserRuleReturnScope genericSpec =null;

		HiveParserASTNode inFmt_tree=null;
		HiveParserASTNode outFmt_tree=null;
		HiveParserASTNode serdeCls_tree=null;
		HiveParserASTNode inDriver_tree=null;
		HiveParserASTNode outDriver_tree=null;
		HiveParserASTNode KW_INPUTFORMAT407_tree=null;
		HiveParserASTNode KW_OUTPUTFORMAT408_tree=null;
		HiveParserASTNode KW_SERDE409_tree=null;
		HiveParserASTNode KW_INPUTDRIVER410_tree=null;
		HiveParserASTNode KW_OUTPUTDRIVER411_tree=null;
		RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
		RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("file format specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1486:5: ( KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? ) |genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
			int alt112=2;
			int LA112_0 = input.LA(1);
			if ( (LA112_0==KW_INPUTFORMAT) ) {
				int LA112_1 = input.LA(2);
				if ( (LA112_1==StringLiteral) ) {
					alt112=1;
				}
				else if ( (LA112_1==EOF) ) {
					alt112=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 112, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA112_0==Identifier||(LA112_0 >= KW_ABORT && LA112_0 <= KW_AFTER)||LA112_0==KW_ANALYZE||LA112_0==KW_ARCHIVE||LA112_0==KW_ASC||(LA112_0 >= KW_AUTOCOMMIT && LA112_0 <= KW_BEFORE)||(LA112_0 >= KW_BUCKET && LA112_0 <= KW_BUCKETS)||(LA112_0 >= KW_CACHE && LA112_0 <= KW_CASCADE)||LA112_0==KW_CHANGE||(LA112_0 >= KW_CLUSTER && LA112_0 <= KW_COLLECTION)||(LA112_0 >= KW_COLUMNS && LA112_0 <= KW_COMMENT)||(LA112_0 >= KW_COMPACT && LA112_0 <= KW_CONCATENATE)||LA112_0==KW_CONTINUE||LA112_0==KW_DATA||LA112_0==KW_DATABASES||(LA112_0 >= KW_DATETIME && LA112_0 <= KW_DBPROPERTIES)||(LA112_0 >= KW_DEFERRED && LA112_0 <= KW_DEFINED)||(LA112_0 >= KW_DELIMITED && LA112_0 <= KW_DESC)||(LA112_0 >= KW_DETAIL && LA112_0 <= KW_DISABLE)||LA112_0==KW_DISTRIBUTE||LA112_0==KW_DOW||(LA112_0 >= KW_DUMP && LA112_0 <= KW_ELEM_TYPE)||LA112_0==KW_ENABLE||LA112_0==KW_ESCAPED||LA112_0==KW_EXCLUSIVE||(LA112_0 >= KW_EXPLAIN && LA112_0 <= KW_EXPRESSION)||(LA112_0 >= KW_FIELDS && LA112_0 <= KW_FIRST)||(LA112_0 >= KW_FORMAT && LA112_0 <= KW_FORMATTED)||LA112_0==KW_FUNCTIONS||(LA112_0 >= KW_HOUR && LA112_0 <= KW_IDXPROPERTIES)||(LA112_0 >= KW_INDEX && LA112_0 <= KW_INDEXES)||(LA112_0 >= KW_INPATH && LA112_0 <= KW_INPUTDRIVER)||(LA112_0 >= KW_ISOLATION && LA112_0 <= KW_JAR)||(LA112_0 >= KW_KEY && LA112_0 <= KW_LAST)||LA112_0==KW_LEVEL||(LA112_0 >= KW_LIMIT && LA112_0 <= KW_LOAD)||(LA112_0 >= KW_LOCATION && LA112_0 <= KW_LONG)||(LA112_0 >= KW_MAPJOIN && LA112_0 <= KW_MATERIALIZED)||LA112_0==KW_METADATA||(LA112_0 >= KW_MINUTE && LA112_0 <= KW_MONTH)||LA112_0==KW_MSCK||(LA112_0 >= KW_NORELY && LA112_0 <= KW_NOSCAN)||LA112_0==KW_NOVALIDATE||LA112_0==KW_NULLS||LA112_0==KW_OFFSET||(LA112_0 >= KW_OPERATOR && LA112_0 <= KW_OPTION)||(LA112_0 >= KW_OUTPUTDRIVER && LA112_0 <= KW_OUTPUTFORMAT)||(LA112_0 >= KW_OVERWRITE && LA112_0 <= KW_OWNER)||(LA112_0 >= KW_PARTITIONED && LA112_0 <= KW_PARTITIONS)||LA112_0==KW_PLUS||LA112_0==KW_PRETTY||LA112_0==KW_PRINCIPALS||(LA112_0 >= KW_PURGE && LA112_0 <= KW_QUARTER)||LA112_0==KW_READ||(LA112_0 >= KW_REBUILD && LA112_0 <= KW_RECORDWRITER)||(LA112_0 >= KW_RELOAD && LA112_0 <= KW_RESTRICT)||LA112_0==KW_REWRITE||(LA112_0 >= KW_ROLE && LA112_0 <= KW_ROLES)||(LA112_0 >= KW_SCHEMA && LA112_0 <= KW_SECOND)||(LA112_0 >= KW_SEMI && LA112_0 <= KW_SERVER)||(LA112_0 >= KW_SETS && LA112_0 <= KW_SKEWED)||(LA112_0 >= KW_SNAPSHOT && LA112_0 <= KW_SSL)||(LA112_0 >= KW_STATISTICS && LA112_0 <= KW_SUMMARY)||LA112_0==KW_TABLES||(LA112_0 >= KW_TBLPROPERTIES && LA112_0 <= KW_TERMINATED)||LA112_0==KW_TINYINT||(LA112_0 >= KW_TOUCH && LA112_0 <= KW_TRANSACTIONS)||LA112_0==KW_UNARCHIVE||LA112_0==KW_UNDO||LA112_0==KW_UNIONTYPE||(LA112_0 >= KW_UNLOCK && LA112_0 <= KW_UNSIGNED)||(LA112_0 >= KW_URI && LA112_0 <= KW_USE)||(LA112_0 >= KW_UTC && LA112_0 <= KW_VALIDATE)||LA112_0==KW_VALUE_TYPE||(LA112_0 >= KW_VECTORIZATION && LA112_0 <= KW_WEEK)||LA112_0==KW_WHILE||(LA112_0 >= KW_WORK && LA112_0 <= KW_YEAR)||LA112_0==KW_BATCH||LA112_0==KW_DAYOFWEEK||LA112_0==KW_HOLD_DDLTIME||LA112_0==KW_IGNORE||LA112_0==KW_NO_DROP||LA112_0==KW_OFFLINE||LA112_0==KW_PROTECTION||LA112_0==KW_READONLY) ) {
				alt112=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 112, 0, input);
				throw nvae;
			}

			switch (alt112) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1486:7: KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral KW_SERDE serdeCls= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					{
					KW_INPUTFORMAT407=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_fileFormat7119); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT407);

					inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat7123); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(inFmt);

					KW_OUTPUTFORMAT408=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_fileFormat7125); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT408);

					outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat7129); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(outFmt);

					KW_SERDE409=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_fileFormat7131); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE409);

					serdeCls=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat7135); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(serdeCls);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1486:111: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					int alt111=2;
					int LA111_0 = input.LA(1);
					if ( (LA111_0==KW_INPUTDRIVER) ) {
						alt111=1;
					}
					switch (alt111) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1486:112: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
							{
							KW_INPUTDRIVER410=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_fileFormat7138); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER410);

							inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat7142); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(inDriver);

							KW_OUTPUTDRIVER411=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_fileFormat7144); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER411);

							outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat7148); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(outDriver);

							}
							break;

					}

					// AST REWRITE
					// elements: inFmt, outDriver, inDriver, outFmt, serdeCls
					// token labels: inFmt, inDriver, outDriver, serdeCls, outFmt
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
					RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
					RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
					RewriteRuleTokenStream stream_serdeCls=new RewriteRuleTokenStream(adaptor,"token serdeCls",serdeCls);
					RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1487:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1487:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt $serdeCls ( $inDriver)? ( $outDriver)? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);
						adaptor.addChild(root_1, stream_inFmt.nextNode());
						adaptor.addChild(root_1, stream_outFmt.nextNode());
						adaptor.addChild(root_1, stream_serdeCls.nextNode());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1487:58: ( $inDriver)?
						if ( stream_inDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_inDriver.nextNode());
						}
						stream_inDriver.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1487:69: ( $outDriver)?
						if ( stream_outDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_outDriver.nextNode());
						}
						stream_outDriver.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1488:7: genericSpec= identifier
					{
					pushFollow(FOLLOW_identifier_in_fileFormat7189);
					genericSpec=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(genericSpec.getTree());
					// AST REWRITE
					// elements: genericSpec
					// token labels: 
					// rule labels: genericSpec, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1488:30: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1488:33: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);
						adaptor.addChild(root_1, stream_genericSpec.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fileFormat"


	public static class tabTypeExpr_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tabTypeExpr"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1491:1: tabTypeExpr : identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )? ;
	public final HiveASTParser.tabTypeExpr_return tabTypeExpr() throws RecognitionException {
		HiveASTParser.tabTypeExpr_return retval = new HiveASTParser.tabTypeExpr_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token DOT413=null;
		Token DOT416=null;
		Token KW_ELEM_TYPE417=null;
		Token KW_KEY_TYPE418=null;
		Token KW_VALUE_TYPE419=null;
		ParserRuleReturnScope identifier412 =null;
		ParserRuleReturnScope identifier414 =null;
		ParserRuleReturnScope identifier415 =null;
		ParserRuleReturnScope identifier420 =null;

		HiveParserASTNode DOT413_tree=null;
		HiveParserASTNode DOT416_tree=null;
		HiveParserASTNode KW_ELEM_TYPE417_tree=null;
		HiveParserASTNode KW_KEY_TYPE418_tree=null;
		HiveParserASTNode KW_VALUE_TYPE419_tree=null;

		 pushMsg("specifying table types", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1494:4: ( identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )? )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1494:6: identifier ( DOT ^ identifier )? ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )?
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_tabTypeExpr7224);
			identifier412=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier412.getTree());

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1494:17: ( DOT ^ identifier )?
			int alt113=2;
			int LA113_0 = input.LA(1);
			if ( (LA113_0==DOT) ) {
				alt113=1;
			}
			switch (alt113) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1494:18: DOT ^ identifier
					{
					DOT413=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr7227); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT413_tree = (HiveParserASTNode)adaptor.create(DOT413);
					root_0 = (HiveParserASTNode)adaptor.becomeRoot(DOT413_tree, root_0);
					}

					pushFollow(FOLLOW_identifier_in_tabTypeExpr7230);
					identifier414=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier414.getTree());

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1495:4: ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )?
			int alt116=2;
			int LA116_0 = input.LA(1);
			if ( (LA116_0==Identifier||(LA116_0 >= KW_ABORT && LA116_0 <= KW_AFTER)||LA116_0==KW_ANALYZE||LA116_0==KW_ARCHIVE||LA116_0==KW_ASC||(LA116_0 >= KW_AUTOCOMMIT && LA116_0 <= KW_BEFORE)||(LA116_0 >= KW_BUCKET && LA116_0 <= KW_BUCKETS)||(LA116_0 >= KW_CACHE && LA116_0 <= KW_CASCADE)||LA116_0==KW_CHANGE||(LA116_0 >= KW_CLUSTER && LA116_0 <= KW_COLLECTION)||(LA116_0 >= KW_COLUMNS && LA116_0 <= KW_COMMENT)||(LA116_0 >= KW_COMPACT && LA116_0 <= KW_CONCATENATE)||LA116_0==KW_CONTINUE||LA116_0==KW_DATA||LA116_0==KW_DATABASES||(LA116_0 >= KW_DATETIME && LA116_0 <= KW_DBPROPERTIES)||(LA116_0 >= KW_DEFERRED && LA116_0 <= KW_DEFINED)||(LA116_0 >= KW_DELIMITED && LA116_0 <= KW_DESC)||(LA116_0 >= KW_DETAIL && LA116_0 <= KW_DISABLE)||LA116_0==KW_DISTRIBUTE||LA116_0==KW_DOW||(LA116_0 >= KW_DUMP && LA116_0 <= KW_ELEM_TYPE)||LA116_0==KW_ENABLE||LA116_0==KW_ESCAPED||LA116_0==KW_EXCLUSIVE||(LA116_0 >= KW_EXPLAIN && LA116_0 <= KW_EXPRESSION)||(LA116_0 >= KW_FIELDS && LA116_0 <= KW_FIRST)||(LA116_0 >= KW_FORMAT && LA116_0 <= KW_FORMATTED)||LA116_0==KW_FUNCTIONS||(LA116_0 >= KW_HOUR && LA116_0 <= KW_IDXPROPERTIES)||(LA116_0 >= KW_INDEX && LA116_0 <= KW_INDEXES)||(LA116_0 >= KW_INPATH && LA116_0 <= KW_INPUTFORMAT)||(LA116_0 >= KW_ISOLATION && LA116_0 <= KW_JAR)||(LA116_0 >= KW_KEY && LA116_0 <= KW_LAST)||LA116_0==KW_LEVEL||(LA116_0 >= KW_LIMIT && LA116_0 <= KW_LOAD)||(LA116_0 >= KW_LOCATION && LA116_0 <= KW_LONG)||(LA116_0 >= KW_MAPJOIN && LA116_0 <= KW_MATERIALIZED)||LA116_0==KW_METADATA||(LA116_0 >= KW_MINUTE && LA116_0 <= KW_MONTH)||LA116_0==KW_MSCK||(LA116_0 >= KW_NORELY && LA116_0 <= KW_NOSCAN)||LA116_0==KW_NOVALIDATE||LA116_0==KW_NULLS||LA116_0==KW_OFFSET||(LA116_0 >= KW_OPERATOR && LA116_0 <= KW_OPTION)||(LA116_0 >= KW_OUTPUTDRIVER && LA116_0 <= KW_OUTPUTFORMAT)||(LA116_0 >= KW_OVERWRITE && LA116_0 <= KW_OWNER)||(LA116_0 >= KW_PARTITIONED && LA116_0 <= KW_PARTITIONS)||LA116_0==KW_PLUS||LA116_0==KW_PRETTY||LA116_0==KW_PRINCIPALS||(LA116_0 >= KW_PURGE && LA116_0 <= KW_QUARTER)||LA116_0==KW_READ||(LA116_0 >= KW_REBUILD && LA116_0 <= KW_RECORDWRITER)||(LA116_0 >= KW_RELOAD && LA116_0 <= KW_RESTRICT)||LA116_0==KW_REWRITE||(LA116_0 >= KW_ROLE && LA116_0 <= KW_ROLES)||(LA116_0 >= KW_SCHEMA && LA116_0 <= KW_SECOND)||(LA116_0 >= KW_SEMI && LA116_0 <= KW_SERVER)||(LA116_0 >= KW_SETS && LA116_0 <= KW_SKEWED)||(LA116_0 >= KW_SNAPSHOT && LA116_0 <= KW_SSL)||(LA116_0 >= KW_STATISTICS && LA116_0 <= KW_SUMMARY)||LA116_0==KW_TABLES||(LA116_0 >= KW_TBLPROPERTIES && LA116_0 <= KW_TERMINATED)||LA116_0==KW_TINYINT||(LA116_0 >= KW_TOUCH && LA116_0 <= KW_TRANSACTIONS)||LA116_0==KW_UNARCHIVE||LA116_0==KW_UNDO||LA116_0==KW_UNIONTYPE||(LA116_0 >= KW_UNLOCK && LA116_0 <= KW_UNSIGNED)||(LA116_0 >= KW_URI && LA116_0 <= KW_USE)||(LA116_0 >= KW_UTC && LA116_0 <= KW_VALIDATE)||LA116_0==KW_VALUE_TYPE||(LA116_0 >= KW_VECTORIZATION && LA116_0 <= KW_WEEK)||LA116_0==KW_WHILE||(LA116_0 >= KW_WORK && LA116_0 <= KW_YEAR)||LA116_0==KW_BATCH||LA116_0==KW_DAYOFWEEK||LA116_0==KW_HOLD_DDLTIME||LA116_0==KW_IGNORE||LA116_0==KW_NO_DROP||LA116_0==KW_OFFLINE||LA116_0==KW_PROTECTION||LA116_0==KW_READONLY) ) {
				alt116=1;
			}
			switch (alt116) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1495:5: identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
					{
					pushFollow(FOLLOW_identifier_in_tabTypeExpr7238);
					identifier415=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier415.getTree());

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1495:16: ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
					loop115:
					while (true) {
						int alt115=2;
						int LA115_0 = input.LA(1);
						if ( (LA115_0==DOT) ) {
							alt115=1;
						}

						switch (alt115) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1495:17: DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
							{
							DOT416=(Token)match(input,DOT,FOLLOW_DOT_in_tabTypeExpr7241); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							DOT416_tree = (HiveParserASTNode)adaptor.create(DOT416);
							root_0 = (HiveParserASTNode)adaptor.becomeRoot(DOT416_tree, root_0);
							}

							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1496:4: ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
							int alt114=4;
							switch ( input.LA(1) ) {
							case KW_ELEM_TYPE:
								{
								int LA114_1 = input.LA(2);
								if ( (synpred4_HiveASTParser()) ) {
									alt114=1;
								}
								else if ( (true) ) {
									alt114=4;
								}

								}
								break;
							case KW_KEY_TYPE:
								{
								int LA114_2 = input.LA(2);
								if ( (synpred5_HiveASTParser()) ) {
									alt114=2;
								}
								else if ( (true) ) {
									alt114=4;
								}

								}
								break;
							case KW_VALUE_TYPE:
								{
								int LA114_3 = input.LA(2);
								if ( (synpred6_HiveASTParser()) ) {
									alt114=3;
								}
								else if ( (true) ) {
									alt114=4;
								}

								}
								break;
							case Identifier:
							case KW_ABORT:
							case KW_ADD:
							case KW_ADMIN:
							case KW_AFTER:
							case KW_ANALYZE:
							case KW_ARCHIVE:
							case KW_ASC:
							case KW_AUTOCOMMIT:
							case KW_BEFORE:
							case KW_BUCKET:
							case KW_BUCKETS:
							case KW_CACHE:
							case KW_CASCADE:
							case KW_CHANGE:
							case KW_CLUSTER:
							case KW_CLUSTERED:
							case KW_CLUSTERSTATUS:
							case KW_COLLECTION:
							case KW_COLUMNS:
							case KW_COMMENT:
							case KW_COMPACT:
							case KW_COMPACTIONS:
							case KW_COMPUTE:
							case KW_CONCATENATE:
							case KW_CONTINUE:
							case KW_DATA:
							case KW_DATABASES:
							case KW_DATETIME:
							case KW_DAY:
							case KW_DBPROPERTIES:
							case KW_DEFERRED:
							case KW_DEFINED:
							case KW_DELIMITED:
							case KW_DEPENDENCY:
							case KW_DESC:
							case KW_DETAIL:
							case KW_DIRECTORIES:
							case KW_DIRECTORY:
							case KW_DISABLE:
							case KW_DISTRIBUTE:
							case KW_DOW:
							case KW_DUMP:
							case KW_ENABLE:
							case KW_ESCAPED:
							case KW_EXCLUSIVE:
							case KW_EXPLAIN:
							case KW_EXPORT:
							case KW_EXPRESSION:
							case KW_FIELDS:
							case KW_FILE:
							case KW_FILEFORMAT:
							case KW_FIRST:
							case KW_FORMAT:
							case KW_FORMATTED:
							case KW_FUNCTIONS:
							case KW_HOUR:
							case KW_IDXPROPERTIES:
							case KW_INDEX:
							case KW_INDEXES:
							case KW_INPATH:
							case KW_INPUTDRIVER:
							case KW_INPUTFORMAT:
							case KW_ISOLATION:
							case KW_ITEMS:
							case KW_JAR:
							case KW_KEY:
							case KW_KEYS:
							case KW_LAST:
							case KW_LEVEL:
							case KW_LIMIT:
							case KW_LINES:
							case KW_LOAD:
							case KW_LOCATION:
							case KW_LOCK:
							case KW_LOCKS:
							case KW_LOGICAL:
							case KW_LONG:
							case KW_MAPJOIN:
							case KW_MATCHED:
							case KW_MATERIALIZED:
							case KW_METADATA:
							case KW_MINUTE:
							case KW_MONTH:
							case KW_MSCK:
							case KW_NORELY:
							case KW_NOSCAN:
							case KW_NOVALIDATE:
							case KW_NULLS:
							case KW_OFFSET:
							case KW_OPERATOR:
							case KW_OPTION:
							case KW_OUTPUTDRIVER:
							case KW_OUTPUTFORMAT:
							case KW_OVERWRITE:
							case KW_OWNER:
							case KW_PARTITIONED:
							case KW_PARTITIONS:
							case KW_PLUS:
							case KW_PRETTY:
							case KW_PRINCIPALS:
							case KW_PURGE:
							case KW_QUARTER:
							case KW_READ:
							case KW_REBUILD:
							case KW_RECORDREADER:
							case KW_RECORDWRITER:
							case KW_RELOAD:
							case KW_RELY:
							case KW_RENAME:
							case KW_REPAIR:
							case KW_REPL:
							case KW_REPLACE:
							case KW_REPLICATION:
							case KW_RESTRICT:
							case KW_REWRITE:
							case KW_ROLE:
							case KW_ROLES:
							case KW_SCHEMA:
							case KW_SCHEMAS:
							case KW_SECOND:
							case KW_SEMI:
							case KW_SERDE:
							case KW_SERDEPROPERTIES:
							case KW_SERVER:
							case KW_SETS:
							case KW_SHARED:
							case KW_SHOW:
							case KW_SHOW_DATABASE:
							case KW_SKEWED:
							case KW_SNAPSHOT:
							case KW_SORT:
							case KW_SORTED:
							case KW_SSL:
							case KW_STATISTICS:
							case KW_STATUS:
							case KW_STORED:
							case KW_STREAMTABLE:
							case KW_STRING:
							case KW_STRUCT:
							case KW_SUMMARY:
							case KW_TABLES:
							case KW_TBLPROPERTIES:
							case KW_TEMPORARY:
							case KW_TERMINATED:
							case KW_TINYINT:
							case KW_TOUCH:
							case KW_TRANSACTION:
							case KW_TRANSACTIONS:
							case KW_UNARCHIVE:
							case KW_UNDO:
							case KW_UNIONTYPE:
							case KW_UNLOCK:
							case KW_UNSET:
							case KW_UNSIGNED:
							case KW_URI:
							case KW_USE:
							case KW_UTC:
							case KW_UTCTIMESTAMP:
							case KW_VALIDATE:
							case KW_VECTORIZATION:
							case KW_VIEW:
							case KW_VIEWS:
							case KW_WAIT:
							case KW_WEEK:
							case KW_WHILE:
							case KW_WORK:
							case KW_WRITE:
							case KW_YEAR:
							case KW_BATCH:
							case KW_DAYOFWEEK:
							case KW_HOLD_DDLTIME:
							case KW_IGNORE:
							case KW_NO_DROP:
							case KW_OFFLINE:
							case KW_PROTECTION:
							case KW_READONLY:
								{
								alt114=4;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 114, 0, input);
								throw nvae;
							}
							switch (alt114) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1497:4: ( KW_ELEM_TYPE )=> KW_ELEM_TYPE
									{
									KW_ELEM_TYPE417=(Token)match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr7258); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									KW_ELEM_TYPE417_tree = (HiveParserASTNode)adaptor.create(KW_ELEM_TYPE417);
									adaptor.addChild(root_0, KW_ELEM_TYPE417_tree);
									}

									}
									break;
								case 2 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1499:4: ( KW_KEY_TYPE )=> KW_KEY_TYPE
									{
									KW_KEY_TYPE418=(Token)match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_tabTypeExpr7275); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									KW_KEY_TYPE418_tree = (HiveParserASTNode)adaptor.create(KW_KEY_TYPE418);
									adaptor.addChild(root_0, KW_KEY_TYPE418_tree);
									}

									}
									break;
								case 3 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1501:4: ( KW_VALUE_TYPE )=> KW_VALUE_TYPE
									{
									KW_VALUE_TYPE419=(Token)match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr7292); if (state.failed) return retval;
									if ( state.backtracking==0 ) {
									KW_VALUE_TYPE419_tree = (HiveParserASTNode)adaptor.create(KW_VALUE_TYPE419);
									adaptor.addChild(root_0, KW_VALUE_TYPE419_tree);
									}

									}
									break;
								case 4 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1502:6: identifier
									{
									pushFollow(FOLLOW_identifier_in_tabTypeExpr7300);
									identifier420=identifier();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier420.getTree());

									}
									break;

							}

							}
							break;

						default :
							break loop115;
						}
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tabTypeExpr"


	public static class partTypeExpr_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "partTypeExpr"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1507:1: partTypeExpr : tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) ;
	public final HiveASTParser.partTypeExpr_return partTypeExpr() throws RecognitionException {
		HiveASTParser.partTypeExpr_return retval = new HiveASTParser.partTypeExpr_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope tabTypeExpr421 =null;
		ParserRuleReturnScope partitionSpec422 =null;

		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabTypeExpr");

		 pushMsg("specifying table partitions", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1510:5: ( tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1510:8: tabTypeExpr ( partitionSpec )?
			{
			pushFollow(FOLLOW_tabTypeExpr_in_partTypeExpr7340);
			tabTypeExpr421=tabTypeExpr();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tabTypeExpr.add(tabTypeExpr421.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1510:20: ( partitionSpec )?
			int alt117=2;
			int LA117_0 = input.LA(1);
			if ( (LA117_0==KW_PARTITION) ) {
				alt117=1;
			}
			switch (alt117) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1510:20: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_partTypeExpr7342);
					partitionSpec422=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec422.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, tabTypeExpr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1510:35: -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1510:38: ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);
				adaptor.addChild(root_1, stream_tabTypeExpr.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1510:64: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "partTypeExpr"


	public static class tabPartColTypeExpr_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tabPartColTypeExpr"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1513:1: tabPartColTypeExpr : tableName ( partitionSpec )? ( extColumnName )? -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? ) ;
	public final HiveASTParser.tabPartColTypeExpr_return tabPartColTypeExpr() throws RecognitionException {
		HiveASTParser.tabPartColTypeExpr_return retval = new HiveASTParser.tabPartColTypeExpr_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope tableName423 =null;
		ParserRuleReturnScope partitionSpec424 =null;
		ParserRuleReturnScope extColumnName425 =null;

		RewriteRuleSubtreeStream stream_extColumnName=new RewriteRuleSubtreeStream(adaptor,"rule extColumnName");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("specifying table partitions columnName", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1516:5: ( tableName ( partitionSpec )? ( extColumnName )? -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1516:8: tableName ( partitionSpec )? ( extColumnName )?
			{
			pushFollow(FOLLOW_tableName_in_tabPartColTypeExpr7382);
			tableName423=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName423.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1516:18: ( partitionSpec )?
			int alt118=2;
			int LA118_0 = input.LA(1);
			if ( (LA118_0==KW_PARTITION) ) {
				alt118=1;
			}
			switch (alt118) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1516:18: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_tabPartColTypeExpr7384);
					partitionSpec424=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec424.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1516:33: ( extColumnName )?
			int alt119=2;
			int LA119_0 = input.LA(1);
			if ( (LA119_0==Identifier||(LA119_0 >= KW_ABORT && LA119_0 <= KW_AFTER)||LA119_0==KW_ANALYZE||LA119_0==KW_ARCHIVE||LA119_0==KW_ASC||(LA119_0 >= KW_AUTOCOMMIT && LA119_0 <= KW_BEFORE)||(LA119_0 >= KW_BUCKET && LA119_0 <= KW_BUCKETS)||(LA119_0 >= KW_CACHE && LA119_0 <= KW_CASCADE)||LA119_0==KW_CHANGE||(LA119_0 >= KW_CLUSTER && LA119_0 <= KW_COLLECTION)||(LA119_0 >= KW_COLUMNS && LA119_0 <= KW_COMMENT)||(LA119_0 >= KW_COMPACT && LA119_0 <= KW_CONCATENATE)||LA119_0==KW_CONTINUE||LA119_0==KW_DATA||LA119_0==KW_DATABASES||(LA119_0 >= KW_DATETIME && LA119_0 <= KW_DBPROPERTIES)||(LA119_0 >= KW_DEFERRED && LA119_0 <= KW_DEFINED)||(LA119_0 >= KW_DELIMITED && LA119_0 <= KW_DESC)||(LA119_0 >= KW_DETAIL && LA119_0 <= KW_DISABLE)||LA119_0==KW_DISTRIBUTE||LA119_0==KW_DOW||(LA119_0 >= KW_DUMP && LA119_0 <= KW_ELEM_TYPE)||LA119_0==KW_ENABLE||LA119_0==KW_ESCAPED||LA119_0==KW_EXCLUSIVE||(LA119_0 >= KW_EXPLAIN && LA119_0 <= KW_EXPRESSION)||(LA119_0 >= KW_FIELDS && LA119_0 <= KW_FIRST)||(LA119_0 >= KW_FORMAT && LA119_0 <= KW_FORMATTED)||LA119_0==KW_FUNCTIONS||(LA119_0 >= KW_HOUR && LA119_0 <= KW_IDXPROPERTIES)||(LA119_0 >= KW_INDEX && LA119_0 <= KW_INDEXES)||(LA119_0 >= KW_INPATH && LA119_0 <= KW_INPUTFORMAT)||(LA119_0 >= KW_ISOLATION && LA119_0 <= KW_JAR)||(LA119_0 >= KW_KEY && LA119_0 <= KW_LAST)||LA119_0==KW_LEVEL||(LA119_0 >= KW_LIMIT && LA119_0 <= KW_LOAD)||(LA119_0 >= KW_LOCATION && LA119_0 <= KW_LONG)||(LA119_0 >= KW_MAPJOIN && LA119_0 <= KW_MATERIALIZED)||LA119_0==KW_METADATA||(LA119_0 >= KW_MINUTE && LA119_0 <= KW_MONTH)||LA119_0==KW_MSCK||(LA119_0 >= KW_NORELY && LA119_0 <= KW_NOSCAN)||LA119_0==KW_NOVALIDATE||LA119_0==KW_NULLS||LA119_0==KW_OFFSET||(LA119_0 >= KW_OPERATOR && LA119_0 <= KW_OPTION)||(LA119_0 >= KW_OUTPUTDRIVER && LA119_0 <= KW_OUTPUTFORMAT)||(LA119_0 >= KW_OVERWRITE && LA119_0 <= KW_OWNER)||(LA119_0 >= KW_PARTITIONED && LA119_0 <= KW_PARTITIONS)||LA119_0==KW_PLUS||LA119_0==KW_PRETTY||LA119_0==KW_PRINCIPALS||(LA119_0 >= KW_PURGE && LA119_0 <= KW_QUARTER)||LA119_0==KW_READ||(LA119_0 >= KW_REBUILD && LA119_0 <= KW_RECORDWRITER)||(LA119_0 >= KW_RELOAD && LA119_0 <= KW_RESTRICT)||LA119_0==KW_REWRITE||(LA119_0 >= KW_ROLE && LA119_0 <= KW_ROLES)||(LA119_0 >= KW_SCHEMA && LA119_0 <= KW_SECOND)||(LA119_0 >= KW_SEMI && LA119_0 <= KW_SERVER)||(LA119_0 >= KW_SETS && LA119_0 <= KW_SKEWED)||(LA119_0 >= KW_SNAPSHOT && LA119_0 <= KW_SSL)||(LA119_0 >= KW_STATISTICS && LA119_0 <= KW_SUMMARY)||LA119_0==KW_TABLES||(LA119_0 >= KW_TBLPROPERTIES && LA119_0 <= KW_TERMINATED)||LA119_0==KW_TINYINT||(LA119_0 >= KW_TOUCH && LA119_0 <= KW_TRANSACTIONS)||LA119_0==KW_UNARCHIVE||LA119_0==KW_UNDO||LA119_0==KW_UNIONTYPE||(LA119_0 >= KW_UNLOCK && LA119_0 <= KW_UNSIGNED)||(LA119_0 >= KW_URI && LA119_0 <= KW_USE)||(LA119_0 >= KW_UTC && LA119_0 <= KW_VALIDATE)||LA119_0==KW_VALUE_TYPE||(LA119_0 >= KW_VECTORIZATION && LA119_0 <= KW_WEEK)||LA119_0==KW_WHILE||(LA119_0 >= KW_WORK && LA119_0 <= KW_YEAR)||LA119_0==KW_BATCH||LA119_0==KW_DAYOFWEEK||LA119_0==KW_HOLD_DDLTIME||LA119_0==KW_IGNORE||LA119_0==KW_NO_DROP||LA119_0==KW_OFFLINE||LA119_0==KW_PROTECTION||LA119_0==KW_READONLY) ) {
				alt119=1;
			}
			switch (alt119) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1516:33: extColumnName
					{
					pushFollow(FOLLOW_extColumnName_in_tabPartColTypeExpr7387);
					extColumnName425=extColumnName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_extColumnName.add(extColumnName425.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableName, partitionSpec, extColumnName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1516:48: -> ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1516:51: ^( TOK_TABTYPE tableName ( partitionSpec )? ( extColumnName )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1516:75: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1516:90: ( extColumnName )?
				if ( stream_extColumnName.hasNext() ) {
					adaptor.addChild(root_1, stream_extColumnName.nextTree());
				}
				stream_extColumnName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tabPartColTypeExpr"


	public static class descStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "descStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1519:1: descStatement : ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) ) ;
	public final HiveASTParser.descStatement_return descStatement() throws RecognitionException {
		HiveASTParser.descStatement_return retval = new HiveASTParser.descStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token descOptions=null;
		Token KW_DESCRIBE426=null;
		Token KW_DESC427=null;
		Token KW_DATABASE428=null;
		Token KW_SCHEMA429=null;
		Token KW_EXTENDED430=null;
		Token KW_FUNCTION431=null;
		Token KW_EXTENDED432=null;
		ParserRuleReturnScope dbName =null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope parttype =null;

		HiveParserASTNode descOptions_tree=null;
		HiveParserASTNode KW_DESCRIBE426_tree=null;
		HiveParserASTNode KW_DESC427_tree=null;
		HiveParserASTNode KW_DATABASE428_tree=null;
		HiveParserASTNode KW_SCHEMA429_tree=null;
		HiveParserASTNode KW_EXTENDED430_tree=null;
		HiveParserASTNode KW_FUNCTION431_tree=null;
		HiveParserASTNode KW_EXTENDED432_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_PRETTY=new RewriteRuleTokenStream(adaptor,"token KW_PRETTY");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
		RewriteRuleTokenStream stream_KW_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token KW_DESCRIBE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tabPartColTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabPartColTypeExpr");
		RewriteRuleSubtreeStream stream_descFuncNames=new RewriteRuleSubtreeStream(adaptor,"rule descFuncNames");

		 pushMsg("describe statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1522:5: ( ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1523:5: ( KW_DESCRIBE | KW_DESC ) ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) )
			{
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1523:5: ( KW_DESCRIBE | KW_DESC )
			int alt120=2;
			int LA120_0 = input.LA(1);
			if ( (LA120_0==KW_DESCRIBE) ) {
				alt120=1;
			}
			else if ( (LA120_0==KW_DESC) ) {
				alt120=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 120, 0, input);
				throw nvae;
			}

			switch (alt120) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1523:6: KW_DESCRIBE
					{
					KW_DESCRIBE426=(Token)match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement7434); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DESCRIBE.add(KW_DESCRIBE426);

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1523:18: KW_DESC
					{
					KW_DESC427=(Token)match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement7436); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DESC.add(KW_DESC427);

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1524:5: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) | ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr ) -> ^( TOK_DESCTABLE $parttype $descOptions) |parttype= tabPartColTypeExpr -> ^( TOK_DESCTABLE $parttype) )
			int alt125=4;
			int LA125_0 = input.LA(1);
			if ( (LA125_0==KW_DATABASE) && (synpred7_HiveASTParser())) {
				alt125=1;
			}
			else if ( (LA125_0==KW_SCHEMA) ) {
				int LA125_2 = input.LA(2);
				if ( (LA125_2==KW_EXTENDED) && (synpred7_HiveASTParser())) {
					alt125=1;
				}
				else if ( (LA125_2==Identifier) ) {
					int LA125_10 = input.LA(3);
					if ( (synpred7_HiveASTParser()) ) {
						alt125=1;
					}
					else if ( (true) ) {
						alt125=4;
					}

				}
				else if ( ((LA125_2 >= KW_ABORT && LA125_2 <= KW_AFTER)||LA125_2==KW_ANALYZE||LA125_2==KW_ARCHIVE||LA125_2==KW_ASC||(LA125_2 >= KW_AUTOCOMMIT && LA125_2 <= KW_BEFORE)||(LA125_2 >= KW_BUCKET && LA125_2 <= KW_BUCKETS)||(LA125_2 >= KW_CACHE && LA125_2 <= KW_CASCADE)||LA125_2==KW_CHANGE||(LA125_2 >= KW_CLUSTER && LA125_2 <= KW_COLLECTION)||(LA125_2 >= KW_COLUMNS && LA125_2 <= KW_COMMENT)||(LA125_2 >= KW_COMPACT && LA125_2 <= KW_CONCATENATE)||LA125_2==KW_CONTINUE||LA125_2==KW_DATA||LA125_2==KW_DATABASES||(LA125_2 >= KW_DATETIME && LA125_2 <= KW_DBPROPERTIES)||(LA125_2 >= KW_DEFERRED && LA125_2 <= KW_DEFINED)||(LA125_2 >= KW_DELIMITED && LA125_2 <= KW_DESC)||(LA125_2 >= KW_DETAIL && LA125_2 <= KW_DISABLE)||LA125_2==KW_DISTRIBUTE||LA125_2==KW_DOW||(LA125_2 >= KW_DUMP && LA125_2 <= KW_ELEM_TYPE)||LA125_2==KW_ENABLE||LA125_2==KW_ESCAPED||LA125_2==KW_EXCLUSIVE||(LA125_2 >= KW_EXPLAIN && LA125_2 <= KW_EXPRESSION)||(LA125_2 >= KW_FIELDS && LA125_2 <= KW_FIRST)||(LA125_2 >= KW_FORMAT && LA125_2 <= KW_FORMATTED)||LA125_2==KW_FUNCTIONS||(LA125_2 >= KW_HOUR && LA125_2 <= KW_IDXPROPERTIES)||(LA125_2 >= KW_INDEX && LA125_2 <= KW_INDEXES)||(LA125_2 >= KW_INPATH && LA125_2 <= KW_INPUTFORMAT)||(LA125_2 >= KW_ISOLATION && LA125_2 <= KW_JAR)||(LA125_2 >= KW_KEY && LA125_2 <= KW_LAST)||LA125_2==KW_LEVEL||(LA125_2 >= KW_LIMIT && LA125_2 <= KW_LOAD)||(LA125_2 >= KW_LOCATION && LA125_2 <= KW_LONG)||(LA125_2 >= KW_MAPJOIN && LA125_2 <= KW_MATERIALIZED)||LA125_2==KW_METADATA||(LA125_2 >= KW_MINUTE && LA125_2 <= KW_MONTH)||LA125_2==KW_MSCK||(LA125_2 >= KW_NORELY && LA125_2 <= KW_NOSCAN)||LA125_2==KW_NOVALIDATE||LA125_2==KW_NULLS||LA125_2==KW_OFFSET||(LA125_2 >= KW_OPERATOR && LA125_2 <= KW_OPTION)||(LA125_2 >= KW_OUTPUTDRIVER && LA125_2 <= KW_OUTPUTFORMAT)||(LA125_2 >= KW_OVERWRITE && LA125_2 <= KW_OWNER)||(LA125_2 >= KW_PARTITIONED && LA125_2 <= KW_PARTITIONS)||LA125_2==KW_PLUS||LA125_2==KW_PRETTY||LA125_2==KW_PRINCIPALS||(LA125_2 >= KW_PURGE && LA125_2 <= KW_QUARTER)||LA125_2==KW_READ||(LA125_2 >= KW_REBUILD && LA125_2 <= KW_RECORDWRITER)||(LA125_2 >= KW_RELOAD && LA125_2 <= KW_RESTRICT)||LA125_2==KW_REWRITE||(LA125_2 >= KW_ROLE && LA125_2 <= KW_ROLES)||(LA125_2 >= KW_SCHEMA && LA125_2 <= KW_SECOND)||(LA125_2 >= KW_SEMI && LA125_2 <= KW_SERVER)||(LA125_2 >= KW_SETS && LA125_2 <= KW_SKEWED)||(LA125_2 >= KW_SNAPSHOT && LA125_2 <= KW_SSL)||(LA125_2 >= KW_STATISTICS && LA125_2 <= KW_SUMMARY)||LA125_2==KW_TABLES||(LA125_2 >= KW_TBLPROPERTIES && LA125_2 <= KW_TERMINATED)||LA125_2==KW_TINYINT||(LA125_2 >= KW_TOUCH && LA125_2 <= KW_TRANSACTIONS)||LA125_2==KW_UNARCHIVE||LA125_2==KW_UNDO||LA125_2==KW_UNIONTYPE||(LA125_2 >= KW_UNLOCK && LA125_2 <= KW_UNSIGNED)||(LA125_2 >= KW_URI && LA125_2 <= KW_USE)||(LA125_2 >= KW_UTC && LA125_2 <= KW_VALIDATE)||LA125_2==KW_VALUE_TYPE||(LA125_2 >= KW_VECTORIZATION && LA125_2 <= KW_WEEK)||LA125_2==KW_WHILE||(LA125_2 >= KW_WORK && LA125_2 <= KW_YEAR)||LA125_2==KW_BATCH||LA125_2==KW_DAYOFWEEK||LA125_2==KW_HOLD_DDLTIME||LA125_2==KW_IGNORE||LA125_2==KW_NO_DROP||LA125_2==KW_OFFLINE||LA125_2==KW_PROTECTION||LA125_2==KW_READONLY) ) {
					int LA125_11 = input.LA(3);
					if ( (synpred7_HiveASTParser()) ) {
						alt125=1;
					}
					else if ( (true) ) {
						alt125=4;
					}

				}
				else if ( (LA125_2==EOF||LA125_2==DOT||LA125_2==KW_PARTITION) ) {
					alt125=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA125_0==KW_FUNCTION) && (synpred8_HiveASTParser())) {
				alt125=2;
			}
			else if ( (LA125_0==KW_FORMATTED) ) {
				switch ( input.LA(2) ) {
				case Identifier:
					{
					int LA125_15 = input.LA(3);
					if ( (synpred9_HiveASTParser()) ) {
						alt125=3;
					}
					else if ( (true) ) {
						alt125=4;
					}

					}
					break;
				case KW_ABORT:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ASC:
				case KW_AUTOCOMMIT:
				case KW_BEFORE:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_CACHE:
				case KW_CASCADE:
				case KW_CHANGE:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONTINUE:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DBPROPERTIES:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DETAIL:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DOW:
				case KW_DUMP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ESCAPED:
				case KW_EXCLUSIVE:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXPRESSION:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FUNCTIONS:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LAST:
				case KW_LEVEL:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MAPJOIN:
				case KW_MATCHED:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MSCK:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOVALIDATE:
				case KW_NULLS:
				case KW_OFFSET:
				case KW_OPERATOR:
				case KW_OPTION:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PLUS:
				case KW_PRETTY:
				case KW_PRINCIPALS:
				case KW_PURGE:
				case KW_QUARTER:
				case KW_READ:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_RELOAD:
				case KW_RELY:
				case KW_RENAME:
				case KW_REPAIR:
				case KW_REPL:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESTRICT:
				case KW_REWRITE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SETS:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STATUS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_SUMMARY:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TINYINT:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONS:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNIONTYPE:
				case KW_UNLOCK:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_URI:
				case KW_USE:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUE_TYPE:
				case KW_VECTORIZATION:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_WAIT:
				case KW_WEEK:
				case KW_WHILE:
				case KW_WORK:
				case KW_WRITE:
				case KW_YEAR:
				case KW_BATCH:
				case KW_DAYOFWEEK:
				case KW_HOLD_DDLTIME:
				case KW_IGNORE:
				case KW_NO_DROP:
				case KW_OFFLINE:
				case KW_PROTECTION:
				case KW_READONLY:
					{
					int LA125_16 = input.LA(3);
					if ( (synpred9_HiveASTParser()) ) {
						alt125=3;
					}
					else if ( (true) ) {
						alt125=4;
					}

					}
					break;
				case EOF:
				case DOT:
				case KW_PARTITION:
					{
					alt125=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA125_0==KW_EXTENDED) && (synpred9_HiveASTParser())) {
				alt125=3;
			}
			else if ( (LA125_0==KW_PRETTY) ) {
				switch ( input.LA(2) ) {
				case Identifier:
					{
					int LA125_20 = input.LA(3);
					if ( (synpred9_HiveASTParser()) ) {
						alt125=3;
					}
					else if ( (true) ) {
						alt125=4;
					}

					}
					break;
				case KW_ABORT:
				case KW_ADD:
				case KW_ADMIN:
				case KW_AFTER:
				case KW_ANALYZE:
				case KW_ARCHIVE:
				case KW_ASC:
				case KW_AUTOCOMMIT:
				case KW_BEFORE:
				case KW_BUCKET:
				case KW_BUCKETS:
				case KW_CACHE:
				case KW_CASCADE:
				case KW_CHANGE:
				case KW_CLUSTER:
				case KW_CLUSTERED:
				case KW_CLUSTERSTATUS:
				case KW_COLLECTION:
				case KW_COLUMNS:
				case KW_COMMENT:
				case KW_COMPACT:
				case KW_COMPACTIONS:
				case KW_COMPUTE:
				case KW_CONCATENATE:
				case KW_CONTINUE:
				case KW_DATA:
				case KW_DATABASES:
				case KW_DATETIME:
				case KW_DAY:
				case KW_DBPROPERTIES:
				case KW_DEFERRED:
				case KW_DEFINED:
				case KW_DELIMITED:
				case KW_DEPENDENCY:
				case KW_DESC:
				case KW_DETAIL:
				case KW_DIRECTORIES:
				case KW_DIRECTORY:
				case KW_DISABLE:
				case KW_DISTRIBUTE:
				case KW_DOW:
				case KW_DUMP:
				case KW_ELEM_TYPE:
				case KW_ENABLE:
				case KW_ESCAPED:
				case KW_EXCLUSIVE:
				case KW_EXPLAIN:
				case KW_EXPORT:
				case KW_EXPRESSION:
				case KW_FIELDS:
				case KW_FILE:
				case KW_FILEFORMAT:
				case KW_FIRST:
				case KW_FORMAT:
				case KW_FORMATTED:
				case KW_FUNCTIONS:
				case KW_HOUR:
				case KW_IDXPROPERTIES:
				case KW_INDEX:
				case KW_INDEXES:
				case KW_INPATH:
				case KW_INPUTDRIVER:
				case KW_INPUTFORMAT:
				case KW_ISOLATION:
				case KW_ITEMS:
				case KW_JAR:
				case KW_KEY:
				case KW_KEYS:
				case KW_KEY_TYPE:
				case KW_LAST:
				case KW_LEVEL:
				case KW_LIMIT:
				case KW_LINES:
				case KW_LOAD:
				case KW_LOCATION:
				case KW_LOCK:
				case KW_LOCKS:
				case KW_LOGICAL:
				case KW_LONG:
				case KW_MAPJOIN:
				case KW_MATCHED:
				case KW_MATERIALIZED:
				case KW_METADATA:
				case KW_MINUTE:
				case KW_MONTH:
				case KW_MSCK:
				case KW_NORELY:
				case KW_NOSCAN:
				case KW_NOVALIDATE:
				case KW_NULLS:
				case KW_OFFSET:
				case KW_OPERATOR:
				case KW_OPTION:
				case KW_OUTPUTDRIVER:
				case KW_OUTPUTFORMAT:
				case KW_OVERWRITE:
				case KW_OWNER:
				case KW_PARTITIONED:
				case KW_PARTITIONS:
				case KW_PLUS:
				case KW_PRETTY:
				case KW_PRINCIPALS:
				case KW_PURGE:
				case KW_QUARTER:
				case KW_READ:
				case KW_REBUILD:
				case KW_RECORDREADER:
				case KW_RECORDWRITER:
				case KW_RELOAD:
				case KW_RELY:
				case KW_RENAME:
				case KW_REPAIR:
				case KW_REPL:
				case KW_REPLACE:
				case KW_REPLICATION:
				case KW_RESTRICT:
				case KW_REWRITE:
				case KW_ROLE:
				case KW_ROLES:
				case KW_SCHEMA:
				case KW_SCHEMAS:
				case KW_SECOND:
				case KW_SEMI:
				case KW_SERDE:
				case KW_SERDEPROPERTIES:
				case KW_SERVER:
				case KW_SETS:
				case KW_SHARED:
				case KW_SHOW:
				case KW_SHOW_DATABASE:
				case KW_SKEWED:
				case KW_SNAPSHOT:
				case KW_SORT:
				case KW_SORTED:
				case KW_SSL:
				case KW_STATISTICS:
				case KW_STATUS:
				case KW_STORED:
				case KW_STREAMTABLE:
				case KW_STRING:
				case KW_STRUCT:
				case KW_SUMMARY:
				case KW_TABLES:
				case KW_TBLPROPERTIES:
				case KW_TEMPORARY:
				case KW_TERMINATED:
				case KW_TINYINT:
				case KW_TOUCH:
				case KW_TRANSACTION:
				case KW_TRANSACTIONS:
				case KW_UNARCHIVE:
				case KW_UNDO:
				case KW_UNIONTYPE:
				case KW_UNLOCK:
				case KW_UNSET:
				case KW_UNSIGNED:
				case KW_URI:
				case KW_USE:
				case KW_UTC:
				case KW_UTCTIMESTAMP:
				case KW_VALIDATE:
				case KW_VALUE_TYPE:
				case KW_VECTORIZATION:
				case KW_VIEW:
				case KW_VIEWS:
				case KW_WAIT:
				case KW_WEEK:
				case KW_WHILE:
				case KW_WORK:
				case KW_WRITE:
				case KW_YEAR:
				case KW_BATCH:
				case KW_DAYOFWEEK:
				case KW_HOLD_DDLTIME:
				case KW_IGNORE:
				case KW_NO_DROP:
				case KW_OFFLINE:
				case KW_PROTECTION:
				case KW_READONLY:
					{
					int LA125_21 = input.LA(3);
					if ( (synpred9_HiveASTParser()) ) {
						alt125=3;
					}
					else if ( (true) ) {
						alt125=4;
					}

					}
					break;
				case EOF:
				case DOT:
				case KW_PARTITION:
					{
					alt125=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 125, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}
			else if ( (LA125_0==Identifier||(LA125_0 >= KW_ABORT && LA125_0 <= KW_AFTER)||LA125_0==KW_ANALYZE||LA125_0==KW_ARCHIVE||LA125_0==KW_ASC||(LA125_0 >= KW_AUTOCOMMIT && LA125_0 <= KW_BEFORE)||(LA125_0 >= KW_BUCKET && LA125_0 <= KW_BUCKETS)||(LA125_0 >= KW_CACHE && LA125_0 <= KW_CASCADE)||LA125_0==KW_CHANGE||(LA125_0 >= KW_CLUSTER && LA125_0 <= KW_COLLECTION)||(LA125_0 >= KW_COLUMNS && LA125_0 <= KW_COMMENT)||(LA125_0 >= KW_COMPACT && LA125_0 <= KW_CONCATENATE)||LA125_0==KW_CONTINUE||LA125_0==KW_DATA||LA125_0==KW_DATABASES||(LA125_0 >= KW_DATETIME && LA125_0 <= KW_DBPROPERTIES)||(LA125_0 >= KW_DEFERRED && LA125_0 <= KW_DEFINED)||(LA125_0 >= KW_DELIMITED && LA125_0 <= KW_DESC)||(LA125_0 >= KW_DETAIL && LA125_0 <= KW_DISABLE)||LA125_0==KW_DISTRIBUTE||LA125_0==KW_DOW||(LA125_0 >= KW_DUMP && LA125_0 <= KW_ELEM_TYPE)||LA125_0==KW_ENABLE||LA125_0==KW_ESCAPED||LA125_0==KW_EXCLUSIVE||(LA125_0 >= KW_EXPLAIN && LA125_0 <= KW_EXPRESSION)||(LA125_0 >= KW_FIELDS && LA125_0 <= KW_FIRST)||LA125_0==KW_FORMAT||LA125_0==KW_FUNCTIONS||(LA125_0 >= KW_HOUR && LA125_0 <= KW_IDXPROPERTIES)||(LA125_0 >= KW_INDEX && LA125_0 <= KW_INDEXES)||(LA125_0 >= KW_INPATH && LA125_0 <= KW_INPUTFORMAT)||(LA125_0 >= KW_ISOLATION && LA125_0 <= KW_JAR)||(LA125_0 >= KW_KEY && LA125_0 <= KW_LAST)||LA125_0==KW_LEVEL||(LA125_0 >= KW_LIMIT && LA125_0 <= KW_LOAD)||(LA125_0 >= KW_LOCATION && LA125_0 <= KW_LONG)||(LA125_0 >= KW_MAPJOIN && LA125_0 <= KW_MATERIALIZED)||LA125_0==KW_METADATA||(LA125_0 >= KW_MINUTE && LA125_0 <= KW_MONTH)||LA125_0==KW_MSCK||(LA125_0 >= KW_NORELY && LA125_0 <= KW_NOSCAN)||LA125_0==KW_NOVALIDATE||LA125_0==KW_NULLS||LA125_0==KW_OFFSET||(LA125_0 >= KW_OPERATOR && LA125_0 <= KW_OPTION)||(LA125_0 >= KW_OUTPUTDRIVER && LA125_0 <= KW_OUTPUTFORMAT)||(LA125_0 >= KW_OVERWRITE && LA125_0 <= KW_OWNER)||(LA125_0 >= KW_PARTITIONED && LA125_0 <= KW_PARTITIONS)||LA125_0==KW_PLUS||LA125_0==KW_PRINCIPALS||(LA125_0 >= KW_PURGE && LA125_0 <= KW_QUARTER)||LA125_0==KW_READ||(LA125_0 >= KW_REBUILD && LA125_0 <= KW_RECORDWRITER)||(LA125_0 >= KW_RELOAD && LA125_0 <= KW_RESTRICT)||LA125_0==KW_REWRITE||(LA125_0 >= KW_ROLE && LA125_0 <= KW_ROLES)||(LA125_0 >= KW_SCHEMAS && LA125_0 <= KW_SECOND)||(LA125_0 >= KW_SEMI && LA125_0 <= KW_SERVER)||(LA125_0 >= KW_SETS && LA125_0 <= KW_SKEWED)||(LA125_0 >= KW_SNAPSHOT && LA125_0 <= KW_SSL)||(LA125_0 >= KW_STATISTICS && LA125_0 <= KW_SUMMARY)||LA125_0==KW_TABLES||(LA125_0 >= KW_TBLPROPERTIES && LA125_0 <= KW_TERMINATED)||LA125_0==KW_TINYINT||(LA125_0 >= KW_TOUCH && LA125_0 <= KW_TRANSACTIONS)||LA125_0==KW_UNARCHIVE||LA125_0==KW_UNDO||LA125_0==KW_UNIONTYPE||(LA125_0 >= KW_UNLOCK && LA125_0 <= KW_UNSIGNED)||(LA125_0 >= KW_URI && LA125_0 <= KW_USE)||(LA125_0 >= KW_UTC && LA125_0 <= KW_VALIDATE)||LA125_0==KW_VALUE_TYPE||(LA125_0 >= KW_VECTORIZATION && LA125_0 <= KW_WEEK)||LA125_0==KW_WHILE||(LA125_0 >= KW_WORK && LA125_0 <= KW_YEAR)||LA125_0==KW_BATCH||LA125_0==KW_DAYOFWEEK||LA125_0==KW_HOLD_DDLTIME||LA125_0==KW_IGNORE||LA125_0==KW_NO_DROP||LA125_0==KW_OFFLINE||LA125_0==KW_PROTECTION||LA125_0==KW_READONLY) ) {
				alt125=4;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 125, 0, input);
				throw nvae;
			}

			switch (alt125) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1525:5: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) ( KW_EXTENDED )? (dbName= identifier )
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1525:32: ( KW_DATABASE | KW_SCHEMA )
					int alt121=2;
					int LA121_0 = input.LA(1);
					if ( (LA121_0==KW_DATABASE) ) {
						alt121=1;
					}
					else if ( (LA121_0==KW_SCHEMA) ) {
						alt121=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 121, 0, input);
						throw nvae;
					}

					switch (alt121) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1525:33: KW_DATABASE
							{
							KW_DATABASE428=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_descStatement7458); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE428);

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1525:45: KW_SCHEMA
							{
							KW_SCHEMA429=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_descStatement7460); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA429);

							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1525:56: ( KW_EXTENDED )?
					int alt122=2;
					int LA122_0 = input.LA(1);
					if ( (LA122_0==KW_EXTENDED) ) {
						alt122=1;
					}
					switch (alt122) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1525:56: KW_EXTENDED
							{
							KW_EXTENDED430=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement7463); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED430);

							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1525:69: (dbName= identifier )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1525:70: dbName= identifier
					{
					pushFollow(FOLLOW_identifier_in_descStatement7469);
					dbName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(dbName.getTree());
					}

					// AST REWRITE
					// elements: KW_EXTENDED, dbName
					// token labels: 
					// rule labels: dbName, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_dbName=new RewriteRuleSubtreeStream(adaptor,"rule dbName",dbName!=null?dbName.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1525:89: -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1525:92: ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESCDATABASE, "TOK_DESCDATABASE"), root_1);
						adaptor.addChild(root_1, stream_dbName.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1525:119: ( KW_EXTENDED )?
						if ( stream_KW_EXTENDED.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_EXTENDED.nextNode());
						}
						stream_KW_EXTENDED.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1527:5: ( KW_FUNCTION )=> KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames )
					{
					KW_FUNCTION431=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_descStatement7500); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION431);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1527:34: ( KW_EXTENDED )?
					int alt123=2;
					int LA123_0 = input.LA(1);
					if ( (LA123_0==KW_EXTENDED) ) {
						alt123=1;
					}
					switch (alt123) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1527:34: KW_EXTENDED
							{
							KW_EXTENDED432=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement7502); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED432);

							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1527:47: (name= descFuncNames )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1527:48: name= descFuncNames
					{
					pushFollow(FOLLOW_descFuncNames_in_descStatement7508);
					name=descFuncNames();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_descFuncNames.add(name.getTree());
					}

					// AST REWRITE
					// elements: name, KW_EXTENDED
					// token labels: 
					// rule labels: name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1527:68: -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1527:71: ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESCFUNCTION, "TOK_DESCFUNCTION"), root_1);
						adaptor.addChild(root_1, stream_name.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1527:96: ( KW_EXTENDED )?
						if ( stream_KW_EXTENDED.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_EXTENDED.nextNode());
						}
						stream_KW_EXTENDED.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1529:5: ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )=> ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr )
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1529:45: ( (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1529:46: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY ) parttype= tabPartColTypeExpr
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1529:46: (descOptions= KW_FORMATTED |descOptions= KW_EXTENDED |descOptions= KW_PRETTY )
					int alt124=3;
					switch ( input.LA(1) ) {
					case KW_FORMATTED:
						{
						alt124=1;
						}
						break;
					case KW_EXTENDED:
						{
						alt124=2;
						}
						break;
					case KW_PRETTY:
						{
						alt124=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 124, 0, input);
						throw nvae;
					}
					switch (alt124) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1529:47: descOptions= KW_FORMATTED
							{
							descOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_descStatement7547); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_FORMATTED.add(descOptions);

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1529:72: descOptions= KW_EXTENDED
							{
							descOptions=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement7551); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_EXTENDED.add(descOptions);

							}
							break;
						case 3 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1529:96: descOptions= KW_PRETTY
							{
							descOptions=(Token)match(input,KW_PRETTY,FOLLOW_KW_PRETTY_in_descStatement7555); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_PRETTY.add(descOptions);

							}
							break;

					}

					pushFollow(FOLLOW_tabPartColTypeExpr_in_descStatement7560);
					parttype=tabPartColTypeExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tabPartColTypeExpr.add(parttype.getTree());
					}

					// AST REWRITE
					// elements: parttype, descOptions
					// token labels: descOptions
					// rule labels: parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_descOptions=new RewriteRuleTokenStream(adaptor,"token descOptions",descOptions);
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1529:148: -> ^( TOK_DESCTABLE $parttype $descOptions)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1529:151: ^( TOK_DESCTABLE $parttype $descOptions)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						adaptor.addChild(root_1, stream_descOptions.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1531:5: parttype= tabPartColTypeExpr
					{
					pushFollow(FOLLOW_tabPartColTypeExpr_in_descStatement7587);
					parttype=tabPartColTypeExpr();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tabPartColTypeExpr.add(parttype.getTree());
					// AST REWRITE
					// elements: parttype
					// token labels: 
					// rule labels: parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1531:33: -> ^( TOK_DESCTABLE $parttype)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1531:36: ^( TOK_DESCTABLE $parttype)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "descStatement"


	public static class analyzeStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "analyzeStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1535:1: analyzeStatement : KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) ) ;
	public final HiveASTParser.analyzeStatement_return analyzeStatement() throws RecognitionException {
		HiveASTParser.analyzeStatement_return retval = new HiveASTParser.analyzeStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token noscan=null;
		Token partialscan=null;
		Token KW_ANALYZE433=null;
		Token KW_TABLE434=null;
		Token KW_COMPUTE435=null;
		Token KW_STATISTICS436=null;
		Token KW_FOR437=null;
		Token KW_COLUMNS438=null;
		Token KW_CACHE439=null;
		Token KW_METADATA440=null;
		ParserRuleReturnScope parttype =null;
		ParserRuleReturnScope statsColumnName =null;

		HiveParserASTNode noscan_tree=null;
		HiveParserASTNode partialscan_tree=null;
		HiveParserASTNode KW_ANALYZE433_tree=null;
		HiveParserASTNode KW_TABLE434_tree=null;
		HiveParserASTNode KW_COMPUTE435_tree=null;
		HiveParserASTNode KW_STATISTICS436_tree=null;
		HiveParserASTNode KW_FOR437_tree=null;
		HiveParserASTNode KW_COLUMNS438_tree=null;
		HiveParserASTNode KW_CACHE439_tree=null;
		HiveParserASTNode KW_METADATA440_tree=null;
		RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
		RewriteRuleTokenStream stream_KW_ANALYZE=new RewriteRuleTokenStream(adaptor,"token KW_ANALYZE");
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_PARTIALSCAN=new RewriteRuleTokenStream(adaptor,"token KW_PARTIALSCAN");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_COMPUTE=new RewriteRuleTokenStream(adaptor,"token KW_COMPUTE");
		RewriteRuleTokenStream stream_KW_METADATA=new RewriteRuleTokenStream(adaptor,"token KW_METADATA");
		RewriteRuleTokenStream stream_KW_NOSCAN=new RewriteRuleTokenStream(adaptor,"token KW_NOSCAN");
		RewriteRuleTokenStream stream_KW_CACHE=new RewriteRuleTokenStream(adaptor,"token KW_CACHE");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("analyze statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1538:5: ( KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1538:7: KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) )
			{
			KW_ANALYZE433=(Token)match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_analyzeStatement7629); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ANALYZE.add(KW_ANALYZE433);

			KW_TABLE434=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_analyzeStatement7631); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE434);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1538:27: (parttype= tableOrPartition )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1538:28: parttype= tableOrPartition
			{
			pushFollow(FOLLOW_tableOrPartition_in_analyzeStatement7636);
			parttype=tableOrPartition();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableOrPartition.add(parttype.getTree());
			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1539:7: ( ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )? -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? ) | ( KW_CACHE )=> KW_CACHE KW_METADATA -> ^( TOK_CACHE_METADATA $parttype) )
			int alt128=2;
			int LA128_0 = input.LA(1);
			if ( (LA128_0==KW_COMPUTE) && (synpred10_HiveASTParser())) {
				alt128=1;
			}
			else if ( (LA128_0==KW_CACHE) && (synpred11_HiveASTParser())) {
				alt128=2;
			}

			switch (alt128) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1540:7: ( KW_COMPUTE )=> KW_COMPUTE KW_STATISTICS ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )?
					{
					KW_COMPUTE435=(Token)match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_analyzeStatement7659); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMPUTE.add(KW_COMPUTE435);

					KW_STATISTICS436=(Token)match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_analyzeStatement7661); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STATISTICS.add(KW_STATISTICS436);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1540:48: ( (noscan= KW_NOSCAN ) | (partialscan= KW_PARTIALSCAN ) | ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? ) )?
					int alt127=4;
					switch ( input.LA(1) ) {
						case KW_NOSCAN:
							{
							alt127=1;
							}
							break;
						case KW_PARTIALSCAN:
							{
							alt127=2;
							}
							break;
						case KW_FOR:
							{
							alt127=3;
							}
							break;
					}
					switch (alt127) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1540:49: (noscan= KW_NOSCAN )
							{
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1540:49: (noscan= KW_NOSCAN )
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1540:50: noscan= KW_NOSCAN
							{
							noscan=(Token)match(input,KW_NOSCAN,FOLLOW_KW_NOSCAN_in_analyzeStatement7667); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_NOSCAN.add(noscan);

							}

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1540:70: (partialscan= KW_PARTIALSCAN )
							{
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1540:70: (partialscan= KW_PARTIALSCAN )
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1540:71: partialscan= KW_PARTIALSCAN
							{
							partialscan=(Token)match(input,KW_PARTIALSCAN,FOLLOW_KW_PARTIALSCAN_in_analyzeStatement7675); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_PARTIALSCAN.add(partialscan);

							}

							}
							break;
						case 3 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1541:57: ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? )
							{
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1541:57: ( KW_FOR KW_COLUMNS (statsColumnName= columnNameList )? )
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1541:58: KW_FOR KW_COLUMNS (statsColumnName= columnNameList )?
							{
							KW_FOR437=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_analyzeStatement7735); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR437);

							KW_COLUMNS438=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_analyzeStatement7737); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS438);

							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1541:76: (statsColumnName= columnNameList )?
							int alt126=2;
							int LA126_0 = input.LA(1);
							if ( (LA126_0==Identifier||(LA126_0 >= KW_ABORT && LA126_0 <= KW_AFTER)||LA126_0==KW_ANALYZE||LA126_0==KW_ARCHIVE||LA126_0==KW_ASC||(LA126_0 >= KW_AUTOCOMMIT && LA126_0 <= KW_BEFORE)||(LA126_0 >= KW_BUCKET && LA126_0 <= KW_BUCKETS)||(LA126_0 >= KW_CACHE && LA126_0 <= KW_CASCADE)||LA126_0==KW_CHANGE||(LA126_0 >= KW_CLUSTER && LA126_0 <= KW_COLLECTION)||(LA126_0 >= KW_COLUMNS && LA126_0 <= KW_COMMENT)||(LA126_0 >= KW_COMPACT && LA126_0 <= KW_CONCATENATE)||LA126_0==KW_CONTINUE||LA126_0==KW_DATA||LA126_0==KW_DATABASES||(LA126_0 >= KW_DATETIME && LA126_0 <= KW_DBPROPERTIES)||(LA126_0 >= KW_DEFERRED && LA126_0 <= KW_DEFINED)||(LA126_0 >= KW_DELIMITED && LA126_0 <= KW_DESC)||(LA126_0 >= KW_DETAIL && LA126_0 <= KW_DISABLE)||LA126_0==KW_DISTRIBUTE||LA126_0==KW_DOW||(LA126_0 >= KW_DUMP && LA126_0 <= KW_ELEM_TYPE)||LA126_0==KW_ENABLE||LA126_0==KW_ESCAPED||LA126_0==KW_EXCLUSIVE||(LA126_0 >= KW_EXPLAIN && LA126_0 <= KW_EXPRESSION)||(LA126_0 >= KW_FIELDS && LA126_0 <= KW_FIRST)||(LA126_0 >= KW_FORMAT && LA126_0 <= KW_FORMATTED)||LA126_0==KW_FUNCTIONS||(LA126_0 >= KW_HOUR && LA126_0 <= KW_IDXPROPERTIES)||(LA126_0 >= KW_INDEX && LA126_0 <= KW_INDEXES)||(LA126_0 >= KW_INPATH && LA126_0 <= KW_INPUTFORMAT)||(LA126_0 >= KW_ISOLATION && LA126_0 <= KW_JAR)||(LA126_0 >= KW_KEY && LA126_0 <= KW_LAST)||LA126_0==KW_LEVEL||(LA126_0 >= KW_LIMIT && LA126_0 <= KW_LOAD)||(LA126_0 >= KW_LOCATION && LA126_0 <= KW_LONG)||(LA126_0 >= KW_MAPJOIN && LA126_0 <= KW_MATERIALIZED)||LA126_0==KW_METADATA||(LA126_0 >= KW_MINUTE && LA126_0 <= KW_MONTH)||LA126_0==KW_MSCK||(LA126_0 >= KW_NORELY && LA126_0 <= KW_NOSCAN)||LA126_0==KW_NOVALIDATE||LA126_0==KW_NULLS||LA126_0==KW_OFFSET||(LA126_0 >= KW_OPERATOR && LA126_0 <= KW_OPTION)||(LA126_0 >= KW_OUTPUTDRIVER && LA126_0 <= KW_OUTPUTFORMAT)||(LA126_0 >= KW_OVERWRITE && LA126_0 <= KW_OWNER)||(LA126_0 >= KW_PARTITIONED && LA126_0 <= KW_PARTITIONS)||LA126_0==KW_PLUS||LA126_0==KW_PRETTY||LA126_0==KW_PRINCIPALS||(LA126_0 >= KW_PURGE && LA126_0 <= KW_QUARTER)||LA126_0==KW_READ||(LA126_0 >= KW_REBUILD && LA126_0 <= KW_RECORDWRITER)||(LA126_0 >= KW_RELOAD && LA126_0 <= KW_RESTRICT)||LA126_0==KW_REWRITE||(LA126_0 >= KW_ROLE && LA126_0 <= KW_ROLES)||(LA126_0 >= KW_SCHEMA && LA126_0 <= KW_SECOND)||(LA126_0 >= KW_SEMI && LA126_0 <= KW_SERVER)||(LA126_0 >= KW_SETS && LA126_0 <= KW_SKEWED)||(LA126_0 >= KW_SNAPSHOT && LA126_0 <= KW_SSL)||(LA126_0 >= KW_STATISTICS && LA126_0 <= KW_SUMMARY)||LA126_0==KW_TABLES||(LA126_0 >= KW_TBLPROPERTIES && LA126_0 <= KW_TERMINATED)||LA126_0==KW_TINYINT||(LA126_0 >= KW_TOUCH && LA126_0 <= KW_TRANSACTIONS)||LA126_0==KW_UNARCHIVE||LA126_0==KW_UNDO||LA126_0==KW_UNIONTYPE||(LA126_0 >= KW_UNLOCK && LA126_0 <= KW_UNSIGNED)||(LA126_0 >= KW_URI && LA126_0 <= KW_USE)||(LA126_0 >= KW_UTC && LA126_0 <= KW_VALIDATE)||LA126_0==KW_VALUE_TYPE||(LA126_0 >= KW_VECTORIZATION && LA126_0 <= KW_WEEK)||LA126_0==KW_WHILE||(LA126_0 >= KW_WORK && LA126_0 <= KW_YEAR)||LA126_0==KW_BATCH||LA126_0==KW_DAYOFWEEK||LA126_0==KW_HOLD_DDLTIME||LA126_0==KW_IGNORE||LA126_0==KW_NO_DROP||LA126_0==KW_OFFLINE||LA126_0==KW_PROTECTION||LA126_0==KW_READONLY) ) {
								alt126=1;
							}
							switch (alt126) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1541:77: statsColumnName= columnNameList
									{
									pushFollow(FOLLOW_columnNameList_in_analyzeStatement7742);
									statsColumnName=columnNameList();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_columnNameList.add(statsColumnName.getTree());
									}
									break;

							}

							}

							}
							break;

					}

					// AST REWRITE
					// elements: statsColumnName, noscan, partialscan, KW_COLUMNS, parttype
					// token labels: partialscan, noscan
					// rule labels: statsColumnName, parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_partialscan=new RewriteRuleTokenStream(adaptor,"token partialscan",partialscan);
					RewriteRuleTokenStream stream_noscan=new RewriteRuleTokenStream(adaptor,"token noscan",noscan);
					RewriteRuleSubtreeStream stream_statsColumnName=new RewriteRuleSubtreeStream(adaptor,"rule statsColumnName",statsColumnName!=null?statsColumnName.getTree():null);
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1542:7: -> ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1542:10: ^( TOK_ANALYZE $parttype ( $noscan)? ( $partialscan)? ( KW_COLUMNS )? ( $statsColumnName)? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ANALYZE, "TOK_ANALYZE"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1542:35: ( $noscan)?
						if ( stream_noscan.hasNext() ) {
							adaptor.addChild(root_1, stream_noscan.nextNode());
						}
						stream_noscan.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1542:44: ( $partialscan)?
						if ( stream_partialscan.hasNext() ) {
							adaptor.addChild(root_1, stream_partialscan.nextNode());
						}
						stream_partialscan.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1542:57: ( KW_COLUMNS )?
						if ( stream_KW_COLUMNS.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_COLUMNS.nextNode());
						}
						stream_KW_COLUMNS.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1542:70: ( $statsColumnName)?
						if ( stream_statsColumnName.hasNext() ) {
							adaptor.addChild(root_1, stream_statsColumnName.nextTree());
						}
						stream_statsColumnName.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1544:7: ( KW_CACHE )=> KW_CACHE KW_METADATA
					{
					KW_CACHE439=(Token)match(input,KW_CACHE,FOLLOW_KW_CACHE_in_analyzeStatement7799); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CACHE.add(KW_CACHE439);

					KW_METADATA440=(Token)match(input,KW_METADATA,FOLLOW_KW_METADATA_in_analyzeStatement7801); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_METADATA.add(KW_METADATA440);

					// AST REWRITE
					// elements: parttype
					// token labels: 
					// rule labels: parttype, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1544:42: -> ^( TOK_CACHE_METADATA $parttype)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1544:45: ^( TOK_CACHE_METADATA $parttype)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CACHE_METADATA, "TOK_CACHE_METADATA"), root_1);
						adaptor.addChild(root_1, stream_parttype.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "analyzeStatement"


	public static class showStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "showStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1548:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWCOLUMNS tableName ( $db_name)? ) | KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ) | KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? ) | KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) | KW_SHOW KW_COMPACTIONS -> ^( TOK_SHOW_COMPACTIONS ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) | KW_SHOW KW_CONF StringLiteral -> ^( TOK_SHOWCONF StringLiteral ) );
	public final HiveASTParser.showStatement_return showStatement() throws RecognitionException {
		HiveASTParser.showStatement_return retval = new HiveASTParser.showStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token prptyName=null;
		Token dbName=null;
		Token isExtended=null;
		Token showOptions=null;
		Token KW_SHOW441=null;
		Token KW_DATABASES442=null;
		Token KW_SCHEMAS443=null;
		Token KW_LIKE444=null;
		Token KW_SHOW446=null;
		Token KW_TABLES447=null;
		Token KW_FROM448=null;
		Token KW_IN449=null;
		Token KW_LIKE450=null;
		Token KW_SHOW453=null;
		Token KW_VIEWS454=null;
		Token KW_FROM455=null;
		Token KW_IN456=null;
		Token KW_LIKE457=null;
		Token KW_SHOW460=null;
		Token KW_COLUMNS461=null;
		Token KW_FROM462=null;
		Token KW_IN463=null;
		Token KW_FROM465=null;
		Token KW_IN466=null;
		Token KW_SHOW467=null;
		Token KW_FUNCTIONS468=null;
		Token KW_LIKE469=null;
		Token KW_SHOW472=null;
		Token KW_PARTITIONS473=null;
		Token KW_SHOW475=null;
		Token KW_CREATE476=null;
		Token KW_DATABASE477=null;
		Token KW_SCHEMA478=null;
		Token KW_TABLE479=null;
		Token KW_SHOW480=null;
		Token KW_TABLE481=null;
		Token KW_EXTENDED482=null;
		Token KW_FROM483=null;
		Token KW_IN484=null;
		Token KW_LIKE485=null;
		Token KW_SHOW488=null;
		Token KW_TBLPROPERTIES489=null;
		Token LPAREN491=null;
		Token RPAREN492=null;
		Token KW_SHOW493=null;
		Token KW_LOCKS494=null;
		Token KW_DATABASE495=null;
		Token KW_SCHEMA496=null;
		Token KW_SHOW497=null;
		Token KW_INDEX498=null;
		Token KW_INDEXES499=null;
		Token KW_ON500=null;
		Token KW_FROM502=null;
		Token KW_IN503=null;
		Token KW_SHOW504=null;
		Token KW_COMPACTIONS505=null;
		Token KW_SHOW506=null;
		Token KW_TRANSACTIONS507=null;
		Token KW_SHOW508=null;
		Token KW_CONF509=null;
		Token StringLiteral510=null;
		ParserRuleReturnScope db_name =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope parttype =null;
		ParserRuleReturnScope showStmtIdentifier445 =null;
		ParserRuleReturnScope showStmtIdentifier451 =null;
		ParserRuleReturnScope showStmtIdentifier452 =null;
		ParserRuleReturnScope showStmtIdentifier458 =null;
		ParserRuleReturnScope showStmtIdentifier459 =null;
		ParserRuleReturnScope tableName464 =null;
		ParserRuleReturnScope showFunctionIdentifier470 =null;
		ParserRuleReturnScope showFunctionIdentifier471 =null;
		ParserRuleReturnScope partitionSpec474 =null;
		ParserRuleReturnScope showStmtIdentifier486 =null;
		ParserRuleReturnScope partitionSpec487 =null;
		ParserRuleReturnScope tableName490 =null;
		ParserRuleReturnScope showStmtIdentifier501 =null;

		HiveParserASTNode prptyName_tree=null;
		HiveParserASTNode dbName_tree=null;
		HiveParserASTNode isExtended_tree=null;
		HiveParserASTNode showOptions_tree=null;
		HiveParserASTNode KW_SHOW441_tree=null;
		HiveParserASTNode KW_DATABASES442_tree=null;
		HiveParserASTNode KW_SCHEMAS443_tree=null;
		HiveParserASTNode KW_LIKE444_tree=null;
		HiveParserASTNode KW_SHOW446_tree=null;
		HiveParserASTNode KW_TABLES447_tree=null;
		HiveParserASTNode KW_FROM448_tree=null;
		HiveParserASTNode KW_IN449_tree=null;
		HiveParserASTNode KW_LIKE450_tree=null;
		HiveParserASTNode KW_SHOW453_tree=null;
		HiveParserASTNode KW_VIEWS454_tree=null;
		HiveParserASTNode KW_FROM455_tree=null;
		HiveParserASTNode KW_IN456_tree=null;
		HiveParserASTNode KW_LIKE457_tree=null;
		HiveParserASTNode KW_SHOW460_tree=null;
		HiveParserASTNode KW_COLUMNS461_tree=null;
		HiveParserASTNode KW_FROM462_tree=null;
		HiveParserASTNode KW_IN463_tree=null;
		HiveParserASTNode KW_FROM465_tree=null;
		HiveParserASTNode KW_IN466_tree=null;
		HiveParserASTNode KW_SHOW467_tree=null;
		HiveParserASTNode KW_FUNCTIONS468_tree=null;
		HiveParserASTNode KW_LIKE469_tree=null;
		HiveParserASTNode KW_SHOW472_tree=null;
		HiveParserASTNode KW_PARTITIONS473_tree=null;
		HiveParserASTNode KW_SHOW475_tree=null;
		HiveParserASTNode KW_CREATE476_tree=null;
		HiveParserASTNode KW_DATABASE477_tree=null;
		HiveParserASTNode KW_SCHEMA478_tree=null;
		HiveParserASTNode KW_TABLE479_tree=null;
		HiveParserASTNode KW_SHOW480_tree=null;
		HiveParserASTNode KW_TABLE481_tree=null;
		HiveParserASTNode KW_EXTENDED482_tree=null;
		HiveParserASTNode KW_FROM483_tree=null;
		HiveParserASTNode KW_IN484_tree=null;
		HiveParserASTNode KW_LIKE485_tree=null;
		HiveParserASTNode KW_SHOW488_tree=null;
		HiveParserASTNode KW_TBLPROPERTIES489_tree=null;
		HiveParserASTNode LPAREN491_tree=null;
		HiveParserASTNode RPAREN492_tree=null;
		HiveParserASTNode KW_SHOW493_tree=null;
		HiveParserASTNode KW_LOCKS494_tree=null;
		HiveParserASTNode KW_DATABASE495_tree=null;
		HiveParserASTNode KW_SCHEMA496_tree=null;
		HiveParserASTNode KW_SHOW497_tree=null;
		HiveParserASTNode KW_INDEX498_tree=null;
		HiveParserASTNode KW_INDEXES499_tree=null;
		HiveParserASTNode KW_ON500_tree=null;
		HiveParserASTNode KW_FROM502_tree=null;
		HiveParserASTNode KW_IN503_tree=null;
		HiveParserASTNode KW_SHOW504_tree=null;
		HiveParserASTNode KW_COMPACTIONS505_tree=null;
		HiveParserASTNode KW_SHOW506_tree=null;
		HiveParserASTNode KW_TRANSACTIONS507_tree=null;
		HiveParserASTNode KW_SHOW508_tree=null;
		HiveParserASTNode KW_CONF509_tree=null;
		HiveParserASTNode StringLiteral510_tree=null;
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_VIEWS=new RewriteRuleTokenStream(adaptor,"token KW_VIEWS");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
		RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
		RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
		RewriteRuleTokenStream stream_KW_LOCKS=new RewriteRuleTokenStream(adaptor,"token KW_LOCKS");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_TABLES=new RewriteRuleTokenStream(adaptor,"token KW_TABLES");
		RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
		RewriteRuleTokenStream stream_KW_CONF=new RewriteRuleTokenStream(adaptor,"token KW_CONF");
		RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
		RewriteRuleTokenStream stream_KW_TRANSACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTIONS");
		RewriteRuleTokenStream stream_KW_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMAS");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_COMPACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_COMPACTIONS");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_DATABASES=new RewriteRuleTokenStream(adaptor,"token KW_DATABASES");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_INDEXES=new RewriteRuleTokenStream(adaptor,"token KW_INDEXES");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
		RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_showFunctionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showFunctionIdentifier");
		RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("show statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1551:5: ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWCOLUMNS tableName ( $db_name)? ) | KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? ) | KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? ) | KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) ) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? ) | KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) | KW_SHOW KW_COMPACTIONS -> ^( TOK_SHOW_COMPACTIONS ) | KW_SHOW KW_TRANSACTIONS -> ^( TOK_SHOW_TRANSACTIONS ) | KW_SHOW KW_CONF StringLiteral -> ^( TOK_SHOWCONF StringLiteral ) )
			int alt157=14;
			int LA157_0 = input.LA(1);
			if ( (LA157_0==KW_SHOW) ) {
				switch ( input.LA(2) ) {
				case KW_TABLES:
					{
					alt157=2;
					}
					break;
				case KW_VIEWS:
					{
					alt157=3;
					}
					break;
				case KW_COLUMNS:
					{
					alt157=4;
					}
					break;
				case KW_FUNCTIONS:
					{
					alt157=5;
					}
					break;
				case KW_PARTITIONS:
					{
					alt157=6;
					}
					break;
				case KW_CREATE:
					{
					alt157=7;
					}
					break;
				case KW_TABLE:
					{
					alt157=8;
					}
					break;
				case KW_TBLPROPERTIES:
					{
					alt157=9;
					}
					break;
				case KW_LOCKS:
					{
					alt157=10;
					}
					break;
				case KW_COMPACTIONS:
					{
					alt157=12;
					}
					break;
				case KW_TRANSACTIONS:
					{
					alt157=13;
					}
					break;
				case KW_CONF:
					{
					alt157=14;
					}
					break;
				case KW_DATABASES:
				case KW_SCHEMAS:
					{
					alt157=1;
					}
					break;
				case KW_FORMATTED:
				case KW_INDEX:
				case KW_INDEXES:
					{
					alt157=11;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 157, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 157, 0, input);
				throw nvae;
			}

			switch (alt157) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1551:7: KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )?
					{
					KW_SHOW441=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7845); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW441);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1551:15: ( KW_DATABASES | KW_SCHEMAS )
					int alt129=2;
					int LA129_0 = input.LA(1);
					if ( (LA129_0==KW_DATABASES) ) {
						alt129=1;
					}
					else if ( (LA129_0==KW_SCHEMAS) ) {
						alt129=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 129, 0, input);
						throw nvae;
					}

					switch (alt129) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1551:16: KW_DATABASES
							{
							KW_DATABASES442=(Token)match(input,KW_DATABASES,FOLLOW_KW_DATABASES_in_showStatement7848); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASES.add(KW_DATABASES442);

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1551:29: KW_SCHEMAS
							{
							KW_SCHEMAS443=(Token)match(input,KW_SCHEMAS,FOLLOW_KW_SCHEMAS_in_showStatement7850); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMAS.add(KW_SCHEMAS443);

							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1551:41: ( KW_LIKE showStmtIdentifier )?
					int alt130=2;
					int LA130_0 = input.LA(1);
					if ( (LA130_0==KW_LIKE) ) {
						alt130=1;
					}
					switch (alt130) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1551:42: KW_LIKE showStmtIdentifier
							{
							KW_LIKE444=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7854); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE444);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7856);
							showStmtIdentifier445=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier445.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1551:71: -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1551:74: ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOWDATABASES, "TOK_SHOWDATABASES"), root_1);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1551:94: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:7: KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					{
					KW_SHOW446=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7875); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW446);

					KW_TABLES447=(Token)match(input,KW_TABLES,FOLLOW_KW_TABLES_in_showStatement7877); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLES.add(KW_TABLES447);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:25: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt132=2;
					int LA132_0 = input.LA(1);
					if ( (LA132_0==KW_FROM||LA132_0==KW_IN) ) {
						alt132=1;
					}
					switch (alt132) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:26: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:26: ( KW_FROM | KW_IN )
							int alt131=2;
							int LA131_0 = input.LA(1);
							if ( (LA131_0==KW_FROM) ) {
								alt131=1;
							}
							else if ( (LA131_0==KW_IN) ) {
								alt131=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 131, 0, input);
								throw nvae;
							}

							switch (alt131) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:27: KW_FROM
									{
									KW_FROM448=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7881); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM448);

									}
									break;
								case 2 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:35: KW_IN
									{
									KW_IN449=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7883); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN449);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7888);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:63: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					int alt133=3;
					int LA133_0 = input.LA(1);
					if ( (LA133_0==KW_LIKE) ) {
						alt133=1;
					}
					else if ( (LA133_0==Identifier||(LA133_0 >= KW_ABORT && LA133_0 <= KW_AFTER)||LA133_0==KW_ANALYZE||LA133_0==KW_ARCHIVE||LA133_0==KW_ASC||(LA133_0 >= KW_AUTOCOMMIT && LA133_0 <= KW_BEFORE)||(LA133_0 >= KW_BUCKET && LA133_0 <= KW_BUCKETS)||(LA133_0 >= KW_CACHE && LA133_0 <= KW_CASCADE)||LA133_0==KW_CHANGE||(LA133_0 >= KW_CLUSTER && LA133_0 <= KW_COLLECTION)||(LA133_0 >= KW_COLUMNS && LA133_0 <= KW_COMMENT)||(LA133_0 >= KW_COMPACT && LA133_0 <= KW_CONCATENATE)||LA133_0==KW_CONTINUE||LA133_0==KW_DATA||LA133_0==KW_DATABASES||(LA133_0 >= KW_DATETIME && LA133_0 <= KW_DBPROPERTIES)||(LA133_0 >= KW_DEFERRED && LA133_0 <= KW_DEFINED)||(LA133_0 >= KW_DELIMITED && LA133_0 <= KW_DESC)||(LA133_0 >= KW_DETAIL && LA133_0 <= KW_DISABLE)||LA133_0==KW_DISTRIBUTE||LA133_0==KW_DOW||(LA133_0 >= KW_DUMP && LA133_0 <= KW_ELEM_TYPE)||LA133_0==KW_ENABLE||LA133_0==KW_ESCAPED||LA133_0==KW_EXCLUSIVE||(LA133_0 >= KW_EXPLAIN && LA133_0 <= KW_EXPRESSION)||(LA133_0 >= KW_FIELDS && LA133_0 <= KW_FIRST)||(LA133_0 >= KW_FORMAT && LA133_0 <= KW_FORMATTED)||LA133_0==KW_FUNCTIONS||(LA133_0 >= KW_HOUR && LA133_0 <= KW_IDXPROPERTIES)||(LA133_0 >= KW_INDEX && LA133_0 <= KW_INDEXES)||(LA133_0 >= KW_INPATH && LA133_0 <= KW_INPUTFORMAT)||(LA133_0 >= KW_ISOLATION && LA133_0 <= KW_JAR)||(LA133_0 >= KW_KEY && LA133_0 <= KW_LAST)||LA133_0==KW_LEVEL||(LA133_0 >= KW_LIMIT && LA133_0 <= KW_LOAD)||(LA133_0 >= KW_LOCATION && LA133_0 <= KW_LONG)||(LA133_0 >= KW_MAPJOIN && LA133_0 <= KW_MATERIALIZED)||LA133_0==KW_METADATA||(LA133_0 >= KW_MINUTE && LA133_0 <= KW_MONTH)||LA133_0==KW_MSCK||(LA133_0 >= KW_NORELY && LA133_0 <= KW_NOSCAN)||LA133_0==KW_NOVALIDATE||LA133_0==KW_NULLS||LA133_0==KW_OFFSET||(LA133_0 >= KW_OPERATOR && LA133_0 <= KW_OPTION)||(LA133_0 >= KW_OUTPUTDRIVER && LA133_0 <= KW_OUTPUTFORMAT)||(LA133_0 >= KW_OVERWRITE && LA133_0 <= KW_OWNER)||(LA133_0 >= KW_PARTITIONED && LA133_0 <= KW_PARTITIONS)||LA133_0==KW_PLUS||LA133_0==KW_PRETTY||LA133_0==KW_PRINCIPALS||(LA133_0 >= KW_PURGE && LA133_0 <= KW_QUARTER)||LA133_0==KW_READ||(LA133_0 >= KW_REBUILD && LA133_0 <= KW_RECORDWRITER)||(LA133_0 >= KW_RELOAD && LA133_0 <= KW_RESTRICT)||LA133_0==KW_REWRITE||(LA133_0 >= KW_ROLE && LA133_0 <= KW_ROLES)||(LA133_0 >= KW_SCHEMA && LA133_0 <= KW_SECOND)||(LA133_0 >= KW_SEMI && LA133_0 <= KW_SERVER)||(LA133_0 >= KW_SETS && LA133_0 <= KW_SKEWED)||(LA133_0 >= KW_SNAPSHOT && LA133_0 <= KW_SSL)||(LA133_0 >= KW_STATISTICS && LA133_0 <= KW_SUMMARY)||LA133_0==KW_TABLES||(LA133_0 >= KW_TBLPROPERTIES && LA133_0 <= KW_TERMINATED)||LA133_0==KW_TINYINT||(LA133_0 >= KW_TOUCH && LA133_0 <= KW_TRANSACTIONS)||LA133_0==KW_UNARCHIVE||LA133_0==KW_UNDO||LA133_0==KW_UNIONTYPE||(LA133_0 >= KW_UNLOCK && LA133_0 <= KW_UNSIGNED)||(LA133_0 >= KW_URI && LA133_0 <= KW_USE)||(LA133_0 >= KW_UTC && LA133_0 <= KW_VALIDATE)||LA133_0==KW_VALUE_TYPE||(LA133_0 >= KW_VECTORIZATION && LA133_0 <= KW_WEEK)||LA133_0==KW_WHILE||(LA133_0 >= KW_WORK && LA133_0 <= KW_YEAR)||LA133_0==StringLiteral||LA133_0==KW_BATCH||LA133_0==KW_DAYOFWEEK||LA133_0==KW_HOLD_DDLTIME||LA133_0==KW_IGNORE||LA133_0==KW_NO_DROP||LA133_0==KW_OFFLINE||LA133_0==KW_PROTECTION||LA133_0==KW_READONLY) ) {
						alt133=2;
					}
					switch (alt133) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:64: KW_LIKE showStmtIdentifier
							{
							KW_LIKE450=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7893); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE450);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7895);
							showStmtIdentifier451=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier451.getTree());
							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:91: showStmtIdentifier
							{
							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7897);
							showStmtIdentifier452=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier452.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier, db_name
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1552:113: -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:116: ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOWTABLES, "TOK_SHOWTABLES"), root_1);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:133: ( TOK_FROM $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, (HiveParserASTNode)adaptor.create(TOK_FROM, "TOK_FROM"));
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1552:154: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:7: KW_SHOW KW_VIEWS ( ( KW_FROM | KW_IN ) db_name= identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					{
					KW_SHOW453=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7925); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW453);

					KW_VIEWS454=(Token)match(input,KW_VIEWS,FOLLOW_KW_VIEWS_in_showStatement7927); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VIEWS.add(KW_VIEWS454);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:24: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt135=2;
					int LA135_0 = input.LA(1);
					if ( (LA135_0==KW_FROM||LA135_0==KW_IN) ) {
						alt135=1;
					}
					switch (alt135) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:25: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:25: ( KW_FROM | KW_IN )
							int alt134=2;
							int LA134_0 = input.LA(1);
							if ( (LA134_0==KW_FROM) ) {
								alt134=1;
							}
							else if ( (LA134_0==KW_IN) ) {
								alt134=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 134, 0, input);
								throw nvae;
							}

							switch (alt134) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:26: KW_FROM
									{
									KW_FROM455=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7931); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM455);

									}
									break;
								case 2 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:34: KW_IN
									{
									KW_IN456=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7933); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN456);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7938);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:62: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
					int alt136=3;
					int LA136_0 = input.LA(1);
					if ( (LA136_0==KW_LIKE) ) {
						alt136=1;
					}
					else if ( (LA136_0==Identifier||(LA136_0 >= KW_ABORT && LA136_0 <= KW_AFTER)||LA136_0==KW_ANALYZE||LA136_0==KW_ARCHIVE||LA136_0==KW_ASC||(LA136_0 >= KW_AUTOCOMMIT && LA136_0 <= KW_BEFORE)||(LA136_0 >= KW_BUCKET && LA136_0 <= KW_BUCKETS)||(LA136_0 >= KW_CACHE && LA136_0 <= KW_CASCADE)||LA136_0==KW_CHANGE||(LA136_0 >= KW_CLUSTER && LA136_0 <= KW_COLLECTION)||(LA136_0 >= KW_COLUMNS && LA136_0 <= KW_COMMENT)||(LA136_0 >= KW_COMPACT && LA136_0 <= KW_CONCATENATE)||LA136_0==KW_CONTINUE||LA136_0==KW_DATA||LA136_0==KW_DATABASES||(LA136_0 >= KW_DATETIME && LA136_0 <= KW_DBPROPERTIES)||(LA136_0 >= KW_DEFERRED && LA136_0 <= KW_DEFINED)||(LA136_0 >= KW_DELIMITED && LA136_0 <= KW_DESC)||(LA136_0 >= KW_DETAIL && LA136_0 <= KW_DISABLE)||LA136_0==KW_DISTRIBUTE||LA136_0==KW_DOW||(LA136_0 >= KW_DUMP && LA136_0 <= KW_ELEM_TYPE)||LA136_0==KW_ENABLE||LA136_0==KW_ESCAPED||LA136_0==KW_EXCLUSIVE||(LA136_0 >= KW_EXPLAIN && LA136_0 <= KW_EXPRESSION)||(LA136_0 >= KW_FIELDS && LA136_0 <= KW_FIRST)||(LA136_0 >= KW_FORMAT && LA136_0 <= KW_FORMATTED)||LA136_0==KW_FUNCTIONS||(LA136_0 >= KW_HOUR && LA136_0 <= KW_IDXPROPERTIES)||(LA136_0 >= KW_INDEX && LA136_0 <= KW_INDEXES)||(LA136_0 >= KW_INPATH && LA136_0 <= KW_INPUTFORMAT)||(LA136_0 >= KW_ISOLATION && LA136_0 <= KW_JAR)||(LA136_0 >= KW_KEY && LA136_0 <= KW_LAST)||LA136_0==KW_LEVEL||(LA136_0 >= KW_LIMIT && LA136_0 <= KW_LOAD)||(LA136_0 >= KW_LOCATION && LA136_0 <= KW_LONG)||(LA136_0 >= KW_MAPJOIN && LA136_0 <= KW_MATERIALIZED)||LA136_0==KW_METADATA||(LA136_0 >= KW_MINUTE && LA136_0 <= KW_MONTH)||LA136_0==KW_MSCK||(LA136_0 >= KW_NORELY && LA136_0 <= KW_NOSCAN)||LA136_0==KW_NOVALIDATE||LA136_0==KW_NULLS||LA136_0==KW_OFFSET||(LA136_0 >= KW_OPERATOR && LA136_0 <= KW_OPTION)||(LA136_0 >= KW_OUTPUTDRIVER && LA136_0 <= KW_OUTPUTFORMAT)||(LA136_0 >= KW_OVERWRITE && LA136_0 <= KW_OWNER)||(LA136_0 >= KW_PARTITIONED && LA136_0 <= KW_PARTITIONS)||LA136_0==KW_PLUS||LA136_0==KW_PRETTY||LA136_0==KW_PRINCIPALS||(LA136_0 >= KW_PURGE && LA136_0 <= KW_QUARTER)||LA136_0==KW_READ||(LA136_0 >= KW_REBUILD && LA136_0 <= KW_RECORDWRITER)||(LA136_0 >= KW_RELOAD && LA136_0 <= KW_RESTRICT)||LA136_0==KW_REWRITE||(LA136_0 >= KW_ROLE && LA136_0 <= KW_ROLES)||(LA136_0 >= KW_SCHEMA && LA136_0 <= KW_SECOND)||(LA136_0 >= KW_SEMI && LA136_0 <= KW_SERVER)||(LA136_0 >= KW_SETS && LA136_0 <= KW_SKEWED)||(LA136_0 >= KW_SNAPSHOT && LA136_0 <= KW_SSL)||(LA136_0 >= KW_STATISTICS && LA136_0 <= KW_SUMMARY)||LA136_0==KW_TABLES||(LA136_0 >= KW_TBLPROPERTIES && LA136_0 <= KW_TERMINATED)||LA136_0==KW_TINYINT||(LA136_0 >= KW_TOUCH && LA136_0 <= KW_TRANSACTIONS)||LA136_0==KW_UNARCHIVE||LA136_0==KW_UNDO||LA136_0==KW_UNIONTYPE||(LA136_0 >= KW_UNLOCK && LA136_0 <= KW_UNSIGNED)||(LA136_0 >= KW_URI && LA136_0 <= KW_USE)||(LA136_0 >= KW_UTC && LA136_0 <= KW_VALIDATE)||LA136_0==KW_VALUE_TYPE||(LA136_0 >= KW_VECTORIZATION && LA136_0 <= KW_WEEK)||LA136_0==KW_WHILE||(LA136_0 >= KW_WORK && LA136_0 <= KW_YEAR)||LA136_0==StringLiteral||LA136_0==KW_BATCH||LA136_0==KW_DAYOFWEEK||LA136_0==KW_HOLD_DDLTIME||LA136_0==KW_IGNORE||LA136_0==KW_NO_DROP||LA136_0==KW_OFFLINE||LA136_0==KW_PROTECTION||LA136_0==KW_READONLY) ) {
						alt136=2;
					}
					switch (alt136) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:63: KW_LIKE showStmtIdentifier
							{
							KW_LIKE457=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement7943); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE457);

							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7945);
							showStmtIdentifier458=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier458.getTree());
							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:90: showStmtIdentifier
							{
							pushFollow(FOLLOW_showStmtIdentifier_in_showStatement7947);
							showStmtIdentifier459=showStmtIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier459.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: db_name, showStmtIdentifier
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1553:112: -> ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:115: ^( TOK_SHOWVIEWS ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOWVIEWS, "TOK_SHOWVIEWS"), root_1);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:131: ( TOK_FROM $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, (HiveParserASTNode)adaptor.create(TOK_FROM, "TOK_FROM"));
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1553:152: ( showStmtIdentifier )?
						if ( stream_showStmtIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						}
						stream_showStmtIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1554:7: KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tableName ( ( KW_FROM | KW_IN ) db_name= identifier )?
					{
					KW_SHOW460=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement7975); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW460);

					KW_COLUMNS461=(Token)match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_showStatement7977); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COLUMNS.add(KW_COLUMNS461);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1554:26: ( KW_FROM | KW_IN )
					int alt137=2;
					int LA137_0 = input.LA(1);
					if ( (LA137_0==KW_FROM) ) {
						alt137=1;
					}
					else if ( (LA137_0==KW_IN) ) {
						alt137=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 137, 0, input);
						throw nvae;
					}

					switch (alt137) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1554:27: KW_FROM
							{
							KW_FROM462=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7980); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM462);

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1554:35: KW_IN
							{
							KW_IN463=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7982); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN463);

							}
							break;

					}

					pushFollow(FOLLOW_tableName_in_showStatement7985);
					tableName464=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName464.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1554:52: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt139=2;
					int LA139_0 = input.LA(1);
					if ( (LA139_0==KW_FROM||LA139_0==KW_IN) ) {
						alt139=1;
					}
					switch (alt139) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1554:53: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1554:53: ( KW_FROM | KW_IN )
							int alt138=2;
							int LA138_0 = input.LA(1);
							if ( (LA138_0==KW_FROM) ) {
								alt138=1;
							}
							else if ( (LA138_0==KW_IN) ) {
								alt138=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 138, 0, input);
								throw nvae;
							}

							switch (alt138) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1554:54: KW_FROM
									{
									KW_FROM465=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement7989); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM465);

									}
									break;
								case 2 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1554:62: KW_IN
									{
									KW_IN466=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement7991); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN466);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement7996);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tableName, db_name
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1555:5: -> ^( TOK_SHOWCOLUMNS tableName ( $db_name)? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1555:8: ^( TOK_SHOWCOLUMNS tableName ( $db_name)? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOWCOLUMNS, "TOK_SHOWCOLUMNS"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1555:37: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1556:7: KW_SHOW KW_FUNCTIONS ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )?
					{
					KW_SHOW467=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8022); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW467);

					KW_FUNCTIONS468=(Token)match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_showStatement8024); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FUNCTIONS.add(KW_FUNCTIONS468);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1556:28: ( KW_LIKE showFunctionIdentifier | showFunctionIdentifier )?
					int alt140=3;
					int LA140_0 = input.LA(1);
					if ( (LA140_0==KW_LIKE) ) {
						alt140=1;
					}
					else if ( (LA140_0==Identifier||(LA140_0 >= KW_ABORT && LA140_0 <= KW_AFTER)||LA140_0==KW_ANALYZE||LA140_0==KW_ARCHIVE||LA140_0==KW_ASC||(LA140_0 >= KW_AUTOCOMMIT && LA140_0 <= KW_BEFORE)||(LA140_0 >= KW_BUCKET && LA140_0 <= KW_BUCKETS)||(LA140_0 >= KW_CACHE && LA140_0 <= KW_CASCADE)||LA140_0==KW_CHANGE||(LA140_0 >= KW_CLUSTER && LA140_0 <= KW_COLLECTION)||(LA140_0 >= KW_COLUMNS && LA140_0 <= KW_COMMENT)||(LA140_0 >= KW_COMPACT && LA140_0 <= KW_CONCATENATE)||LA140_0==KW_CONTINUE||LA140_0==KW_DATA||LA140_0==KW_DATABASES||(LA140_0 >= KW_DATETIME && LA140_0 <= KW_DBPROPERTIES)||(LA140_0 >= KW_DEFERRED && LA140_0 <= KW_DEFINED)||(LA140_0 >= KW_DELIMITED && LA140_0 <= KW_DESC)||(LA140_0 >= KW_DETAIL && LA140_0 <= KW_DISABLE)||LA140_0==KW_DISTRIBUTE||LA140_0==KW_DOW||(LA140_0 >= KW_DUMP && LA140_0 <= KW_ELEM_TYPE)||LA140_0==KW_ENABLE||LA140_0==KW_ESCAPED||LA140_0==KW_EXCLUSIVE||(LA140_0 >= KW_EXPLAIN && LA140_0 <= KW_EXPRESSION)||(LA140_0 >= KW_FIELDS && LA140_0 <= KW_FIRST)||(LA140_0 >= KW_FORMAT && LA140_0 <= KW_FORMATTED)||LA140_0==KW_FUNCTIONS||(LA140_0 >= KW_HOUR && LA140_0 <= KW_IDXPROPERTIES)||(LA140_0 >= KW_INDEX && LA140_0 <= KW_INDEXES)||(LA140_0 >= KW_INPATH && LA140_0 <= KW_INPUTFORMAT)||(LA140_0 >= KW_ISOLATION && LA140_0 <= KW_JAR)||(LA140_0 >= KW_KEY && LA140_0 <= KW_LAST)||LA140_0==KW_LEVEL||(LA140_0 >= KW_LIMIT && LA140_0 <= KW_LOAD)||(LA140_0 >= KW_LOCATION && LA140_0 <= KW_LONG)||(LA140_0 >= KW_MAPJOIN && LA140_0 <= KW_MATERIALIZED)||LA140_0==KW_METADATA||(LA140_0 >= KW_MINUTE && LA140_0 <= KW_MONTH)||LA140_0==KW_MSCK||(LA140_0 >= KW_NORELY && LA140_0 <= KW_NOSCAN)||LA140_0==KW_NOVALIDATE||LA140_0==KW_NULLS||LA140_0==KW_OFFSET||(LA140_0 >= KW_OPERATOR && LA140_0 <= KW_OPTION)||(LA140_0 >= KW_OUTPUTDRIVER && LA140_0 <= KW_OUTPUTFORMAT)||(LA140_0 >= KW_OVERWRITE && LA140_0 <= KW_OWNER)||(LA140_0 >= KW_PARTITIONED && LA140_0 <= KW_PARTITIONS)||LA140_0==KW_PLUS||LA140_0==KW_PRETTY||LA140_0==KW_PRINCIPALS||(LA140_0 >= KW_PURGE && LA140_0 <= KW_QUARTER)||LA140_0==KW_READ||(LA140_0 >= KW_REBUILD && LA140_0 <= KW_RECORDWRITER)||(LA140_0 >= KW_RELOAD && LA140_0 <= KW_RESTRICT)||LA140_0==KW_REWRITE||(LA140_0 >= KW_ROLE && LA140_0 <= KW_ROLES)||(LA140_0 >= KW_SCHEMA && LA140_0 <= KW_SECOND)||(LA140_0 >= KW_SEMI && LA140_0 <= KW_SERVER)||(LA140_0 >= KW_SETS && LA140_0 <= KW_SKEWED)||(LA140_0 >= KW_SNAPSHOT && LA140_0 <= KW_SSL)||(LA140_0 >= KW_STATISTICS && LA140_0 <= KW_SUMMARY)||LA140_0==KW_TABLES||(LA140_0 >= KW_TBLPROPERTIES && LA140_0 <= KW_TERMINATED)||LA140_0==KW_TINYINT||(LA140_0 >= KW_TOUCH && LA140_0 <= KW_TRANSACTIONS)||LA140_0==KW_UNARCHIVE||LA140_0==KW_UNDO||LA140_0==KW_UNIONTYPE||(LA140_0 >= KW_UNLOCK && LA140_0 <= KW_UNSIGNED)||(LA140_0 >= KW_URI && LA140_0 <= KW_USE)||(LA140_0 >= KW_UTC && LA140_0 <= KW_VALIDATE)||LA140_0==KW_VALUE_TYPE||(LA140_0 >= KW_VECTORIZATION && LA140_0 <= KW_WEEK)||LA140_0==KW_WHILE||(LA140_0 >= KW_WORK && LA140_0 <= KW_YEAR)||LA140_0==StringLiteral||LA140_0==KW_BATCH||LA140_0==KW_DAYOFWEEK||LA140_0==KW_HOLD_DDLTIME||LA140_0==KW_IGNORE||LA140_0==KW_NO_DROP||LA140_0==KW_OFFLINE||LA140_0==KW_PROTECTION||LA140_0==KW_READONLY) ) {
						alt140=2;
					}
					switch (alt140) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1556:29: KW_LIKE showFunctionIdentifier
							{
							KW_LIKE469=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement8027); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE469);

							pushFollow(FOLLOW_showFunctionIdentifier_in_showStatement8029);
							showFunctionIdentifier470=showFunctionIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showFunctionIdentifier.add(showFunctionIdentifier470.getTree());
							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1556:60: showFunctionIdentifier
							{
							pushFollow(FOLLOW_showFunctionIdentifier_in_showStatement8031);
							showFunctionIdentifier471=showFunctionIdentifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_showFunctionIdentifier.add(showFunctionIdentifier471.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: KW_LIKE, showFunctionIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1556:86: -> ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1556:89: ^( TOK_SHOWFUNCTIONS ( KW_LIKE )? ( showFunctionIdentifier )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOWFUNCTIONS, "TOK_SHOWFUNCTIONS"), root_1);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1556:109: ( KW_LIKE )?
						if ( stream_KW_LIKE.hasNext() ) {
							adaptor.addChild(root_1, stream_KW_LIKE.nextNode());
						}
						stream_KW_LIKE.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1556:118: ( showFunctionIdentifier )?
						if ( stream_showFunctionIdentifier.hasNext() ) {
							adaptor.addChild(root_1, stream_showFunctionIdentifier.nextTree());
						}
						stream_showFunctionIdentifier.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1557:7: KW_SHOW KW_PARTITIONS tabName= tableName ( partitionSpec )?
					{
					KW_SHOW472=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8054); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW472);

					KW_PARTITIONS473=(Token)match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_showStatement8056); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_PARTITIONS.add(KW_PARTITIONS473);

					pushFollow(FOLLOW_tableName_in_showStatement8060);
					tabName=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1557:47: ( partitionSpec )?
					int alt141=2;
					int LA141_0 = input.LA(1);
					if ( (LA141_0==KW_PARTITION) ) {
						alt141=1;
					}
					switch (alt141) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1557:47: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_showStatement8062);
							partitionSpec474=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec474.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tabName, partitionSpec
					// token labels: 
					// rule labels: tabName, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1557:62: -> ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1557:65: ^( TOK_SHOWPARTITIONS $tabName ( partitionSpec )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOWPARTITIONS, "TOK_SHOWPARTITIONS"), root_1);
						adaptor.addChild(root_1, stream_tabName.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1557:95: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1558:7: KW_SHOW KW_CREATE ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) )
					{
					KW_SHOW475=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8084); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW475);

					KW_CREATE476=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_showStatement8086); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE476);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1558:25: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier -> ^( TOK_SHOW_CREATEDATABASE $db_name) | KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) )
					int alt143=2;
					int LA143_0 = input.LA(1);
					if ( (LA143_0==KW_DATABASE) && (synpred12_HiveASTParser())) {
						alt143=1;
					}
					else if ( (LA143_0==KW_SCHEMA) && (synpred12_HiveASTParser())) {
						alt143=1;
					}
					else if ( (LA143_0==KW_TABLE) ) {
						alt143=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 143, 0, input);
						throw nvae;
					}

					switch (alt143) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1559:9: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) db_name= identifier
							{
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1559:36: ( KW_DATABASE | KW_SCHEMA )
							int alt142=2;
							int LA142_0 = input.LA(1);
							if ( (LA142_0==KW_DATABASE) ) {
								alt142=1;
							}
							else if ( (LA142_0==KW_SCHEMA) ) {
								alt142=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 142, 0, input);
								throw nvae;
							}

							switch (alt142) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1559:37: KW_DATABASE
									{
									KW_DATABASE477=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_showStatement8107); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE477);

									}
									break;
								case 2 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1559:49: KW_SCHEMA
									{
									KW_SCHEMA478=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_showStatement8109); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA478);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement8114);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							// AST REWRITE
							// elements: db_name
							// token labels: 
							// rule labels: db_name, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (HiveParserASTNode)adaptor.nil();
							// 1559:79: -> ^( TOK_SHOW_CREATEDATABASE $db_name)
							{
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1559:82: ^( TOK_SHOW_CREATEDATABASE $db_name)
								{
								HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
								root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_CREATEDATABASE, "TOK_SHOW_CREATEDATABASE"), root_1);
								adaptor.addChild(root_1, stream_db_name.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1561:9: KW_TABLE tabName= tableName
							{
							KW_TABLE479=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement8143); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE479);

							pushFollow(FOLLOW_tableName_in_showStatement8147);
							tabName=tableName();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
							// AST REWRITE
							// elements: tabName
							// token labels: 
							// rule labels: tabName, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (HiveParserASTNode)adaptor.nil();
							// 1561:36: -> ^( TOK_SHOW_CREATETABLE $tabName)
							{
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1561:39: ^( TOK_SHOW_CREATETABLE $tabName)
								{
								HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
								root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_CREATETABLE, "TOK_SHOW_CREATETABLE"), root_1);
								adaptor.addChild(root_1, stream_tabName.nextTree());
								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;

					}

					}
					break;
				case 8 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1563:7: KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )?
					{
					KW_SHOW480=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8172); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW480);

					KW_TABLE481=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement8174); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE481);

					KW_EXTENDED482=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement8176); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXTENDED.add(KW_EXTENDED482);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1563:36: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt145=2;
					int LA145_0 = input.LA(1);
					if ( (LA145_0==KW_FROM||LA145_0==KW_IN) ) {
						alt145=1;
					}
					switch (alt145) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1563:37: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1563:37: ( KW_FROM | KW_IN )
							int alt144=2;
							int LA144_0 = input.LA(1);
							if ( (LA144_0==KW_FROM) ) {
								alt144=1;
							}
							else if ( (LA144_0==KW_IN) ) {
								alt144=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 144, 0, input);
								throw nvae;
							}

							switch (alt144) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1563:38: KW_FROM
									{
									KW_FROM483=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement8180); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM483);

									}
									break;
								case 2 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1563:46: KW_IN
									{
									KW_IN484=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement8182); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN484);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement8187);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					KW_LIKE485=(Token)match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement8191); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIKE.add(KW_LIKE485);

					pushFollow(FOLLOW_showStmtIdentifier_in_showStatement8193);
					showStmtIdentifier486=showStmtIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier486.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1563:101: ( partitionSpec )?
					int alt146=2;
					int LA146_0 = input.LA(1);
					if ( (LA146_0==KW_PARTITION) ) {
						alt146=1;
					}
					switch (alt146) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1563:101: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_showStatement8195);
							partitionSpec487=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec487.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier, db_name, partitionSpec
					// token labels: 
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1564:5: -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1564:8: ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_TABLESTATUS, "TOK_SHOW_TABLESTATUS"), root_1);
						adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1564:51: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1564:60: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 9 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1565:7: KW_SHOW KW_TBLPROPERTIES tableName ( LPAREN prptyName= StringLiteral RPAREN )?
					{
					KW_SHOW488=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8223); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW488);

					KW_TBLPROPERTIES489=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_showStatement8225); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES489);

					pushFollow(FOLLOW_tableName_in_showStatement8227);
					tableName490=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName490.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1565:42: ( LPAREN prptyName= StringLiteral RPAREN )?
					int alt147=2;
					int LA147_0 = input.LA(1);
					if ( (LA147_0==LPAREN) ) {
						alt147=1;
					}
					switch (alt147) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1565:43: LPAREN prptyName= StringLiteral RPAREN
							{
							LPAREN491=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_showStatement8230); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN491);

							prptyName=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement8234); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(prptyName);

							RPAREN492=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_showStatement8236); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN492);

							}
							break;

					}

					// AST REWRITE
					// elements: tableName, prptyName
					// token labels: prptyName
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_prptyName=new RewriteRuleTokenStream(adaptor,"token prptyName",prptyName);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1565:83: -> ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1565:86: ^( TOK_SHOW_TBLPROPERTIES tableName ( $prptyName)? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_TBLPROPERTIES, "TOK_SHOW_TBLPROPERTIES"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1565:122: ( $prptyName)?
						if ( stream_prptyName.hasNext() ) {
							adaptor.addChild(root_1, stream_prptyName.nextNode());
						}
						stream_prptyName.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 10 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1566:7: KW_SHOW KW_LOCKS ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) )
					{
					KW_SHOW493=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8258); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW493);

					KW_LOCKS494=(Token)match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_showStatement8260); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LOCKS.add(KW_LOCKS494);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1567:7: ( ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? ) | (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) )
					int alt152=2;
					int LA152_0 = input.LA(1);
					if ( (LA152_0==KW_DATABASE) && (synpred13_HiveASTParser())) {
						alt152=1;
					}
					else if ( (LA152_0==KW_SCHEMA) ) {
						int LA152_2 = input.LA(2);
						if ( (LA152_2==Identifier) ) {
							int LA152_7 = input.LA(3);
							if ( (synpred13_HiveASTParser()) ) {
								alt152=1;
							}
							else if ( (true) ) {
								alt152=2;
							}

						}
						else if ( (LA152_2==EOF||LA152_2==DOT||(LA152_2 >= KW_ABORT && LA152_2 <= KW_AFTER)||LA152_2==KW_ANALYZE||LA152_2==KW_ARCHIVE||LA152_2==KW_ASC||(LA152_2 >= KW_AUTOCOMMIT && LA152_2 <= KW_BEFORE)||(LA152_2 >= KW_BUCKET && LA152_2 <= KW_BUCKETS)||(LA152_2 >= KW_CACHE && LA152_2 <= KW_CASCADE)||LA152_2==KW_CHANGE||(LA152_2 >= KW_CLUSTER && LA152_2 <= KW_COLLECTION)||(LA152_2 >= KW_COLUMNS && LA152_2 <= KW_COMMENT)||(LA152_2 >= KW_COMPACT && LA152_2 <= KW_CONCATENATE)||LA152_2==KW_CONTINUE||LA152_2==KW_DATA||LA152_2==KW_DATABASES||(LA152_2 >= KW_DATETIME && LA152_2 <= KW_DBPROPERTIES)||(LA152_2 >= KW_DEFERRED && LA152_2 <= KW_DEFINED)||(LA152_2 >= KW_DELIMITED && LA152_2 <= KW_DESC)||(LA152_2 >= KW_DETAIL && LA152_2 <= KW_DISABLE)||LA152_2==KW_DISTRIBUTE||LA152_2==KW_DOW||(LA152_2 >= KW_DUMP && LA152_2 <= KW_ELEM_TYPE)||LA152_2==KW_ENABLE||LA152_2==KW_ESCAPED||LA152_2==KW_EXCLUSIVE||(LA152_2 >= KW_EXPLAIN && LA152_2 <= KW_EXTENDED)||(LA152_2 >= KW_FIELDS && LA152_2 <= KW_FIRST)||(LA152_2 >= KW_FORMAT && LA152_2 <= KW_FORMATTED)||LA152_2==KW_FUNCTIONS||(LA152_2 >= KW_HOUR && LA152_2 <= KW_IDXPROPERTIES)||(LA152_2 >= KW_INDEX && LA152_2 <= KW_INDEXES)||(LA152_2 >= KW_INPATH && LA152_2 <= KW_INPUTFORMAT)||(LA152_2 >= KW_ISOLATION && LA152_2 <= KW_JAR)||(LA152_2 >= KW_KEY && LA152_2 <= KW_LAST)||LA152_2==KW_LEVEL||(LA152_2 >= KW_LIMIT && LA152_2 <= KW_LOAD)||(LA152_2 >= KW_LOCATION && LA152_2 <= KW_LONG)||(LA152_2 >= KW_MAPJOIN && LA152_2 <= KW_MATERIALIZED)||LA152_2==KW_METADATA||(LA152_2 >= KW_MINUTE && LA152_2 <= KW_MONTH)||LA152_2==KW_MSCK||(LA152_2 >= KW_NORELY && LA152_2 <= KW_NOSCAN)||LA152_2==KW_NOVALIDATE||LA152_2==KW_NULLS||LA152_2==KW_OFFSET||(LA152_2 >= KW_OPERATOR && LA152_2 <= KW_OPTION)||(LA152_2 >= KW_OUTPUTDRIVER && LA152_2 <= KW_OUTPUTFORMAT)||(LA152_2 >= KW_OVERWRITE && LA152_2 <= KW_OWNER)||(LA152_2 >= KW_PARTITION && LA152_2 <= KW_PARTITIONS)||LA152_2==KW_PLUS||LA152_2==KW_PRETTY||LA152_2==KW_PRINCIPALS||(LA152_2 >= KW_PURGE && LA152_2 <= KW_QUARTER)||LA152_2==KW_READ||(LA152_2 >= KW_REBUILD && LA152_2 <= KW_RECORDWRITER)||(LA152_2 >= KW_RELOAD && LA152_2 <= KW_RESTRICT)||LA152_2==KW_REWRITE||(LA152_2 >= KW_ROLE && LA152_2 <= KW_ROLES)||(LA152_2 >= KW_SCHEMA && LA152_2 <= KW_SECOND)||(LA152_2 >= KW_SEMI && LA152_2 <= KW_SERVER)||(LA152_2 >= KW_SETS && LA152_2 <= KW_SKEWED)||(LA152_2 >= KW_SNAPSHOT && LA152_2 <= KW_SSL)||(LA152_2 >= KW_STATISTICS && LA152_2 <= KW_SUMMARY)||LA152_2==KW_TABLES||(LA152_2 >= KW_TBLPROPERTIES && LA152_2 <= KW_TERMINATED)||LA152_2==KW_TINYINT||(LA152_2 >= KW_TOUCH && LA152_2 <= KW_TRANSACTIONS)||LA152_2==KW_UNARCHIVE||LA152_2==KW_UNDO||LA152_2==KW_UNIONTYPE||(LA152_2 >= KW_UNLOCK && LA152_2 <= KW_UNSIGNED)||(LA152_2 >= KW_URI && LA152_2 <= KW_USE)||(LA152_2 >= KW_UTC && LA152_2 <= KW_VALIDATE)||LA152_2==KW_VALUE_TYPE||(LA152_2 >= KW_VECTORIZATION && LA152_2 <= KW_WEEK)||LA152_2==KW_WHILE||(LA152_2 >= KW_WORK && LA152_2 <= KW_YEAR)||LA152_2==KW_BATCH||LA152_2==KW_DAYOFWEEK||LA152_2==KW_HOLD_DDLTIME||LA152_2==KW_IGNORE||LA152_2==KW_NO_DROP||LA152_2==KW_OFFLINE||LA152_2==KW_PROTECTION||LA152_2==KW_READONLY) ) {
							alt152=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return retval;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 152, 2, input);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA152_0==EOF||LA152_0==Identifier||(LA152_0 >= KW_ABORT && LA152_0 <= KW_AFTER)||LA152_0==KW_ANALYZE||LA152_0==KW_ARCHIVE||LA152_0==KW_ASC||(LA152_0 >= KW_AUTOCOMMIT && LA152_0 <= KW_BEFORE)||(LA152_0 >= KW_BUCKET && LA152_0 <= KW_BUCKETS)||(LA152_0 >= KW_CACHE && LA152_0 <= KW_CASCADE)||LA152_0==KW_CHANGE||(LA152_0 >= KW_CLUSTER && LA152_0 <= KW_COLLECTION)||(LA152_0 >= KW_COLUMNS && LA152_0 <= KW_COMMENT)||(LA152_0 >= KW_COMPACT && LA152_0 <= KW_CONCATENATE)||LA152_0==KW_CONTINUE||LA152_0==KW_DATA||LA152_0==KW_DATABASES||(LA152_0 >= KW_DATETIME && LA152_0 <= KW_DBPROPERTIES)||(LA152_0 >= KW_DEFERRED && LA152_0 <= KW_DEFINED)||(LA152_0 >= KW_DELIMITED && LA152_0 <= KW_DESC)||(LA152_0 >= KW_DETAIL && LA152_0 <= KW_DISABLE)||LA152_0==KW_DISTRIBUTE||LA152_0==KW_DOW||(LA152_0 >= KW_DUMP && LA152_0 <= KW_ELEM_TYPE)||LA152_0==KW_ENABLE||LA152_0==KW_ESCAPED||LA152_0==KW_EXCLUSIVE||(LA152_0 >= KW_EXPLAIN && LA152_0 <= KW_EXTENDED)||(LA152_0 >= KW_FIELDS && LA152_0 <= KW_FIRST)||(LA152_0 >= KW_FORMAT && LA152_0 <= KW_FORMATTED)||LA152_0==KW_FUNCTIONS||(LA152_0 >= KW_HOUR && LA152_0 <= KW_IDXPROPERTIES)||(LA152_0 >= KW_INDEX && LA152_0 <= KW_INDEXES)||(LA152_0 >= KW_INPATH && LA152_0 <= KW_INPUTFORMAT)||(LA152_0 >= KW_ISOLATION && LA152_0 <= KW_JAR)||(LA152_0 >= KW_KEY && LA152_0 <= KW_LAST)||LA152_0==KW_LEVEL||(LA152_0 >= KW_LIMIT && LA152_0 <= KW_LOAD)||(LA152_0 >= KW_LOCATION && LA152_0 <= KW_LONG)||(LA152_0 >= KW_MAPJOIN && LA152_0 <= KW_MATERIALIZED)||LA152_0==KW_METADATA||(LA152_0 >= KW_MINUTE && LA152_0 <= KW_MONTH)||LA152_0==KW_MSCK||(LA152_0 >= KW_NORELY && LA152_0 <= KW_NOSCAN)||LA152_0==KW_NOVALIDATE||LA152_0==KW_NULLS||LA152_0==KW_OFFSET||(LA152_0 >= KW_OPERATOR && LA152_0 <= KW_OPTION)||(LA152_0 >= KW_OUTPUTDRIVER && LA152_0 <= KW_OUTPUTFORMAT)||(LA152_0 >= KW_OVERWRITE && LA152_0 <= KW_OWNER)||(LA152_0 >= KW_PARTITIONED && LA152_0 <= KW_PARTITIONS)||LA152_0==KW_PLUS||LA152_0==KW_PRETTY||LA152_0==KW_PRINCIPALS||(LA152_0 >= KW_PURGE && LA152_0 <= KW_QUARTER)||LA152_0==KW_READ||(LA152_0 >= KW_REBUILD && LA152_0 <= KW_RECORDWRITER)||(LA152_0 >= KW_RELOAD && LA152_0 <= KW_RESTRICT)||LA152_0==KW_REWRITE||(LA152_0 >= KW_ROLE && LA152_0 <= KW_ROLES)||(LA152_0 >= KW_SCHEMAS && LA152_0 <= KW_SECOND)||(LA152_0 >= KW_SEMI && LA152_0 <= KW_SERVER)||(LA152_0 >= KW_SETS && LA152_0 <= KW_SKEWED)||(LA152_0 >= KW_SNAPSHOT && LA152_0 <= KW_SSL)||(LA152_0 >= KW_STATISTICS && LA152_0 <= KW_SUMMARY)||LA152_0==KW_TABLES||(LA152_0 >= KW_TBLPROPERTIES && LA152_0 <= KW_TERMINATED)||LA152_0==KW_TINYINT||(LA152_0 >= KW_TOUCH && LA152_0 <= KW_TRANSACTIONS)||LA152_0==KW_UNARCHIVE||LA152_0==KW_UNDO||LA152_0==KW_UNIONTYPE||(LA152_0 >= KW_UNLOCK && LA152_0 <= KW_UNSIGNED)||(LA152_0 >= KW_URI && LA152_0 <= KW_USE)||(LA152_0 >= KW_UTC && LA152_0 <= KW_VALIDATE)||LA152_0==KW_VALUE_TYPE||(LA152_0 >= KW_VECTORIZATION && LA152_0 <= KW_WEEK)||LA152_0==KW_WHILE||(LA152_0 >= KW_WORK && LA152_0 <= KW_YEAR)||LA152_0==KW_BATCH||LA152_0==KW_DAYOFWEEK||LA152_0==KW_HOLD_DDLTIME||LA152_0==KW_IGNORE||LA152_0==KW_NO_DROP||LA152_0==KW_OFFLINE||LA152_0==KW_PROTECTION||LA152_0==KW_READONLY) ) {
						alt152=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 152, 0, input);
						throw nvae;
					}

					switch (alt152) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1568:7: ( KW_DATABASE | KW_SCHEMA )=> ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) (isExtended= KW_EXTENDED )?
							{
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1568:34: ( KW_DATABASE | KW_SCHEMA )
							int alt148=2;
							int LA148_0 = input.LA(1);
							if ( (LA148_0==KW_DATABASE) ) {
								alt148=1;
							}
							else if ( (LA148_0==KW_SCHEMA) ) {
								alt148=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 148, 0, input);
								throw nvae;
							}

							switch (alt148) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1568:35: KW_DATABASE
									{
									KW_DATABASE495=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_showStatement8286); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE495);

									}
									break;
								case 2 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1568:47: KW_SCHEMA
									{
									KW_SCHEMA496=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_showStatement8288); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA496);

									}
									break;

							}

							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1568:58: (dbName= Identifier )
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1568:59: dbName= Identifier
							{
							dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_showStatement8294); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Identifier.add(dbName);

							}

							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1568:78: (isExtended= KW_EXTENDED )?
							int alt149=2;
							int LA149_0 = input.LA(1);
							if ( (LA149_0==KW_EXTENDED) ) {
								alt149=1;
							}
							switch (alt149) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1568:79: isExtended= KW_EXTENDED
									{
									isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement8300); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_EXTENDED.add(isExtended);

									}
									break;

							}

							// AST REWRITE
							// elements: isExtended, dbName
							// token labels: dbName, isExtended
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
							RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (HiveParserASTNode)adaptor.nil();
							// 1568:104: -> ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
							{
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1568:107: ^( TOK_SHOWDBLOCKS $dbName ( $isExtended)? )
								{
								HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
								root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOWDBLOCKS, "TOK_SHOWDBLOCKS"), root_1);
								adaptor.addChild(root_1, stream_dbName.nextNode());
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1568:134: ( $isExtended)?
								if ( stream_isExtended.hasNext() ) {
									adaptor.addChild(root_1, stream_isExtended.nextNode());
								}
								stream_isExtended.reset();

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1570:7: (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )?
							{
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1570:7: (parttype= partTypeExpr )?
							int alt150=2;
							int LA150_0 = input.LA(1);
							if ( (LA150_0==Identifier||(LA150_0 >= KW_ABORT && LA150_0 <= KW_AFTER)||LA150_0==KW_ANALYZE||LA150_0==KW_ARCHIVE||LA150_0==KW_ASC||(LA150_0 >= KW_AUTOCOMMIT && LA150_0 <= KW_BEFORE)||(LA150_0 >= KW_BUCKET && LA150_0 <= KW_BUCKETS)||(LA150_0 >= KW_CACHE && LA150_0 <= KW_CASCADE)||LA150_0==KW_CHANGE||(LA150_0 >= KW_CLUSTER && LA150_0 <= KW_COLLECTION)||(LA150_0 >= KW_COLUMNS && LA150_0 <= KW_COMMENT)||(LA150_0 >= KW_COMPACT && LA150_0 <= KW_CONCATENATE)||LA150_0==KW_CONTINUE||LA150_0==KW_DATA||LA150_0==KW_DATABASES||(LA150_0 >= KW_DATETIME && LA150_0 <= KW_DBPROPERTIES)||(LA150_0 >= KW_DEFERRED && LA150_0 <= KW_DEFINED)||(LA150_0 >= KW_DELIMITED && LA150_0 <= KW_DESC)||(LA150_0 >= KW_DETAIL && LA150_0 <= KW_DISABLE)||LA150_0==KW_DISTRIBUTE||LA150_0==KW_DOW||(LA150_0 >= KW_DUMP && LA150_0 <= KW_ELEM_TYPE)||LA150_0==KW_ENABLE||LA150_0==KW_ESCAPED||LA150_0==KW_EXCLUSIVE||(LA150_0 >= KW_EXPLAIN && LA150_0 <= KW_EXPRESSION)||(LA150_0 >= KW_FIELDS && LA150_0 <= KW_FIRST)||(LA150_0 >= KW_FORMAT && LA150_0 <= KW_FORMATTED)||LA150_0==KW_FUNCTIONS||(LA150_0 >= KW_HOUR && LA150_0 <= KW_IDXPROPERTIES)||(LA150_0 >= KW_INDEX && LA150_0 <= KW_INDEXES)||(LA150_0 >= KW_INPATH && LA150_0 <= KW_INPUTFORMAT)||(LA150_0 >= KW_ISOLATION && LA150_0 <= KW_JAR)||(LA150_0 >= KW_KEY && LA150_0 <= KW_LAST)||LA150_0==KW_LEVEL||(LA150_0 >= KW_LIMIT && LA150_0 <= KW_LOAD)||(LA150_0 >= KW_LOCATION && LA150_0 <= KW_LONG)||(LA150_0 >= KW_MAPJOIN && LA150_0 <= KW_MATERIALIZED)||LA150_0==KW_METADATA||(LA150_0 >= KW_MINUTE && LA150_0 <= KW_MONTH)||LA150_0==KW_MSCK||(LA150_0 >= KW_NORELY && LA150_0 <= KW_NOSCAN)||LA150_0==KW_NOVALIDATE||LA150_0==KW_NULLS||LA150_0==KW_OFFSET||(LA150_0 >= KW_OPERATOR && LA150_0 <= KW_OPTION)||(LA150_0 >= KW_OUTPUTDRIVER && LA150_0 <= KW_OUTPUTFORMAT)||(LA150_0 >= KW_OVERWRITE && LA150_0 <= KW_OWNER)||(LA150_0 >= KW_PARTITIONED && LA150_0 <= KW_PARTITIONS)||LA150_0==KW_PLUS||LA150_0==KW_PRETTY||LA150_0==KW_PRINCIPALS||(LA150_0 >= KW_PURGE && LA150_0 <= KW_QUARTER)||LA150_0==KW_READ||(LA150_0 >= KW_REBUILD && LA150_0 <= KW_RECORDWRITER)||(LA150_0 >= KW_RELOAD && LA150_0 <= KW_RESTRICT)||LA150_0==KW_REWRITE||(LA150_0 >= KW_ROLE && LA150_0 <= KW_ROLES)||(LA150_0 >= KW_SCHEMA && LA150_0 <= KW_SECOND)||(LA150_0 >= KW_SEMI && LA150_0 <= KW_SERVER)||(LA150_0 >= KW_SETS && LA150_0 <= KW_SKEWED)||(LA150_0 >= KW_SNAPSHOT && LA150_0 <= KW_SSL)||(LA150_0 >= KW_STATISTICS && LA150_0 <= KW_SUMMARY)||LA150_0==KW_TABLES||(LA150_0 >= KW_TBLPROPERTIES && LA150_0 <= KW_TERMINATED)||LA150_0==KW_TINYINT||(LA150_0 >= KW_TOUCH && LA150_0 <= KW_TRANSACTIONS)||LA150_0==KW_UNARCHIVE||LA150_0==KW_UNDO||LA150_0==KW_UNIONTYPE||(LA150_0 >= KW_UNLOCK && LA150_0 <= KW_UNSIGNED)||(LA150_0 >= KW_URI && LA150_0 <= KW_USE)||(LA150_0 >= KW_UTC && LA150_0 <= KW_VALIDATE)||LA150_0==KW_VALUE_TYPE||(LA150_0 >= KW_VECTORIZATION && LA150_0 <= KW_WEEK)||LA150_0==KW_WHILE||(LA150_0 >= KW_WORK && LA150_0 <= KW_YEAR)||LA150_0==KW_BATCH||LA150_0==KW_DAYOFWEEK||LA150_0==KW_HOLD_DDLTIME||LA150_0==KW_IGNORE||LA150_0==KW_NO_DROP||LA150_0==KW_OFFLINE||LA150_0==KW_PROTECTION||LA150_0==KW_READONLY) ) {
								alt150=1;
							}
							switch (alt150) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1570:8: parttype= partTypeExpr
									{
									pushFollow(FOLLOW_partTypeExpr_in_showStatement8334);
									parttype=partTypeExpr();
									state._fsp--;
									if (state.failed) return retval;
									if ( state.backtracking==0 ) stream_partTypeExpr.add(parttype.getTree());
									}
									break;

							}

							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1570:32: (isExtended= KW_EXTENDED )?
							int alt151=2;
							int LA151_0 = input.LA(1);
							if ( (LA151_0==KW_EXTENDED) ) {
								alt151=1;
							}
							switch (alt151) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1570:33: isExtended= KW_EXTENDED
									{
									isExtended=(Token)match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement8341); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_EXTENDED.add(isExtended);

									}
									break;

							}

							// AST REWRITE
							// elements: parttype, isExtended
							// token labels: isExtended
							// rule labels: parttype, retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
							RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"rule parttype",parttype!=null?parttype.getTree():null);
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (HiveParserASTNode)adaptor.nil();
							// 1570:58: -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
							{
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1570:61: ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
								{
								HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
								root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOWLOCKS, "TOK_SHOWLOCKS"), root_1);
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1570:78: ( $parttype)?
								if ( stream_parttype.hasNext() ) {
									adaptor.addChild(root_1, stream_parttype.nextTree());
								}
								stream_parttype.reset();

								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1570:89: ( $isExtended)?
								if ( stream_isExtended.hasNext() ) {
									adaptor.addChild(root_1, stream_isExtended.nextNode());
								}
								stream_isExtended.reset();

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;

					}

					}
					break;
				case 11 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1572:7: KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= identifier )?
					{
					KW_SHOW497=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8373); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW497);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1572:15: (showOptions= KW_FORMATTED )?
					int alt153=2;
					int LA153_0 = input.LA(1);
					if ( (LA153_0==KW_FORMATTED) ) {
						alt153=1;
					}
					switch (alt153) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1572:16: showOptions= KW_FORMATTED
							{
							showOptions=(Token)match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_showStatement8378); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_FORMATTED.add(showOptions);

							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1572:43: ( KW_INDEX | KW_INDEXES )
					int alt154=2;
					int LA154_0 = input.LA(1);
					if ( (LA154_0==KW_INDEX) ) {
						alt154=1;
					}
					else if ( (LA154_0==KW_INDEXES) ) {
						alt154=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 154, 0, input);
						throw nvae;
					}

					switch (alt154) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1572:44: KW_INDEX
							{
							KW_INDEX498=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_showStatement8383); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX498);

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1572:53: KW_INDEXES
							{
							KW_INDEXES499=(Token)match(input,KW_INDEXES,FOLLOW_KW_INDEXES_in_showStatement8385); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_INDEXES.add(KW_INDEXES499);

							}
							break;

					}

					KW_ON500=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showStatement8388); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON500);

					pushFollow(FOLLOW_showStmtIdentifier_in_showStatement8390);
					showStmtIdentifier501=showStmtIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_showStmtIdentifier.add(showStmtIdentifier501.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1572:90: ( ( KW_FROM | KW_IN ) db_name= identifier )?
					int alt156=2;
					int LA156_0 = input.LA(1);
					if ( (LA156_0==KW_FROM||LA156_0==KW_IN) ) {
						alt156=1;
					}
					switch (alt156) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1572:91: ( KW_FROM | KW_IN ) db_name= identifier
							{
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1572:91: ( KW_FROM | KW_IN )
							int alt155=2;
							int LA155_0 = input.LA(1);
							if ( (LA155_0==KW_FROM) ) {
								alt155=1;
							}
							else if ( (LA155_0==KW_IN) ) {
								alt155=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return retval;}
								NoViableAltException nvae =
									new NoViableAltException("", 155, 0, input);
								throw nvae;
							}

							switch (alt155) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1572:92: KW_FROM
									{
									KW_FROM502=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement8394); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM502);

									}
									break;
								case 2 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1572:100: KW_IN
									{
									KW_IN503=(Token)match(input,KW_IN,FOLLOW_KW_IN_in_showStatement8396); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_KW_IN.add(KW_IN503);

									}
									break;

							}

							pushFollow(FOLLOW_identifier_in_showStatement8401);
							db_name=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_identifier.add(db_name.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: showStmtIdentifier, db_name, showOptions
					// token labels: showOptions
					// rule labels: db_name, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_showOptions=new RewriteRuleTokenStream(adaptor,"token showOptions",showOptions);
					RewriteRuleSubtreeStream stream_db_name=new RewriteRuleSubtreeStream(adaptor,"rule db_name",db_name!=null?db_name.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1573:5: -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1573:8: ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOWINDEXES, "TOK_SHOWINDEXES"), root_1);
						adaptor.addChild(root_1, stream_showStmtIdentifier.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1573:46: ( $showOptions)?
						if ( stream_showOptions.hasNext() ) {
							adaptor.addChild(root_1, stream_showOptions.nextNode());
						}
						stream_showOptions.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1573:60: ( $db_name)?
						if ( stream_db_name.hasNext() ) {
							adaptor.addChild(root_1, stream_db_name.nextTree());
						}
						stream_db_name.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 12 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1574:7: KW_SHOW KW_COMPACTIONS
					{
					KW_SHOW504=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8431); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW504);

					KW_COMPACTIONS505=(Token)match(input,KW_COMPACTIONS,FOLLOW_KW_COMPACTIONS_in_showStatement8433); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMPACTIONS.add(KW_COMPACTIONS505);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1574:30: -> ^( TOK_SHOW_COMPACTIONS )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1574:33: ^( TOK_SHOW_COMPACTIONS )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_COMPACTIONS, "TOK_SHOW_COMPACTIONS"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 13 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1575:7: KW_SHOW KW_TRANSACTIONS
					{
					KW_SHOW506=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8447); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW506);

					KW_TRANSACTIONS507=(Token)match(input,KW_TRANSACTIONS,FOLLOW_KW_TRANSACTIONS_in_showStatement8449); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TRANSACTIONS.add(KW_TRANSACTIONS507);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1575:31: -> ^( TOK_SHOW_TRANSACTIONS )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1575:34: ^( TOK_SHOW_TRANSACTIONS )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_TRANSACTIONS, "TOK_SHOW_TRANSACTIONS"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 14 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1576:7: KW_SHOW KW_CONF StringLiteral
					{
					KW_SHOW508=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement8463); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW508);

					KW_CONF509=(Token)match(input,KW_CONF,FOLLOW_KW_CONF_in_showStatement8465); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONF.add(KW_CONF509);

					StringLiteral510=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement8467); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral510);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1576:37: -> ^( TOK_SHOWCONF StringLiteral )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1576:40: ^( TOK_SHOWCONF StringLiteral )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOWCONF, "TOK_SHOWCONF"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showStatement"


	public static class lockStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "lockStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1579:1: lockStatement : KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) ;
	public final HiveASTParser.lockStatement_return lockStatement() throws RecognitionException {
		HiveASTParser.lockStatement_return retval = new HiveASTParser.lockStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_LOCK511=null;
		Token KW_TABLE512=null;
		ParserRuleReturnScope tableName513 =null;
		ParserRuleReturnScope partitionSpec514 =null;
		ParserRuleReturnScope lockMode515 =null;

		HiveParserASTNode KW_LOCK511_tree=null;
		HiveParserASTNode KW_TABLE512_tree=null;
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("lock statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1582:5: ( KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1582:7: KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode
			{
			KW_LOCK511=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockStatement8502); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK511);

			KW_TABLE512=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_lockStatement8504); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE512);

			pushFollow(FOLLOW_tableName_in_lockStatement8506);
			tableName513=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName513.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1582:34: ( partitionSpec )?
			int alt158=2;
			int LA158_0 = input.LA(1);
			if ( (LA158_0==KW_PARTITION) ) {
				alt158=1;
			}
			switch (alt158) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1582:34: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_lockStatement8508);
					partitionSpec514=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec514.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_lockMode_in_lockStatement8511);
			lockMode515=lockMode();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_lockMode.add(lockMode515.getTree());
			// AST REWRITE
			// elements: lockMode, partitionSpec, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1582:58: -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1582:61: ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_LOCKTABLE, "TOK_LOCKTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_1, stream_lockMode.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1582:96: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockStatement"


	public static class lockDatabase_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "lockDatabase"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1585:1: lockDatabase : KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) ;
	public final HiveASTParser.lockDatabase_return lockDatabase() throws RecognitionException {
		HiveASTParser.lockDatabase_return retval = new HiveASTParser.lockDatabase_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token dbName=null;
		Token KW_LOCK516=null;
		Token KW_DATABASE517=null;
		Token KW_SCHEMA518=null;
		ParserRuleReturnScope lockMode519 =null;

		HiveParserASTNode dbName_tree=null;
		HiveParserASTNode KW_LOCK516_tree=null;
		HiveParserASTNode KW_DATABASE517_tree=null;
		HiveParserASTNode KW_SCHEMA518_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");

		 pushMsg("lock database statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1588:5: ( KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) lockMode -> ^( TOK_LOCKDB $dbName lockMode ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1588:7: KW_LOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) lockMode
			{
			KW_LOCK516=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockDatabase8551); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK516);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1588:15: ( KW_DATABASE | KW_SCHEMA )
			int alt159=2;
			int LA159_0 = input.LA(1);
			if ( (LA159_0==KW_DATABASE) ) {
				alt159=1;
			}
			else if ( (LA159_0==KW_SCHEMA) ) {
				alt159=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 159, 0, input);
				throw nvae;
			}

			switch (alt159) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1588:16: KW_DATABASE
					{
					KW_DATABASE517=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_lockDatabase8554); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE517);

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1588:28: KW_SCHEMA
					{
					KW_SCHEMA518=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_lockDatabase8556); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA518);

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1588:39: (dbName= Identifier )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1588:40: dbName= Identifier
			{
			dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_lockDatabase8562); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Identifier.add(dbName);

			}

			pushFollow(FOLLOW_lockMode_in_lockDatabase8565);
			lockMode519=lockMode();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_lockMode.add(lockMode519.getTree());
			// AST REWRITE
			// elements: dbName, lockMode
			// token labels: dbName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1588:68: -> ^( TOK_LOCKDB $dbName lockMode )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1588:71: ^( TOK_LOCKDB $dbName lockMode )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_LOCKDB, "TOK_LOCKDB"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextNode());
				adaptor.addChild(root_1, stream_lockMode.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockDatabase"


	public static class lockMode_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "lockMode"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1591:1: lockMode : ( KW_SHARED | KW_EXCLUSIVE );
	public final HiveASTParser.lockMode_return lockMode() throws RecognitionException {
		HiveASTParser.lockMode_return retval = new HiveASTParser.lockMode_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token set520=null;

		HiveParserASTNode set520_tree=null;

		 pushMsg("lock mode", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1594:5: ( KW_SHARED | KW_EXCLUSIVE )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			set520=input.LT(1);
			if ( input.LA(1)==KW_EXCLUSIVE||input.LA(1)==KW_SHARED ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(set520));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "lockMode"


	public static class unlockStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "unlockStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1597:1: unlockStatement : KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) ;
	public final HiveASTParser.unlockStatement_return unlockStatement() throws RecognitionException {
		HiveASTParser.unlockStatement_return retval = new HiveASTParser.unlockStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_UNLOCK521=null;
		Token KW_TABLE522=null;
		ParserRuleReturnScope tableName523 =null;
		ParserRuleReturnScope partitionSpec524 =null;

		HiveParserASTNode KW_UNLOCK521_tree=null;
		HiveParserASTNode KW_TABLE522_tree=null;
		RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("unlock statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1600:5: ( KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1600:7: KW_UNLOCK KW_TABLE tableName ( partitionSpec )?
			{
			KW_UNLOCK521=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockStatement8634); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNLOCK.add(KW_UNLOCK521);

			KW_TABLE522=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_unlockStatement8636); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE522);

			pushFollow(FOLLOW_tableName_in_unlockStatement8638);
			tableName523=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName523.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1600:36: ( partitionSpec )?
			int alt160=2;
			int LA160_0 = input.LA(1);
			if ( (LA160_0==KW_PARTITION) ) {
				alt160=1;
			}
			switch (alt160) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1600:36: partitionSpec
					{
					pushFollow(FOLLOW_partitionSpec_in_unlockStatement8640);
					partitionSpec524=partitionSpec();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec524.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableName, partitionSpec
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1600:52: -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1600:55: ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_UNLOCKTABLE, "TOK_UNLOCKTABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1600:83: ( partitionSpec )?
				if ( stream_partitionSpec.hasNext() ) {
					adaptor.addChild(root_1, stream_partitionSpec.nextTree());
				}
				stream_partitionSpec.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unlockStatement"


	public static class unlockDatabase_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "unlockDatabase"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1603:1: unlockDatabase : KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) -> ^( TOK_UNLOCKDB $dbName) ;
	public final HiveASTParser.unlockDatabase_return unlockDatabase() throws RecognitionException {
		HiveASTParser.unlockDatabase_return retval = new HiveASTParser.unlockDatabase_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token dbName=null;
		Token KW_UNLOCK525=null;
		Token KW_DATABASE526=null;
		Token KW_SCHEMA527=null;

		HiveParserASTNode dbName_tree=null;
		HiveParserASTNode KW_UNLOCK525_tree=null;
		HiveParserASTNode KW_DATABASE526_tree=null;
		HiveParserASTNode KW_SCHEMA527_tree=null;
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");

		 pushMsg("unlock database statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1606:5: ( KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier ) -> ^( TOK_UNLOCKDB $dbName) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1606:7: KW_UNLOCK ( KW_DATABASE | KW_SCHEMA ) (dbName= Identifier )
			{
			KW_UNLOCK525=(Token)match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockDatabase8680); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNLOCK.add(KW_UNLOCK525);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1606:17: ( KW_DATABASE | KW_SCHEMA )
			int alt161=2;
			int LA161_0 = input.LA(1);
			if ( (LA161_0==KW_DATABASE) ) {
				alt161=1;
			}
			else if ( (LA161_0==KW_SCHEMA) ) {
				alt161=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 161, 0, input);
				throw nvae;
			}

			switch (alt161) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1606:18: KW_DATABASE
					{
					KW_DATABASE526=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_unlockDatabase8683); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE526);

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1606:30: KW_SCHEMA
					{
					KW_SCHEMA527=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_unlockDatabase8685); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA527);

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1606:41: (dbName= Identifier )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1606:42: dbName= Identifier
			{
			dbName=(Token)match(input,Identifier,FOLLOW_Identifier_in_unlockDatabase8691); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Identifier.add(dbName);

			}

			// AST REWRITE
			// elements: dbName
			// token labels: dbName
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1606:61: -> ^( TOK_UNLOCKDB $dbName)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1606:64: ^( TOK_UNLOCKDB $dbName)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_UNLOCKDB, "TOK_UNLOCKDB"), root_1);
				adaptor.addChild(root_1, stream_dbName.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unlockDatabase"


	public static class createRoleStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "createRoleStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1609:1: createRoleStatement : KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) ;
	public final HiveASTParser.createRoleStatement_return createRoleStatement() throws RecognitionException {
		HiveASTParser.createRoleStatement_return retval = new HiveASTParser.createRoleStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_CREATE528=null;
		Token KW_ROLE529=null;
		ParserRuleReturnScope roleName =null;

		HiveParserASTNode KW_CREATE528_tree=null;
		HiveParserASTNode KW_ROLE529_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("create role", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1612:5: ( KW_CREATE KW_ROLE roleName= identifier -> ^( TOK_CREATEROLE $roleName) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1612:7: KW_CREATE KW_ROLE roleName= identifier
			{
			KW_CREATE528=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createRoleStatement8728); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE528);

			KW_ROLE529=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_createRoleStatement8730); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE529);

			pushFollow(FOLLOW_identifier_in_createRoleStatement8734);
			roleName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: roleName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1613:5: -> ^( TOK_CREATEROLE $roleName)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1613:8: ^( TOK_CREATEROLE $roleName)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CREATEROLE, "TOK_CREATEROLE"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createRoleStatement"


	public static class dropRoleStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropRoleStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1616:1: dropRoleStatement : KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) ;
	public final HiveASTParser.dropRoleStatement_return dropRoleStatement() throws RecognitionException {
		HiveASTParser.dropRoleStatement_return retval = new HiveASTParser.dropRoleStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_DROP530=null;
		Token KW_ROLE531=null;
		ParserRuleReturnScope roleName =null;

		HiveParserASTNode KW_DROP530_tree=null;
		HiveParserASTNode KW_ROLE531_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("drop role", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1619:5: ( KW_DROP KW_ROLE roleName= identifier -> ^( TOK_DROPROLE $roleName) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1619:7: KW_DROP KW_ROLE roleName= identifier
			{
			KW_DROP530=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropRoleStatement8774); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP530);

			KW_ROLE531=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_dropRoleStatement8776); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE531);

			pushFollow(FOLLOW_identifier_in_dropRoleStatement8780);
			roleName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: roleName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1620:5: -> ^( TOK_DROPROLE $roleName)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1620:8: ^( TOK_DROPROLE $roleName)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DROPROLE, "TOK_DROPROLE"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropRoleStatement"


	public static class grantPrivileges_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "grantPrivileges"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1623:1: grantPrivileges : KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) ;
	public final HiveASTParser.grantPrivileges_return grantPrivileges() throws RecognitionException {
		HiveASTParser.grantPrivileges_return retval = new HiveASTParser.grantPrivileges_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_GRANT532=null;
		Token KW_TO534=null;
		ParserRuleReturnScope privList =null;
		ParserRuleReturnScope privilegeObject533 =null;
		ParserRuleReturnScope principalSpecification535 =null;
		ParserRuleReturnScope withGrantOption536 =null;

		HiveParserASTNode KW_GRANT532_tree=null;
		HiveParserASTNode KW_TO534_tree=null;
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleSubtreeStream stream_withGrantOption=new RewriteRuleSubtreeStream(adaptor,"rule withGrantOption");
		RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
		RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg("grant privileges", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1626:5: ( KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1626:7: KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( withGrantOption )?
			{
			KW_GRANT532=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantPrivileges8820); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT532);

			pushFollow(FOLLOW_privilegeList_in_grantPrivileges8824);
			privList=privilegeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privilegeList.add(privList.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1627:7: ( privilegeObject )?
			int alt162=2;
			int LA162_0 = input.LA(1);
			if ( (LA162_0==KW_ON) ) {
				alt162=1;
			}
			switch (alt162) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1627:7: privilegeObject
					{
					pushFollow(FOLLOW_privilegeObject_in_grantPrivileges8832);
					privilegeObject533=privilegeObject();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privilegeObject.add(privilegeObject533.getTree());
					}
					break;

			}

			KW_TO534=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantPrivileges8841); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO534);

			pushFollow(FOLLOW_principalSpecification_in_grantPrivileges8843);
			principalSpecification535=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification535.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1629:7: ( withGrantOption )?
			int alt163=2;
			int LA163_0 = input.LA(1);
			if ( (LA163_0==KW_WITH) ) {
				alt163=1;
			}
			switch (alt163) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1629:7: withGrantOption
					{
					pushFollow(FOLLOW_withGrantOption_in_grantPrivileges8851);
					withGrantOption536=withGrantOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withGrantOption.add(withGrantOption536.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: privList, principalSpecification, privilegeObject, withGrantOption
			// token labels: 
			// rule labels: privList, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_privList=new RewriteRuleSubtreeStream(adaptor,"rule privList",privList!=null?privList.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1630:5: -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1630:8: ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withGrantOption )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_GRANT, "TOK_GRANT"), root_1);
				adaptor.addChild(root_1, stream_privList.nextTree());
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1630:53: ( privilegeObject )?
				if ( stream_privilegeObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeObject.nextTree());
				}
				stream_privilegeObject.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1630:70: ( withGrantOption )?
				if ( stream_withGrantOption.hasNext() ) {
					adaptor.addChild(root_1, stream_withGrantOption.nextTree());
				}
				stream_withGrantOption.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantPrivileges"


	public static class revokePrivileges_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "revokePrivileges"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1633:1: revokePrivileges : KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? ) ;
	public final HiveASTParser.revokePrivileges_return revokePrivileges() throws RecognitionException {
		HiveASTParser.revokePrivileges_return retval = new HiveASTParser.revokePrivileges_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_REVOKE537=null;
		Token KW_FROM541=null;
		ParserRuleReturnScope grantOptionFor538 =null;
		ParserRuleReturnScope privilegeList539 =null;
		ParserRuleReturnScope privilegeObject540 =null;
		ParserRuleReturnScope principalSpecification542 =null;

		HiveParserASTNode KW_REVOKE537_tree=null;
		HiveParserASTNode KW_FROM541_tree=null;
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
		RewriteRuleSubtreeStream stream_grantOptionFor=new RewriteRuleSubtreeStream(adaptor,"rule grantOptionFor");
		RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
		RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg("revoke privileges", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1636:5: ( KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1636:7: KW_REVOKE ( grantOptionFor )? privilegeList ( privilegeObject )? KW_FROM principalSpecification
			{
			KW_REVOKE537=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokePrivileges8900); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REVOKE.add(KW_REVOKE537);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1636:17: ( grantOptionFor )?
			int alt164=2;
			int LA164_0 = input.LA(1);
			if ( (LA164_0==KW_GRANT) ) {
				alt164=1;
			}
			switch (alt164) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1636:17: grantOptionFor
					{
					pushFollow(FOLLOW_grantOptionFor_in_revokePrivileges8902);
					grantOptionFor538=grantOptionFor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_grantOptionFor.add(grantOptionFor538.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_privilegeList_in_revokePrivileges8905);
			privilegeList539=privilegeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privilegeList.add(privilegeList539.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1636:47: ( privilegeObject )?
			int alt165=2;
			int LA165_0 = input.LA(1);
			if ( (LA165_0==KW_ON) ) {
				alt165=1;
			}
			switch (alt165) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1636:47: privilegeObject
					{
					pushFollow(FOLLOW_privilegeObject_in_revokePrivileges8907);
					privilegeObject540=privilegeObject();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privilegeObject.add(privilegeObject540.getTree());
					}
					break;

			}

			KW_FROM541=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokePrivileges8910); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM541);

			pushFollow(FOLLOW_principalSpecification_in_revokePrivileges8912);
			principalSpecification542=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification542.getTree());
			// AST REWRITE
			// elements: privilegeList, grantOptionFor, principalSpecification, privilegeObject
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1637:5: -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1637:8: ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ( grantOptionFor )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_REVOKE, "TOK_REVOKE"), root_1);
				adaptor.addChild(root_1, stream_privilegeList.nextTree());
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1637:58: ( privilegeObject )?
				if ( stream_privilegeObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeObject.nextTree());
				}
				stream_privilegeObject.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1637:75: ( grantOptionFor )?
				if ( stream_grantOptionFor.hasNext() ) {
					adaptor.addChild(root_1, stream_grantOptionFor.nextTree());
				}
				stream_grantOptionFor.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "revokePrivileges"


	public static class grantRole_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "grantRole"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1640:1: grantRole : KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) ;
	public final HiveASTParser.grantRole_return grantRole() throws RecognitionException {
		HiveASTParser.grantRole_return retval = new HiveASTParser.grantRole_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_GRANT543=null;
		Token KW_ROLE544=null;
		Token COMMA546=null;
		Token KW_TO548=null;
		ParserRuleReturnScope identifier545 =null;
		ParserRuleReturnScope identifier547 =null;
		ParserRuleReturnScope principalSpecification549 =null;
		ParserRuleReturnScope withAdminOption550 =null;

		HiveParserASTNode KW_GRANT543_tree=null;
		HiveParserASTNode KW_ROLE544_tree=null;
		HiveParserASTNode COMMA546_tree=null;
		HiveParserASTNode KW_TO548_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_withAdminOption=new RewriteRuleSubtreeStream(adaptor,"rule withAdminOption");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg("grant role", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1643:5: ( KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )? -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1643:7: KW_GRANT ( KW_ROLE )? identifier ( COMMA identifier )* KW_TO principalSpecification ( withAdminOption )?
			{
			KW_GRANT543=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantRole8959); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT543);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1643:16: ( KW_ROLE )?
			int alt166=2;
			int LA166_0 = input.LA(1);
			if ( (LA166_0==KW_ROLE) ) {
				int LA166_1 = input.LA(2);
				if ( (LA166_1==Identifier||(LA166_1 >= KW_ABORT && LA166_1 <= KW_AFTER)||LA166_1==KW_ANALYZE||LA166_1==KW_ARCHIVE||LA166_1==KW_ASC||(LA166_1 >= KW_AUTOCOMMIT && LA166_1 <= KW_BEFORE)||(LA166_1 >= KW_BUCKET && LA166_1 <= KW_BUCKETS)||(LA166_1 >= KW_CACHE && LA166_1 <= KW_CASCADE)||LA166_1==KW_CHANGE||(LA166_1 >= KW_CLUSTER && LA166_1 <= KW_COLLECTION)||(LA166_1 >= KW_COLUMNS && LA166_1 <= KW_COMMENT)||(LA166_1 >= KW_COMPACT && LA166_1 <= KW_CONCATENATE)||LA166_1==KW_CONTINUE||LA166_1==KW_DATA||LA166_1==KW_DATABASES||(LA166_1 >= KW_DATETIME && LA166_1 <= KW_DBPROPERTIES)||(LA166_1 >= KW_DEFERRED && LA166_1 <= KW_DEFINED)||(LA166_1 >= KW_DELIMITED && LA166_1 <= KW_DESC)||(LA166_1 >= KW_DETAIL && LA166_1 <= KW_DISABLE)||LA166_1==KW_DISTRIBUTE||LA166_1==KW_DOW||(LA166_1 >= KW_DUMP && LA166_1 <= KW_ELEM_TYPE)||LA166_1==KW_ENABLE||LA166_1==KW_ESCAPED||LA166_1==KW_EXCLUSIVE||(LA166_1 >= KW_EXPLAIN && LA166_1 <= KW_EXPRESSION)||(LA166_1 >= KW_FIELDS && LA166_1 <= KW_FIRST)||(LA166_1 >= KW_FORMAT && LA166_1 <= KW_FORMATTED)||LA166_1==KW_FUNCTIONS||(LA166_1 >= KW_HOUR && LA166_1 <= KW_IDXPROPERTIES)||(LA166_1 >= KW_INDEX && LA166_1 <= KW_INDEXES)||(LA166_1 >= KW_INPATH && LA166_1 <= KW_INPUTFORMAT)||(LA166_1 >= KW_ISOLATION && LA166_1 <= KW_JAR)||(LA166_1 >= KW_KEY && LA166_1 <= KW_LAST)||LA166_1==KW_LEVEL||(LA166_1 >= KW_LIMIT && LA166_1 <= KW_LOAD)||(LA166_1 >= KW_LOCATION && LA166_1 <= KW_LONG)||(LA166_1 >= KW_MAPJOIN && LA166_1 <= KW_MATERIALIZED)||LA166_1==KW_METADATA||(LA166_1 >= KW_MINUTE && LA166_1 <= KW_MONTH)||LA166_1==KW_MSCK||(LA166_1 >= KW_NORELY && LA166_1 <= KW_NOSCAN)||LA166_1==KW_NOVALIDATE||LA166_1==KW_NULLS||LA166_1==KW_OFFSET||(LA166_1 >= KW_OPERATOR && LA166_1 <= KW_OPTION)||(LA166_1 >= KW_OUTPUTDRIVER && LA166_1 <= KW_OUTPUTFORMAT)||(LA166_1 >= KW_OVERWRITE && LA166_1 <= KW_OWNER)||(LA166_1 >= KW_PARTITIONED && LA166_1 <= KW_PARTITIONS)||LA166_1==KW_PLUS||LA166_1==KW_PRETTY||LA166_1==KW_PRINCIPALS||(LA166_1 >= KW_PURGE && LA166_1 <= KW_QUARTER)||LA166_1==KW_READ||(LA166_1 >= KW_REBUILD && LA166_1 <= KW_RECORDWRITER)||(LA166_1 >= KW_RELOAD && LA166_1 <= KW_RESTRICT)||LA166_1==KW_REWRITE||(LA166_1 >= KW_ROLE && LA166_1 <= KW_ROLES)||(LA166_1 >= KW_SCHEMA && LA166_1 <= KW_SECOND)||(LA166_1 >= KW_SEMI && LA166_1 <= KW_SERVER)||(LA166_1 >= KW_SETS && LA166_1 <= KW_SKEWED)||(LA166_1 >= KW_SNAPSHOT && LA166_1 <= KW_SSL)||(LA166_1 >= KW_STATISTICS && LA166_1 <= KW_SUMMARY)||LA166_1==KW_TABLES||(LA166_1 >= KW_TBLPROPERTIES && LA166_1 <= KW_TERMINATED)||LA166_1==KW_TINYINT||(LA166_1 >= KW_TOUCH && LA166_1 <= KW_TRANSACTIONS)||LA166_1==KW_UNARCHIVE||LA166_1==KW_UNDO||LA166_1==KW_UNIONTYPE||(LA166_1 >= KW_UNLOCK && LA166_1 <= KW_UNSIGNED)||(LA166_1 >= KW_URI && LA166_1 <= KW_USE)||(LA166_1 >= KW_UTC && LA166_1 <= KW_VALIDATE)||LA166_1==KW_VALUE_TYPE||(LA166_1 >= KW_VECTORIZATION && LA166_1 <= KW_WEEK)||LA166_1==KW_WHILE||(LA166_1 >= KW_WORK && LA166_1 <= KW_YEAR)||LA166_1==KW_BATCH||LA166_1==KW_DAYOFWEEK||LA166_1==KW_HOLD_DDLTIME||LA166_1==KW_IGNORE||LA166_1==KW_NO_DROP||LA166_1==KW_OFFLINE||LA166_1==KW_PROTECTION||LA166_1==KW_READONLY) ) {
					alt166=1;
				}
			}
			switch (alt166) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1643:16: KW_ROLE
					{
					KW_ROLE544=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_grantRole8961); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE544);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_grantRole8964);
			identifier545=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier545.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1643:36: ( COMMA identifier )*
			loop167:
			while (true) {
				int alt167=2;
				int LA167_0 = input.LA(1);
				if ( (LA167_0==COMMA) ) {
					alt167=1;
				}

				switch (alt167) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1643:37: COMMA identifier
					{
					COMMA546=(Token)match(input,COMMA,FOLLOW_COMMA_in_grantRole8967); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA546);

					pushFollow(FOLLOW_identifier_in_grantRole8969);
					identifier547=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier547.getTree());
					}
					break;

				default :
					break loop167;
				}
			}

			KW_TO548=(Token)match(input,KW_TO,FOLLOW_KW_TO_in_grantRole8973); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TO.add(KW_TO548);

			pushFollow(FOLLOW_principalSpecification_in_grantRole8975);
			principalSpecification549=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification549.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1643:85: ( withAdminOption )?
			int alt168=2;
			int LA168_0 = input.LA(1);
			if ( (LA168_0==KW_WITH) ) {
				alt168=1;
			}
			switch (alt168) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1643:85: withAdminOption
					{
					pushFollow(FOLLOW_withAdminOption_in_grantRole8977);
					withAdminOption550=withAdminOption();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withAdminOption.add(withAdminOption550.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: identifier, principalSpecification, withAdminOption
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1644:5: -> ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1644:8: ^( TOK_GRANT_ROLE principalSpecification ( withAdminOption )? ( identifier )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_GRANT_ROLE, "TOK_GRANT_ROLE"), root_1);
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1644:48: ( withAdminOption )?
				if ( stream_withAdminOption.hasNext() ) {
					adaptor.addChild(root_1, stream_withAdminOption.nextTree());
				}
				stream_withAdminOption.reset();

				if ( !(stream_identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_identifier.nextTree());
				}
				stream_identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantRole"


	public static class revokeRole_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "revokeRole"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1647:1: revokeRole : KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ ) ;
	public final HiveASTParser.revokeRole_return revokeRole() throws RecognitionException {
		HiveASTParser.revokeRole_return retval = new HiveASTParser.revokeRole_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_REVOKE551=null;
		Token KW_ROLE553=null;
		Token COMMA555=null;
		Token KW_FROM557=null;
		ParserRuleReturnScope adminOptionFor552 =null;
		ParserRuleReturnScope identifier554 =null;
		ParserRuleReturnScope identifier556 =null;
		ParserRuleReturnScope principalSpecification558 =null;

		HiveParserASTNode KW_REVOKE551_tree=null;
		HiveParserASTNode KW_ROLE553_tree=null;
		HiveParserASTNode COMMA555_tree=null;
		HiveParserASTNode KW_FROM557_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_adminOptionFor=new RewriteRuleSubtreeStream(adaptor,"rule adminOptionFor");
		RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");

		pushMsg("revoke role", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1650:5: ( KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1650:7: KW_REVOKE ( adminOptionFor )? ( KW_ROLE )? identifier ( COMMA identifier )* KW_FROM principalSpecification
			{
			KW_REVOKE551=(Token)match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokeRole9023); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REVOKE.add(KW_REVOKE551);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1650:17: ( adminOptionFor )?
			int alt169=2;
			int LA169_0 = input.LA(1);
			if ( (LA169_0==KW_ADMIN) ) {
				int LA169_1 = input.LA(2);
				if ( (LA169_1==KW_OPTION) ) {
					alt169=1;
				}
			}
			switch (alt169) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1650:17: adminOptionFor
					{
					pushFollow(FOLLOW_adminOptionFor_in_revokeRole9025);
					adminOptionFor552=adminOptionFor();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_adminOptionFor.add(adminOptionFor552.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1650:33: ( KW_ROLE )?
			int alt170=2;
			int LA170_0 = input.LA(1);
			if ( (LA170_0==KW_ROLE) ) {
				int LA170_1 = input.LA(2);
				if ( (LA170_1==Identifier||(LA170_1 >= KW_ABORT && LA170_1 <= KW_AFTER)||LA170_1==KW_ANALYZE||LA170_1==KW_ARCHIVE||LA170_1==KW_ASC||(LA170_1 >= KW_AUTOCOMMIT && LA170_1 <= KW_BEFORE)||(LA170_1 >= KW_BUCKET && LA170_1 <= KW_BUCKETS)||(LA170_1 >= KW_CACHE && LA170_1 <= KW_CASCADE)||LA170_1==KW_CHANGE||(LA170_1 >= KW_CLUSTER && LA170_1 <= KW_COLLECTION)||(LA170_1 >= KW_COLUMNS && LA170_1 <= KW_COMMENT)||(LA170_1 >= KW_COMPACT && LA170_1 <= KW_CONCATENATE)||LA170_1==KW_CONTINUE||LA170_1==KW_DATA||LA170_1==KW_DATABASES||(LA170_1 >= KW_DATETIME && LA170_1 <= KW_DBPROPERTIES)||(LA170_1 >= KW_DEFERRED && LA170_1 <= KW_DEFINED)||(LA170_1 >= KW_DELIMITED && LA170_1 <= KW_DESC)||(LA170_1 >= KW_DETAIL && LA170_1 <= KW_DISABLE)||LA170_1==KW_DISTRIBUTE||LA170_1==KW_DOW||(LA170_1 >= KW_DUMP && LA170_1 <= KW_ELEM_TYPE)||LA170_1==KW_ENABLE||LA170_1==KW_ESCAPED||LA170_1==KW_EXCLUSIVE||(LA170_1 >= KW_EXPLAIN && LA170_1 <= KW_EXPRESSION)||(LA170_1 >= KW_FIELDS && LA170_1 <= KW_FIRST)||(LA170_1 >= KW_FORMAT && LA170_1 <= KW_FORMATTED)||LA170_1==KW_FUNCTIONS||(LA170_1 >= KW_HOUR && LA170_1 <= KW_IDXPROPERTIES)||(LA170_1 >= KW_INDEX && LA170_1 <= KW_INDEXES)||(LA170_1 >= KW_INPATH && LA170_1 <= KW_INPUTFORMAT)||(LA170_1 >= KW_ISOLATION && LA170_1 <= KW_JAR)||(LA170_1 >= KW_KEY && LA170_1 <= KW_LAST)||LA170_1==KW_LEVEL||(LA170_1 >= KW_LIMIT && LA170_1 <= KW_LOAD)||(LA170_1 >= KW_LOCATION && LA170_1 <= KW_LONG)||(LA170_1 >= KW_MAPJOIN && LA170_1 <= KW_MATERIALIZED)||LA170_1==KW_METADATA||(LA170_1 >= KW_MINUTE && LA170_1 <= KW_MONTH)||LA170_1==KW_MSCK||(LA170_1 >= KW_NORELY && LA170_1 <= KW_NOSCAN)||LA170_1==KW_NOVALIDATE||LA170_1==KW_NULLS||LA170_1==KW_OFFSET||(LA170_1 >= KW_OPERATOR && LA170_1 <= KW_OPTION)||(LA170_1 >= KW_OUTPUTDRIVER && LA170_1 <= KW_OUTPUTFORMAT)||(LA170_1 >= KW_OVERWRITE && LA170_1 <= KW_OWNER)||(LA170_1 >= KW_PARTITIONED && LA170_1 <= KW_PARTITIONS)||LA170_1==KW_PLUS||LA170_1==KW_PRETTY||LA170_1==KW_PRINCIPALS||(LA170_1 >= KW_PURGE && LA170_1 <= KW_QUARTER)||LA170_1==KW_READ||(LA170_1 >= KW_REBUILD && LA170_1 <= KW_RECORDWRITER)||(LA170_1 >= KW_RELOAD && LA170_1 <= KW_RESTRICT)||LA170_1==KW_REWRITE||(LA170_1 >= KW_ROLE && LA170_1 <= KW_ROLES)||(LA170_1 >= KW_SCHEMA && LA170_1 <= KW_SECOND)||(LA170_1 >= KW_SEMI && LA170_1 <= KW_SERVER)||(LA170_1 >= KW_SETS && LA170_1 <= KW_SKEWED)||(LA170_1 >= KW_SNAPSHOT && LA170_1 <= KW_SSL)||(LA170_1 >= KW_STATISTICS && LA170_1 <= KW_SUMMARY)||LA170_1==KW_TABLES||(LA170_1 >= KW_TBLPROPERTIES && LA170_1 <= KW_TERMINATED)||LA170_1==KW_TINYINT||(LA170_1 >= KW_TOUCH && LA170_1 <= KW_TRANSACTIONS)||LA170_1==KW_UNARCHIVE||LA170_1==KW_UNDO||LA170_1==KW_UNIONTYPE||(LA170_1 >= KW_UNLOCK && LA170_1 <= KW_UNSIGNED)||(LA170_1 >= KW_URI && LA170_1 <= KW_USE)||(LA170_1 >= KW_UTC && LA170_1 <= KW_VALIDATE)||LA170_1==KW_VALUE_TYPE||(LA170_1 >= KW_VECTORIZATION && LA170_1 <= KW_WEEK)||LA170_1==KW_WHILE||(LA170_1 >= KW_WORK && LA170_1 <= KW_YEAR)||LA170_1==KW_BATCH||LA170_1==KW_DAYOFWEEK||LA170_1==KW_HOLD_DDLTIME||LA170_1==KW_IGNORE||LA170_1==KW_NO_DROP||LA170_1==KW_OFFLINE||LA170_1==KW_PROTECTION||LA170_1==KW_READONLY) ) {
					alt170=1;
				}
			}
			switch (alt170) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1650:33: KW_ROLE
					{
					KW_ROLE553=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_revokeRole9028); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE553);

					}
					break;

			}

			pushFollow(FOLLOW_identifier_in_revokeRole9031);
			identifier554=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier554.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1650:53: ( COMMA identifier )*
			loop171:
			while (true) {
				int alt171=2;
				int LA171_0 = input.LA(1);
				if ( (LA171_0==COMMA) ) {
					alt171=1;
				}

				switch (alt171) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1650:54: COMMA identifier
					{
					COMMA555=(Token)match(input,COMMA,FOLLOW_COMMA_in_revokeRole9034); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA555);

					pushFollow(FOLLOW_identifier_in_revokeRole9036);
					identifier556=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier556.getTree());
					}
					break;

				default :
					break loop171;
				}
			}

			KW_FROM557=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_revokeRole9040); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM557);

			pushFollow(FOLLOW_principalSpecification_in_revokeRole9042);
			principalSpecification558=principalSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalSpecification.add(principalSpecification558.getTree());
			// AST REWRITE
			// elements: principalSpecification, adminOptionFor, identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1651:5: -> ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1651:8: ^( TOK_REVOKE_ROLE principalSpecification ( adminOptionFor )? ( identifier )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_REVOKE_ROLE, "TOK_REVOKE_ROLE"), root_1);
				adaptor.addChild(root_1, stream_principalSpecification.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1651:49: ( adminOptionFor )?
				if ( stream_adminOptionFor.hasNext() ) {
					adaptor.addChild(root_1, stream_adminOptionFor.nextTree());
				}
				stream_adminOptionFor.reset();

				if ( !(stream_identifier.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_identifier.hasNext() ) {
					adaptor.addChild(root_1, stream_identifier.nextTree());
				}
				stream_identifier.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "revokeRole"


	public static class showRoleGrants_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "showRoleGrants"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1654:1: showRoleGrants : KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) ;
	public final HiveASTParser.showRoleGrants_return showRoleGrants() throws RecognitionException {
		HiveASTParser.showRoleGrants_return retval = new HiveASTParser.showRoleGrants_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SHOW559=null;
		Token KW_ROLE560=null;
		Token KW_GRANT561=null;
		ParserRuleReturnScope principalName562 =null;

		HiveParserASTNode KW_SHOW559_tree=null;
		HiveParserASTNode KW_ROLE560_tree=null;
		HiveParserASTNode KW_GRANT561_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		pushMsg("show role grants", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1657:5: ( KW_SHOW KW_ROLE KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1657:7: KW_SHOW KW_ROLE KW_GRANT principalName
			{
			KW_SHOW559=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoleGrants9087); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW559);

			KW_ROLE560=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_showRoleGrants9089); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE560);

			KW_GRANT561=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showRoleGrants9091); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT561);

			pushFollow(FOLLOW_principalName_in_showRoleGrants9093);
			principalName562=principalName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalName.add(principalName562.getTree());
			// AST REWRITE
			// elements: principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1658:5: -> ^( TOK_SHOW_ROLE_GRANT principalName )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1658:8: ^( TOK_SHOW_ROLE_GRANT principalName )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_ROLE_GRANT, "TOK_SHOW_ROLE_GRANT"), root_1);
				adaptor.addChild(root_1, stream_principalName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRoleGrants"


	public static class showRoles_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "showRoles"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1662:1: showRoles : KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) ;
	public final HiveASTParser.showRoles_return showRoles() throws RecognitionException {
		HiveASTParser.showRoles_return retval = new HiveASTParser.showRoles_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SHOW563=null;
		Token KW_ROLES564=null;

		HiveParserASTNode KW_SHOW563_tree=null;
		HiveParserASTNode KW_ROLES564_tree=null;
		RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");

		pushMsg("show roles", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1665:5: ( KW_SHOW KW_ROLES -> ^( TOK_SHOW_ROLES ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1665:7: KW_SHOW KW_ROLES
			{
			KW_SHOW563=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoles9133); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW563);

			KW_ROLES564=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showRoles9135); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLES.add(KW_ROLES564);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1666:5: -> ^( TOK_SHOW_ROLES )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1666:8: ^( TOK_SHOW_ROLES )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_ROLES, "TOK_SHOW_ROLES"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRoles"


	public static class showCurrentRole_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "showCurrentRole"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1669:1: showCurrentRole : KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_SET_ROLE ) ;
	public final HiveASTParser.showCurrentRole_return showCurrentRole() throws RecognitionException {
		HiveASTParser.showCurrentRole_return retval = new HiveASTParser.showCurrentRole_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SHOW565=null;
		Token KW_CURRENT566=null;
		Token KW_ROLES567=null;

		HiveParserASTNode KW_SHOW565_tree=null;
		HiveParserASTNode KW_CURRENT566_tree=null;
		HiveParserASTNode KW_ROLES567_tree=null;
		RewriteRuleTokenStream stream_KW_ROLES=new RewriteRuleTokenStream(adaptor,"token KW_ROLES");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_CURRENT=new RewriteRuleTokenStream(adaptor,"token KW_CURRENT");

		pushMsg("show current role", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1672:5: ( KW_SHOW KW_CURRENT KW_ROLES -> ^( TOK_SHOW_SET_ROLE ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1672:7: KW_SHOW KW_CURRENT KW_ROLES
			{
			KW_SHOW565=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showCurrentRole9172); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW565);

			KW_CURRENT566=(Token)match(input,KW_CURRENT,FOLLOW_KW_CURRENT_in_showCurrentRole9174); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CURRENT.add(KW_CURRENT566);

			KW_ROLES567=(Token)match(input,KW_ROLES,FOLLOW_KW_ROLES_in_showCurrentRole9176); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLES.add(KW_ROLES567);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1673:5: -> ^( TOK_SHOW_SET_ROLE )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1673:8: ^( TOK_SHOW_SET_ROLE )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showCurrentRole"


	public static class setRole_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "setRole"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1676:1: setRole : KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) ) ;
	public final HiveASTParser.setRole_return setRole() throws RecognitionException {
		HiveASTParser.setRole_return retval = new HiveASTParser.setRole_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token all=null;
		Token none=null;
		Token KW_SET568=null;
		Token KW_ROLE569=null;
		ParserRuleReturnScope identifier570 =null;

		HiveParserASTNode all_tree=null;
		HiveParserASTNode none_tree=null;
		HiveParserASTNode KW_SET568_tree=null;
		HiveParserASTNode KW_ROLE569_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_NONE=new RewriteRuleTokenStream(adaptor,"token KW_NONE");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("set role", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1679:5: ( KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1679:7: KW_SET KW_ROLE ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) )
			{
			KW_SET568=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setRole9213); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET568);

			KW_ROLE569=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_setRole9215); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE569);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1680:5: ( ( KW_ALL )=> (all= KW_ALL ) -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] ) | ( KW_NONE )=> (none= KW_NONE ) -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] ) | identifier -> ^( TOK_SHOW_SET_ROLE identifier ) )
			int alt172=3;
			int LA172_0 = input.LA(1);
			if ( (LA172_0==KW_ALL) && (synpred14_HiveASTParser())) {
				alt172=1;
			}
			else if ( (LA172_0==KW_NONE) && (synpred15_HiveASTParser())) {
				alt172=2;
			}
			else if ( (LA172_0==Identifier||(LA172_0 >= KW_ABORT && LA172_0 <= KW_AFTER)||LA172_0==KW_ANALYZE||LA172_0==KW_ARCHIVE||LA172_0==KW_ASC||(LA172_0 >= KW_AUTOCOMMIT && LA172_0 <= KW_BEFORE)||(LA172_0 >= KW_BUCKET && LA172_0 <= KW_BUCKETS)||(LA172_0 >= KW_CACHE && LA172_0 <= KW_CASCADE)||LA172_0==KW_CHANGE||(LA172_0 >= KW_CLUSTER && LA172_0 <= KW_COLLECTION)||(LA172_0 >= KW_COLUMNS && LA172_0 <= KW_COMMENT)||(LA172_0 >= KW_COMPACT && LA172_0 <= KW_CONCATENATE)||LA172_0==KW_CONTINUE||LA172_0==KW_DATA||LA172_0==KW_DATABASES||(LA172_0 >= KW_DATETIME && LA172_0 <= KW_DBPROPERTIES)||(LA172_0 >= KW_DEFERRED && LA172_0 <= KW_DEFINED)||(LA172_0 >= KW_DELIMITED && LA172_0 <= KW_DESC)||(LA172_0 >= KW_DETAIL && LA172_0 <= KW_DISABLE)||LA172_0==KW_DISTRIBUTE||LA172_0==KW_DOW||(LA172_0 >= KW_DUMP && LA172_0 <= KW_ELEM_TYPE)||LA172_0==KW_ENABLE||LA172_0==KW_ESCAPED||LA172_0==KW_EXCLUSIVE||(LA172_0 >= KW_EXPLAIN && LA172_0 <= KW_EXPRESSION)||(LA172_0 >= KW_FIELDS && LA172_0 <= KW_FIRST)||(LA172_0 >= KW_FORMAT && LA172_0 <= KW_FORMATTED)||LA172_0==KW_FUNCTIONS||(LA172_0 >= KW_HOUR && LA172_0 <= KW_IDXPROPERTIES)||(LA172_0 >= KW_INDEX && LA172_0 <= KW_INDEXES)||(LA172_0 >= KW_INPATH && LA172_0 <= KW_INPUTFORMAT)||(LA172_0 >= KW_ISOLATION && LA172_0 <= KW_JAR)||(LA172_0 >= KW_KEY && LA172_0 <= KW_LAST)||LA172_0==KW_LEVEL||(LA172_0 >= KW_LIMIT && LA172_0 <= KW_LOAD)||(LA172_0 >= KW_LOCATION && LA172_0 <= KW_LONG)||(LA172_0 >= KW_MAPJOIN && LA172_0 <= KW_MATERIALIZED)||LA172_0==KW_METADATA||(LA172_0 >= KW_MINUTE && LA172_0 <= KW_MONTH)||LA172_0==KW_MSCK||(LA172_0 >= KW_NORELY && LA172_0 <= KW_NOSCAN)||LA172_0==KW_NOVALIDATE||LA172_0==KW_NULLS||LA172_0==KW_OFFSET||(LA172_0 >= KW_OPERATOR && LA172_0 <= KW_OPTION)||(LA172_0 >= KW_OUTPUTDRIVER && LA172_0 <= KW_OUTPUTFORMAT)||(LA172_0 >= KW_OVERWRITE && LA172_0 <= KW_OWNER)||(LA172_0 >= KW_PARTITIONED && LA172_0 <= KW_PARTITIONS)||LA172_0==KW_PLUS||LA172_0==KW_PRETTY||LA172_0==KW_PRINCIPALS||(LA172_0 >= KW_PURGE && LA172_0 <= KW_QUARTER)||LA172_0==KW_READ||(LA172_0 >= KW_REBUILD && LA172_0 <= KW_RECORDWRITER)||(LA172_0 >= KW_RELOAD && LA172_0 <= KW_RESTRICT)||LA172_0==KW_REWRITE||(LA172_0 >= KW_ROLE && LA172_0 <= KW_ROLES)||(LA172_0 >= KW_SCHEMA && LA172_0 <= KW_SECOND)||(LA172_0 >= KW_SEMI && LA172_0 <= KW_SERVER)||(LA172_0 >= KW_SETS && LA172_0 <= KW_SKEWED)||(LA172_0 >= KW_SNAPSHOT && LA172_0 <= KW_SSL)||(LA172_0 >= KW_STATISTICS && LA172_0 <= KW_SUMMARY)||LA172_0==KW_TABLES||(LA172_0 >= KW_TBLPROPERTIES && LA172_0 <= KW_TERMINATED)||LA172_0==KW_TINYINT||(LA172_0 >= KW_TOUCH && LA172_0 <= KW_TRANSACTIONS)||LA172_0==KW_UNARCHIVE||LA172_0==KW_UNDO||LA172_0==KW_UNIONTYPE||(LA172_0 >= KW_UNLOCK && LA172_0 <= KW_UNSIGNED)||(LA172_0 >= KW_URI && LA172_0 <= KW_USE)||(LA172_0 >= KW_UTC && LA172_0 <= KW_VALIDATE)||LA172_0==KW_VALUE_TYPE||(LA172_0 >= KW_VECTORIZATION && LA172_0 <= KW_WEEK)||LA172_0==KW_WHILE||(LA172_0 >= KW_WORK && LA172_0 <= KW_YEAR)||LA172_0==KW_BATCH||LA172_0==KW_DAYOFWEEK||LA172_0==KW_HOLD_DDLTIME||LA172_0==KW_IGNORE||LA172_0==KW_NO_DROP||LA172_0==KW_OFFLINE||LA172_0==KW_PROTECTION||LA172_0==KW_READONLY) ) {
				alt172=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 172, 0, input);
				throw nvae;
			}

			switch (alt172) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1681:5: ( KW_ALL )=> (all= KW_ALL )
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1681:17: (all= KW_ALL )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1681:18: all= KW_ALL
					{
					all=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setRole9237); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(all);

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1681:30: -> ^( TOK_SHOW_SET_ROLE Identifier[$all.text] )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1681:33: ^( TOK_SHOW_SET_ROLE Identifier[$all.text] )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
						adaptor.addChild(root_1, (HiveParserASTNode)adaptor.create(Identifier, (all!=null?all.getText():null)));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1683:5: ( KW_NONE )=> (none= KW_NONE )
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1683:18: (none= KW_NONE )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1683:19: none= KW_NONE
					{
					none=(Token)match(input,KW_NONE,FOLLOW_KW_NONE_in_setRole9268); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NONE.add(none);

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1683:33: -> ^( TOK_SHOW_SET_ROLE Identifier[$none.text] )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1683:36: ^( TOK_SHOW_SET_ROLE Identifier[$none.text] )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
						adaptor.addChild(root_1, (HiveParserASTNode)adaptor.create(Identifier, (none!=null?none.getText():null)));
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1685:5: identifier
					{
					pushFollow(FOLLOW_identifier_in_setRole9290);
					identifier570=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier570.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1685:16: -> ^( TOK_SHOW_SET_ROLE identifier )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1685:19: ^( TOK_SHOW_SET_ROLE identifier )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_SET_ROLE, "TOK_SHOW_SET_ROLE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setRole"


	public static class showGrants_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "showGrants"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1689:1: showGrants : KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) ;
	public final HiveASTParser.showGrants_return showGrants() throws RecognitionException {
		HiveASTParser.showGrants_return retval = new HiveASTParser.showGrants_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SHOW571=null;
		Token KW_GRANT572=null;
		Token KW_ON574=null;
		ParserRuleReturnScope principalName573 =null;
		ParserRuleReturnScope privilegeIncludeColObject575 =null;

		HiveParserASTNode KW_SHOW571_tree=null;
		HiveParserASTNode KW_GRANT572_tree=null;
		HiveParserASTNode KW_ON574_tree=null;
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_privilegeIncludeColObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeIncludeColObject");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		pushMsg("show grants", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1692:5: ( KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1692:7: KW_SHOW KW_GRANT ( principalName )? ( KW_ON privilegeIncludeColObject )?
			{
			KW_SHOW571=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showGrants9331); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW571);

			KW_GRANT572=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showGrants9333); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT572);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1692:24: ( principalName )?
			int alt173=2;
			int LA173_0 = input.LA(1);
			if ( (LA173_0==KW_GROUP||LA173_0==KW_ROLE||LA173_0==KW_USER) ) {
				alt173=1;
			}
			switch (alt173) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1692:24: principalName
					{
					pushFollow(FOLLOW_principalName_in_showGrants9335);
					principalName573=principalName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalName.add(principalName573.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1692:39: ( KW_ON privilegeIncludeColObject )?
			int alt174=2;
			int LA174_0 = input.LA(1);
			if ( (LA174_0==KW_ON) ) {
				alt174=1;
			}
			switch (alt174) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1692:40: KW_ON privilegeIncludeColObject
					{
					KW_ON574=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_showGrants9339); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON574);

					pushFollow(FOLLOW_privilegeIncludeColObject_in_showGrants9341);
					privilegeIncludeColObject575=privilegeIncludeColObject();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privilegeIncludeColObject.add(privilegeIncludeColObject575.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: principalName, privilegeIncludeColObject
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1693:5: -> ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1693:8: ^( TOK_SHOW_GRANT ( principalName )? ( privilegeIncludeColObject )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_GRANT, "TOK_SHOW_GRANT"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1693:25: ( principalName )?
				if ( stream_principalName.hasNext() ) {
					adaptor.addChild(root_1, stream_principalName.nextTree());
				}
				stream_principalName.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1693:40: ( privilegeIncludeColObject )?
				if ( stream_privilegeIncludeColObject.hasNext() ) {
					adaptor.addChild(root_1, stream_privilegeIncludeColObject.nextTree());
				}
				stream_privilegeIncludeColObject.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showGrants"


	public static class showRolePrincipals_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "showRolePrincipals"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1696:1: showRolePrincipals : KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) ;
	public final HiveASTParser.showRolePrincipals_return showRolePrincipals() throws RecognitionException {
		HiveASTParser.showRolePrincipals_return retval = new HiveASTParser.showRolePrincipals_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SHOW576=null;
		Token KW_PRINCIPALS577=null;
		ParserRuleReturnScope roleName =null;

		HiveParserASTNode KW_SHOW576_tree=null;
		HiveParserASTNode KW_PRINCIPALS577_tree=null;
		RewriteRuleTokenStream stream_KW_PRINCIPALS=new RewriteRuleTokenStream(adaptor,"token KW_PRINCIPALS");
		RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		pushMsg("show role principals", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1699:5: ( KW_SHOW KW_PRINCIPALS roleName= identifier -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1699:7: KW_SHOW KW_PRINCIPALS roleName= identifier
			{
			KW_SHOW576=(Token)match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRolePrincipals9386); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SHOW.add(KW_SHOW576);

			KW_PRINCIPALS577=(Token)match(input,KW_PRINCIPALS,FOLLOW_KW_PRINCIPALS_in_showRolePrincipals9388); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PRINCIPALS.add(KW_PRINCIPALS577);

			pushFollow(FOLLOW_identifier_in_showRolePrincipals9392);
			roleName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(roleName.getTree());
			// AST REWRITE
			// elements: roleName
			// token labels: 
			// rule labels: roleName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_roleName=new RewriteRuleSubtreeStream(adaptor,"rule roleName",roleName!=null?roleName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1700:5: -> ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1700:8: ^( TOK_SHOW_ROLE_PRINCIPALS $roleName)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SHOW_ROLE_PRINCIPALS, "TOK_SHOW_ROLE_PRINCIPALS"), root_1);
				adaptor.addChild(root_1, stream_roleName.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showRolePrincipals"


	public static class privilegeIncludeColObject_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "privilegeIncludeColObject"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1704:1: privilegeIncludeColObject : ( ( KW_ALL )=> KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectCols -> ^( TOK_PRIV_OBJECT_COL privObjectCols ) );
	public final HiveASTParser.privilegeIncludeColObject_return privilegeIncludeColObject() throws RecognitionException {
		HiveASTParser.privilegeIncludeColObject_return retval = new HiveASTParser.privilegeIncludeColObject_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ALL578=null;
		ParserRuleReturnScope privObjectCols579 =null;

		HiveParserASTNode KW_ALL578_tree=null;
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleSubtreeStream stream_privObjectCols=new RewriteRuleSubtreeStream(adaptor,"rule privObjectCols");

		pushMsg("privilege object including columns", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1707:5: ( ( KW_ALL )=> KW_ALL -> ^( TOK_RESOURCE_ALL ) | privObjectCols -> ^( TOK_PRIV_OBJECT_COL privObjectCols ) )
			int alt175=2;
			int LA175_0 = input.LA(1);
			if ( (LA175_0==KW_ALL) && (synpred16_HiveASTParser())) {
				alt175=1;
			}
			else if ( (LA175_0==Identifier||(LA175_0 >= KW_ABORT && LA175_0 <= KW_AFTER)||LA175_0==KW_ANALYZE||LA175_0==KW_ARCHIVE||LA175_0==KW_ASC||(LA175_0 >= KW_AUTOCOMMIT && LA175_0 <= KW_BEFORE)||(LA175_0 >= KW_BUCKET && LA175_0 <= KW_BUCKETS)||(LA175_0 >= KW_CACHE && LA175_0 <= KW_CASCADE)||LA175_0==KW_CHANGE||(LA175_0 >= KW_CLUSTER && LA175_0 <= KW_COLLECTION)||(LA175_0 >= KW_COLUMNS && LA175_0 <= KW_COMMENT)||(LA175_0 >= KW_COMPACT && LA175_0 <= KW_CONCATENATE)||LA175_0==KW_CONTINUE||(LA175_0 >= KW_DATA && LA175_0 <= KW_DATABASES)||(LA175_0 >= KW_DATETIME && LA175_0 <= KW_DBPROPERTIES)||(LA175_0 >= KW_DEFERRED && LA175_0 <= KW_DEFINED)||(LA175_0 >= KW_DELIMITED && LA175_0 <= KW_DESC)||(LA175_0 >= KW_DETAIL && LA175_0 <= KW_DISABLE)||LA175_0==KW_DISTRIBUTE||LA175_0==KW_DOW||(LA175_0 >= KW_DUMP && LA175_0 <= KW_ELEM_TYPE)||LA175_0==KW_ENABLE||LA175_0==KW_ESCAPED||LA175_0==KW_EXCLUSIVE||(LA175_0 >= KW_EXPLAIN && LA175_0 <= KW_EXPRESSION)||(LA175_0 >= KW_FIELDS && LA175_0 <= KW_FIRST)||(LA175_0 >= KW_FORMAT && LA175_0 <= KW_FORMATTED)||LA175_0==KW_FUNCTIONS||(LA175_0 >= KW_HOUR && LA175_0 <= KW_IDXPROPERTIES)||(LA175_0 >= KW_INDEX && LA175_0 <= KW_INDEXES)||(LA175_0 >= KW_INPATH && LA175_0 <= KW_INPUTFORMAT)||(LA175_0 >= KW_ISOLATION && LA175_0 <= KW_JAR)||(LA175_0 >= KW_KEY && LA175_0 <= KW_LAST)||LA175_0==KW_LEVEL||(LA175_0 >= KW_LIMIT && LA175_0 <= KW_LOAD)||(LA175_0 >= KW_LOCATION && LA175_0 <= KW_LONG)||(LA175_0 >= KW_MAPJOIN && LA175_0 <= KW_MATERIALIZED)||LA175_0==KW_METADATA||(LA175_0 >= KW_MINUTE && LA175_0 <= KW_MONTH)||LA175_0==KW_MSCK||(LA175_0 >= KW_NORELY && LA175_0 <= KW_NOSCAN)||LA175_0==KW_NOVALIDATE||LA175_0==KW_NULLS||LA175_0==KW_OFFSET||(LA175_0 >= KW_OPERATOR && LA175_0 <= KW_OPTION)||(LA175_0 >= KW_OUTPUTDRIVER && LA175_0 <= KW_OUTPUTFORMAT)||(LA175_0 >= KW_OVERWRITE && LA175_0 <= KW_OWNER)||(LA175_0 >= KW_PARTITIONED && LA175_0 <= KW_PARTITIONS)||LA175_0==KW_PLUS||LA175_0==KW_PRETTY||LA175_0==KW_PRINCIPALS||(LA175_0 >= KW_PURGE && LA175_0 <= KW_QUARTER)||LA175_0==KW_READ||(LA175_0 >= KW_REBUILD && LA175_0 <= KW_RECORDWRITER)||(LA175_0 >= KW_RELOAD && LA175_0 <= KW_RESTRICT)||LA175_0==KW_REWRITE||(LA175_0 >= KW_ROLE && LA175_0 <= KW_ROLES)||(LA175_0 >= KW_SCHEMA && LA175_0 <= KW_SECOND)||(LA175_0 >= KW_SEMI && LA175_0 <= KW_SERVER)||(LA175_0 >= KW_SETS && LA175_0 <= KW_SKEWED)||(LA175_0 >= KW_SNAPSHOT && LA175_0 <= KW_SSL)||(LA175_0 >= KW_STATISTICS && LA175_0 <= KW_TABLES)||(LA175_0 >= KW_TBLPROPERTIES && LA175_0 <= KW_TERMINATED)||LA175_0==KW_TINYINT||(LA175_0 >= KW_TOUCH && LA175_0 <= KW_TRANSACTIONS)||LA175_0==KW_UNARCHIVE||LA175_0==KW_UNDO||LA175_0==KW_UNIONTYPE||(LA175_0 >= KW_UNLOCK && LA175_0 <= KW_UNSIGNED)||(LA175_0 >= KW_URI && LA175_0 <= KW_USE)||(LA175_0 >= KW_UTC && LA175_0 <= KW_VALIDATE)||LA175_0==KW_VALUE_TYPE||(LA175_0 >= KW_VECTORIZATION && LA175_0 <= KW_WEEK)||LA175_0==KW_WHILE||(LA175_0 >= KW_WORK && LA175_0 <= KW_YEAR)||LA175_0==KW_BATCH||LA175_0==KW_DAYOFWEEK||LA175_0==KW_HOLD_DDLTIME||LA175_0==KW_IGNORE||LA175_0==KW_NO_DROP||LA175_0==KW_OFFLINE||LA175_0==KW_PROTECTION||LA175_0==KW_READONLY) ) {
				alt175=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 175, 0, input);
				throw nvae;
			}

			switch (alt175) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1707:7: ( KW_ALL )=> KW_ALL
					{
					KW_ALL578=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeIncludeColObject9439); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL578);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1707:26: -> ^( TOK_RESOURCE_ALL )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1707:29: ^( TOK_RESOURCE_ALL )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_RESOURCE_ALL, "TOK_RESOURCE_ALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1708:7: privObjectCols
					{
					pushFollow(FOLLOW_privObjectCols_in_privilegeIncludeColObject9453);
					privObjectCols579=privObjectCols();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privObjectCols.add(privObjectCols579.getTree());
					// AST REWRITE
					// elements: privObjectCols
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1708:22: -> ^( TOK_PRIV_OBJECT_COL privObjectCols )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1708:25: ^( TOK_PRIV_OBJECT_COL privObjectCols )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_OBJECT_COL, "TOK_PRIV_OBJECT_COL"), root_1);
						adaptor.addChild(root_1, stream_privObjectCols.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeIncludeColObject"


	public static class privilegeObject_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "privilegeObject"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1711:1: privilegeObject : KW_ON privObject -> ^( TOK_PRIV_OBJECT privObject ) ;
	public final HiveASTParser.privilegeObject_return privilegeObject() throws RecognitionException {
		HiveASTParser.privilegeObject_return retval = new HiveASTParser.privilegeObject_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ON580=null;
		ParserRuleReturnScope privObject581 =null;

		HiveParserASTNode KW_ON580_tree=null;
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_privObject=new RewriteRuleSubtreeStream(adaptor,"rule privObject");

		pushMsg("privilege object", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1714:5: ( KW_ON privObject -> ^( TOK_PRIV_OBJECT privObject ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1714:7: KW_ON privObject
			{
			KW_ON580=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_privilegeObject9488); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON580);

			pushFollow(FOLLOW_privObject_in_privilegeObject9490);
			privObject581=privObject();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privObject.add(privObject581.getTree());
			// AST REWRITE
			// elements: privObject
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1714:24: -> ^( TOK_PRIV_OBJECT privObject )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1714:27: ^( TOK_PRIV_OBJECT privObject )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_OBJECT, "TOK_PRIV_OBJECT"), root_1);
				adaptor.addChild(root_1, stream_privObject.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeObject"


	public static class privObject_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "privObject"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1718:1: privObject : ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) );
	public final HiveASTParser.privObject_return privObject() throws RecognitionException {
		HiveASTParser.privObject_return retval = new HiveASTParser.privObject_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token path=null;
		Token KW_DATABASE582=null;
		Token KW_SCHEMA583=null;
		Token KW_TABLE585=null;
		Token KW_URI588=null;
		Token KW_SERVER589=null;
		ParserRuleReturnScope identifier584 =null;
		ParserRuleReturnScope tableName586 =null;
		ParserRuleReturnScope partitionSpec587 =null;
		ParserRuleReturnScope identifier590 =null;

		HiveParserASTNode path_tree=null;
		HiveParserASTNode KW_DATABASE582_tree=null;
		HiveParserASTNode KW_SCHEMA583_tree=null;
		HiveParserASTNode KW_TABLE585_tree=null;
		HiveParserASTNode KW_URI588_tree=null;
		HiveParserASTNode KW_SERVER589_tree=null;
		RewriteRuleTokenStream stream_KW_SERVER=new RewriteRuleTokenStream(adaptor,"token KW_SERVER");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_URI=new RewriteRuleTokenStream(adaptor,"token KW_URI");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1719:5: ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) )
			int alt179=4;
			switch ( input.LA(1) ) {
			case KW_DATABASE:
				{
				alt179=1;
				}
				break;
			case KW_SCHEMA:
				{
				int LA179_2 = input.LA(2);
				if ( (LA179_2==Identifier||(LA179_2 >= KW_ABORT && LA179_2 <= KW_AFTER)||LA179_2==KW_ANALYZE||LA179_2==KW_ARCHIVE||LA179_2==KW_ASC||(LA179_2 >= KW_AUTOCOMMIT && LA179_2 <= KW_BEFORE)||(LA179_2 >= KW_BUCKET && LA179_2 <= KW_BUCKETS)||(LA179_2 >= KW_CACHE && LA179_2 <= KW_CASCADE)||LA179_2==KW_CHANGE||(LA179_2 >= KW_CLUSTER && LA179_2 <= KW_COLLECTION)||(LA179_2 >= KW_COLUMNS && LA179_2 <= KW_COMMENT)||(LA179_2 >= KW_COMPACT && LA179_2 <= KW_CONCATENATE)||LA179_2==KW_CONTINUE||LA179_2==KW_DATA||LA179_2==KW_DATABASES||(LA179_2 >= KW_DATETIME && LA179_2 <= KW_DBPROPERTIES)||(LA179_2 >= KW_DEFERRED && LA179_2 <= KW_DEFINED)||(LA179_2 >= KW_DELIMITED && LA179_2 <= KW_DESC)||(LA179_2 >= KW_DETAIL && LA179_2 <= KW_DISABLE)||LA179_2==KW_DISTRIBUTE||LA179_2==KW_DOW||(LA179_2 >= KW_DUMP && LA179_2 <= KW_ELEM_TYPE)||LA179_2==KW_ENABLE||LA179_2==KW_ESCAPED||LA179_2==KW_EXCLUSIVE||(LA179_2 >= KW_EXPLAIN && LA179_2 <= KW_EXPRESSION)||(LA179_2 >= KW_FIELDS && LA179_2 <= KW_FIRST)||(LA179_2 >= KW_FORMAT && LA179_2 <= KW_FORMATTED)||LA179_2==KW_FUNCTIONS||(LA179_2 >= KW_HOUR && LA179_2 <= KW_IDXPROPERTIES)||(LA179_2 >= KW_INDEX && LA179_2 <= KW_INDEXES)||(LA179_2 >= KW_INPATH && LA179_2 <= KW_INPUTFORMAT)||(LA179_2 >= KW_ISOLATION && LA179_2 <= KW_JAR)||(LA179_2 >= KW_KEY && LA179_2 <= KW_LAST)||LA179_2==KW_LEVEL||(LA179_2 >= KW_LIMIT && LA179_2 <= KW_LOAD)||(LA179_2 >= KW_LOCATION && LA179_2 <= KW_LONG)||(LA179_2 >= KW_MAPJOIN && LA179_2 <= KW_MATERIALIZED)||LA179_2==KW_METADATA||(LA179_2 >= KW_MINUTE && LA179_2 <= KW_MONTH)||LA179_2==KW_MSCK||(LA179_2 >= KW_NORELY && LA179_2 <= KW_NOSCAN)||LA179_2==KW_NOVALIDATE||LA179_2==KW_NULLS||LA179_2==KW_OFFSET||(LA179_2 >= KW_OPERATOR && LA179_2 <= KW_OPTION)||(LA179_2 >= KW_OUTPUTDRIVER && LA179_2 <= KW_OUTPUTFORMAT)||(LA179_2 >= KW_OVERWRITE && LA179_2 <= KW_OWNER)||(LA179_2 >= KW_PARTITIONED && LA179_2 <= KW_PARTITIONS)||LA179_2==KW_PLUS||LA179_2==KW_PRETTY||LA179_2==KW_PRINCIPALS||(LA179_2 >= KW_PURGE && LA179_2 <= KW_QUARTER)||LA179_2==KW_READ||(LA179_2 >= KW_REBUILD && LA179_2 <= KW_RECORDWRITER)||(LA179_2 >= KW_RELOAD && LA179_2 <= KW_RESTRICT)||LA179_2==KW_REWRITE||(LA179_2 >= KW_ROLE && LA179_2 <= KW_ROLES)||(LA179_2 >= KW_SCHEMA && LA179_2 <= KW_SECOND)||(LA179_2 >= KW_SEMI && LA179_2 <= KW_SERVER)||(LA179_2 >= KW_SETS && LA179_2 <= KW_SKEWED)||(LA179_2 >= KW_SNAPSHOT && LA179_2 <= KW_SSL)||(LA179_2 >= KW_STATISTICS && LA179_2 <= KW_SUMMARY)||LA179_2==KW_TABLES||(LA179_2 >= KW_TBLPROPERTIES && LA179_2 <= KW_TERMINATED)||LA179_2==KW_TINYINT||(LA179_2 >= KW_TOUCH && LA179_2 <= KW_TRANSACTIONS)||LA179_2==KW_UNARCHIVE||LA179_2==KW_UNDO||LA179_2==KW_UNIONTYPE||(LA179_2 >= KW_UNLOCK && LA179_2 <= KW_UNSIGNED)||(LA179_2 >= KW_URI && LA179_2 <= KW_USE)||(LA179_2 >= KW_UTC && LA179_2 <= KW_VALIDATE)||LA179_2==KW_VALUE_TYPE||(LA179_2 >= KW_VECTORIZATION && LA179_2 <= KW_WEEK)||LA179_2==KW_WHILE||(LA179_2 >= KW_WORK && LA179_2 <= KW_YEAR)||LA179_2==KW_BATCH||LA179_2==KW_DAYOFWEEK||LA179_2==KW_HOLD_DDLTIME||LA179_2==KW_IGNORE||LA179_2==KW_NO_DROP||LA179_2==KW_OFFLINE||LA179_2==KW_PROTECTION||LA179_2==KW_READONLY) ) {
					alt179=1;
				}
				else if ( (LA179_2==DOT||LA179_2==KW_FROM||LA179_2==KW_PARTITION||LA179_2==KW_TO) ) {
					alt179=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 179, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case Identifier:
			case KW_ABORT:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AUTOCOMMIT:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CHANGE:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DBPROPERTIES:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ESCAPED:
			case KW_EXCLUSIVE:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MAPJOIN:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NULLS:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PLUS:
			case KW_PRETTY:
			case KW_PRINCIPALS:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_READ:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_RENAME:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SETS:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_TABLE:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONS:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNLOCK:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WORK:
			case KW_WRITE:
			case KW_YEAR:
			case KW_BATCH:
			case KW_DAYOFWEEK:
			case KW_HOLD_DDLTIME:
			case KW_IGNORE:
			case KW_NO_DROP:
			case KW_OFFLINE:
			case KW_PROTECTION:
			case KW_READONLY:
				{
				alt179=2;
				}
				break;
			case KW_URI:
				{
				int LA179_5 = input.LA(2);
				if ( (LA179_5==DOT||LA179_5==KW_FROM||LA179_5==KW_PARTITION||LA179_5==KW_TO) ) {
					alt179=2;
				}
				else if ( (LA179_5==StringLiteral) ) {
					alt179=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 179, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_SERVER:
				{
				int LA179_6 = input.LA(2);
				if ( (LA179_6==DOT||LA179_6==KW_FROM||LA179_6==KW_PARTITION||LA179_6==KW_TO) ) {
					alt179=2;
				}
				else if ( (LA179_6==Identifier||(LA179_6 >= KW_ABORT && LA179_6 <= KW_AFTER)||LA179_6==KW_ANALYZE||LA179_6==KW_ARCHIVE||LA179_6==KW_ASC||(LA179_6 >= KW_AUTOCOMMIT && LA179_6 <= KW_BEFORE)||(LA179_6 >= KW_BUCKET && LA179_6 <= KW_BUCKETS)||(LA179_6 >= KW_CACHE && LA179_6 <= KW_CASCADE)||LA179_6==KW_CHANGE||(LA179_6 >= KW_CLUSTER && LA179_6 <= KW_COLLECTION)||(LA179_6 >= KW_COLUMNS && LA179_6 <= KW_COMMENT)||(LA179_6 >= KW_COMPACT && LA179_6 <= KW_CONCATENATE)||LA179_6==KW_CONTINUE||LA179_6==KW_DATA||LA179_6==KW_DATABASES||(LA179_6 >= KW_DATETIME && LA179_6 <= KW_DBPROPERTIES)||(LA179_6 >= KW_DEFERRED && LA179_6 <= KW_DEFINED)||(LA179_6 >= KW_DELIMITED && LA179_6 <= KW_DESC)||(LA179_6 >= KW_DETAIL && LA179_6 <= KW_DISABLE)||LA179_6==KW_DISTRIBUTE||LA179_6==KW_DOW||(LA179_6 >= KW_DUMP && LA179_6 <= KW_ELEM_TYPE)||LA179_6==KW_ENABLE||LA179_6==KW_ESCAPED||LA179_6==KW_EXCLUSIVE||(LA179_6 >= KW_EXPLAIN && LA179_6 <= KW_EXPRESSION)||(LA179_6 >= KW_FIELDS && LA179_6 <= KW_FIRST)||(LA179_6 >= KW_FORMAT && LA179_6 <= KW_FORMATTED)||LA179_6==KW_FUNCTIONS||(LA179_6 >= KW_HOUR && LA179_6 <= KW_IDXPROPERTIES)||(LA179_6 >= KW_INDEX && LA179_6 <= KW_INDEXES)||(LA179_6 >= KW_INPATH && LA179_6 <= KW_INPUTFORMAT)||(LA179_6 >= KW_ISOLATION && LA179_6 <= KW_JAR)||(LA179_6 >= KW_KEY && LA179_6 <= KW_LAST)||LA179_6==KW_LEVEL||(LA179_6 >= KW_LIMIT && LA179_6 <= KW_LOAD)||(LA179_6 >= KW_LOCATION && LA179_6 <= KW_LONG)||(LA179_6 >= KW_MAPJOIN && LA179_6 <= KW_MATERIALIZED)||LA179_6==KW_METADATA||(LA179_6 >= KW_MINUTE && LA179_6 <= KW_MONTH)||LA179_6==KW_MSCK||(LA179_6 >= KW_NORELY && LA179_6 <= KW_NOSCAN)||LA179_6==KW_NOVALIDATE||LA179_6==KW_NULLS||LA179_6==KW_OFFSET||(LA179_6 >= KW_OPERATOR && LA179_6 <= KW_OPTION)||(LA179_6 >= KW_OUTPUTDRIVER && LA179_6 <= KW_OUTPUTFORMAT)||(LA179_6 >= KW_OVERWRITE && LA179_6 <= KW_OWNER)||(LA179_6 >= KW_PARTITIONED && LA179_6 <= KW_PARTITIONS)||LA179_6==KW_PLUS||LA179_6==KW_PRETTY||LA179_6==KW_PRINCIPALS||(LA179_6 >= KW_PURGE && LA179_6 <= KW_QUARTER)||LA179_6==KW_READ||(LA179_6 >= KW_REBUILD && LA179_6 <= KW_RECORDWRITER)||(LA179_6 >= KW_RELOAD && LA179_6 <= KW_RESTRICT)||LA179_6==KW_REWRITE||(LA179_6 >= KW_ROLE && LA179_6 <= KW_ROLES)||(LA179_6 >= KW_SCHEMA && LA179_6 <= KW_SECOND)||(LA179_6 >= KW_SEMI && LA179_6 <= KW_SERVER)||(LA179_6 >= KW_SETS && LA179_6 <= KW_SKEWED)||(LA179_6 >= KW_SNAPSHOT && LA179_6 <= KW_SSL)||(LA179_6 >= KW_STATISTICS && LA179_6 <= KW_SUMMARY)||LA179_6==KW_TABLES||(LA179_6 >= KW_TBLPROPERTIES && LA179_6 <= KW_TERMINATED)||LA179_6==KW_TINYINT||(LA179_6 >= KW_TOUCH && LA179_6 <= KW_TRANSACTIONS)||LA179_6==KW_UNARCHIVE||LA179_6==KW_UNDO||LA179_6==KW_UNIONTYPE||(LA179_6 >= KW_UNLOCK && LA179_6 <= KW_UNSIGNED)||(LA179_6 >= KW_URI && LA179_6 <= KW_USE)||(LA179_6 >= KW_UTC && LA179_6 <= KW_VALIDATE)||LA179_6==KW_VALUE_TYPE||(LA179_6 >= KW_VECTORIZATION && LA179_6 <= KW_WEEK)||LA179_6==KW_WHILE||(LA179_6 >= KW_WORK && LA179_6 <= KW_YEAR)||LA179_6==KW_BATCH||LA179_6==KW_DAYOFWEEK||LA179_6==KW_HOLD_DDLTIME||LA179_6==KW_IGNORE||LA179_6==KW_NO_DROP||LA179_6==KW_OFFLINE||LA179_6==KW_PROTECTION||LA179_6==KW_READONLY) ) {
					alt179=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 179, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 179, 0, input);
				throw nvae;
			}
			switch (alt179) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1719:7: ( KW_DATABASE | KW_SCHEMA ) identifier
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1719:7: ( KW_DATABASE | KW_SCHEMA )
					int alt176=2;
					int LA176_0 = input.LA(1);
					if ( (LA176_0==KW_DATABASE) ) {
						alt176=1;
					}
					else if ( (LA176_0==KW_SCHEMA) ) {
						alt176=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 176, 0, input);
						throw nvae;
					}

					switch (alt176) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1719:8: KW_DATABASE
							{
							KW_DATABASE582=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privObject9517); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE582);

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1719:20: KW_SCHEMA
							{
							KW_SCHEMA583=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_privObject9519); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA583);

							}
							break;

					}

					pushFollow(FOLLOW_identifier_in_privObject9522);
					identifier584=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier584.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1719:42: -> ^( TOK_DB_TYPE identifier )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1719:45: ^( TOK_DB_TYPE identifier )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DB_TYPE, "TOK_DB_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1720:7: ( KW_TABLE )? tableName ( partitionSpec )?
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1720:7: ( KW_TABLE )?
					int alt177=2;
					int LA177_0 = input.LA(1);
					if ( (LA177_0==KW_TABLE) ) {
						alt177=1;
					}
					switch (alt177) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1720:7: KW_TABLE
							{
							KW_TABLE585=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privObject9538); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE585);

							}
							break;

					}

					pushFollow(FOLLOW_tableName_in_privObject9541);
					tableName586=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName586.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1720:27: ( partitionSpec )?
					int alt178=2;
					int LA178_0 = input.LA(1);
					if ( (LA178_0==KW_PARTITION) ) {
						alt178=1;
					}
					switch (alt178) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1720:27: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_privObject9543);
							partitionSpec587=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec587.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: partitionSpec, tableName
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1720:42: -> ^( TOK_TABLE_TYPE tableName ( partitionSpec )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1720:45: ^( TOK_TABLE_TYPE tableName ( partitionSpec )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1720:72: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1721:7: KW_URI (path= StringLiteral )
					{
					KW_URI588=(Token)match(input,KW_URI,FOLLOW_KW_URI_in_privObject9563); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_URI.add(KW_URI588);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1721:14: (path= StringLiteral )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1721:15: path= StringLiteral
					{
					path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_privObject9568); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(path);

					}

					// AST REWRITE
					// elements: path
					// token labels: path
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1721:35: -> ^( TOK_URI_TYPE $path)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1721:39: ^( TOK_URI_TYPE $path)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_URI_TYPE, "TOK_URI_TYPE"), root_1);
						adaptor.addChild(root_1, stream_path.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1722:7: KW_SERVER identifier
					{
					KW_SERVER589=(Token)match(input,KW_SERVER,FOLLOW_KW_SERVER_in_privObject9587); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERVER.add(KW_SERVER589);

					pushFollow(FOLLOW_identifier_in_privObject9589);
					identifier590=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier590.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1722:28: -> ^( TOK_SERVER_TYPE identifier )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1722:31: ^( TOK_SERVER_TYPE identifier )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SERVER_TYPE, "TOK_SERVER_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privObject"


	public static class privObjectCols_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "privObjectCols"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1725:1: privObjectCols : ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) );
	public final HiveASTParser.privObjectCols_return privObjectCols() throws RecognitionException {
		HiveASTParser.privObjectCols_return retval = new HiveASTParser.privObjectCols_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token path=null;
		Token KW_DATABASE591=null;
		Token KW_SCHEMA592=null;
		Token KW_TABLE594=null;
		Token LPAREN596=null;
		Token RPAREN597=null;
		Token KW_URI599=null;
		Token KW_SERVER600=null;
		ParserRuleReturnScope cols =null;
		ParserRuleReturnScope identifier593 =null;
		ParserRuleReturnScope tableName595 =null;
		ParserRuleReturnScope partitionSpec598 =null;
		ParserRuleReturnScope identifier601 =null;

		HiveParserASTNode path_tree=null;
		HiveParserASTNode KW_DATABASE591_tree=null;
		HiveParserASTNode KW_SCHEMA592_tree=null;
		HiveParserASTNode KW_TABLE594_tree=null;
		HiveParserASTNode LPAREN596_tree=null;
		HiveParserASTNode RPAREN597_tree=null;
		HiveParserASTNode KW_URI599_tree=null;
		HiveParserASTNode KW_SERVER600_tree=null;
		RewriteRuleTokenStream stream_KW_SERVER=new RewriteRuleTokenStream(adaptor,"token KW_SERVER");
		RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
		RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_URI=new RewriteRuleTokenStream(adaptor,"token KW_URI");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1726:5: ( ( KW_DATABASE | KW_SCHEMA ) identifier -> ^( TOK_DB_TYPE identifier ) | ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? ) | KW_URI (path= StringLiteral ) -> ^( TOK_URI_TYPE $path) | KW_SERVER identifier -> ^( TOK_SERVER_TYPE identifier ) )
			int alt184=4;
			switch ( input.LA(1) ) {
			case KW_DATABASE:
				{
				alt184=1;
				}
				break;
			case KW_SCHEMA:
				{
				int LA184_2 = input.LA(2);
				if ( (LA184_2==Identifier||(LA184_2 >= KW_ABORT && LA184_2 <= KW_AFTER)||LA184_2==KW_ANALYZE||LA184_2==KW_ARCHIVE||LA184_2==KW_ASC||(LA184_2 >= KW_AUTOCOMMIT && LA184_2 <= KW_BEFORE)||(LA184_2 >= KW_BUCKET && LA184_2 <= KW_BUCKETS)||(LA184_2 >= KW_CACHE && LA184_2 <= KW_CASCADE)||LA184_2==KW_CHANGE||(LA184_2 >= KW_CLUSTER && LA184_2 <= KW_COLLECTION)||(LA184_2 >= KW_COLUMNS && LA184_2 <= KW_COMMENT)||(LA184_2 >= KW_COMPACT && LA184_2 <= KW_CONCATENATE)||LA184_2==KW_CONTINUE||LA184_2==KW_DATA||LA184_2==KW_DATABASES||(LA184_2 >= KW_DATETIME && LA184_2 <= KW_DBPROPERTIES)||(LA184_2 >= KW_DEFERRED && LA184_2 <= KW_DEFINED)||(LA184_2 >= KW_DELIMITED && LA184_2 <= KW_DESC)||(LA184_2 >= KW_DETAIL && LA184_2 <= KW_DISABLE)||LA184_2==KW_DISTRIBUTE||LA184_2==KW_DOW||(LA184_2 >= KW_DUMP && LA184_2 <= KW_ELEM_TYPE)||LA184_2==KW_ENABLE||LA184_2==KW_ESCAPED||LA184_2==KW_EXCLUSIVE||(LA184_2 >= KW_EXPLAIN && LA184_2 <= KW_EXPRESSION)||(LA184_2 >= KW_FIELDS && LA184_2 <= KW_FIRST)||(LA184_2 >= KW_FORMAT && LA184_2 <= KW_FORMATTED)||LA184_2==KW_FUNCTIONS||(LA184_2 >= KW_HOUR && LA184_2 <= KW_IDXPROPERTIES)||(LA184_2 >= KW_INDEX && LA184_2 <= KW_INDEXES)||(LA184_2 >= KW_INPATH && LA184_2 <= KW_INPUTFORMAT)||(LA184_2 >= KW_ISOLATION && LA184_2 <= KW_JAR)||(LA184_2 >= KW_KEY && LA184_2 <= KW_LAST)||LA184_2==KW_LEVEL||(LA184_2 >= KW_LIMIT && LA184_2 <= KW_LOAD)||(LA184_2 >= KW_LOCATION && LA184_2 <= KW_LONG)||(LA184_2 >= KW_MAPJOIN && LA184_2 <= KW_MATERIALIZED)||LA184_2==KW_METADATA||(LA184_2 >= KW_MINUTE && LA184_2 <= KW_MONTH)||LA184_2==KW_MSCK||(LA184_2 >= KW_NORELY && LA184_2 <= KW_NOSCAN)||LA184_2==KW_NOVALIDATE||LA184_2==KW_NULLS||LA184_2==KW_OFFSET||(LA184_2 >= KW_OPERATOR && LA184_2 <= KW_OPTION)||(LA184_2 >= KW_OUTPUTDRIVER && LA184_2 <= KW_OUTPUTFORMAT)||(LA184_2 >= KW_OVERWRITE && LA184_2 <= KW_OWNER)||(LA184_2 >= KW_PARTITIONED && LA184_2 <= KW_PARTITIONS)||LA184_2==KW_PLUS||LA184_2==KW_PRETTY||LA184_2==KW_PRINCIPALS||(LA184_2 >= KW_PURGE && LA184_2 <= KW_QUARTER)||LA184_2==KW_READ||(LA184_2 >= KW_REBUILD && LA184_2 <= KW_RECORDWRITER)||(LA184_2 >= KW_RELOAD && LA184_2 <= KW_RESTRICT)||LA184_2==KW_REWRITE||(LA184_2 >= KW_ROLE && LA184_2 <= KW_ROLES)||(LA184_2 >= KW_SCHEMA && LA184_2 <= KW_SECOND)||(LA184_2 >= KW_SEMI && LA184_2 <= KW_SERVER)||(LA184_2 >= KW_SETS && LA184_2 <= KW_SKEWED)||(LA184_2 >= KW_SNAPSHOT && LA184_2 <= KW_SSL)||(LA184_2 >= KW_STATISTICS && LA184_2 <= KW_SUMMARY)||LA184_2==KW_TABLES||(LA184_2 >= KW_TBLPROPERTIES && LA184_2 <= KW_TERMINATED)||LA184_2==KW_TINYINT||(LA184_2 >= KW_TOUCH && LA184_2 <= KW_TRANSACTIONS)||LA184_2==KW_UNARCHIVE||LA184_2==KW_UNDO||LA184_2==KW_UNIONTYPE||(LA184_2 >= KW_UNLOCK && LA184_2 <= KW_UNSIGNED)||(LA184_2 >= KW_URI && LA184_2 <= KW_USE)||(LA184_2 >= KW_UTC && LA184_2 <= KW_VALIDATE)||LA184_2==KW_VALUE_TYPE||(LA184_2 >= KW_VECTORIZATION && LA184_2 <= KW_WEEK)||LA184_2==KW_WHILE||(LA184_2 >= KW_WORK && LA184_2 <= KW_YEAR)||LA184_2==KW_BATCH||LA184_2==KW_DAYOFWEEK||LA184_2==KW_HOLD_DDLTIME||LA184_2==KW_IGNORE||LA184_2==KW_NO_DROP||LA184_2==KW_OFFLINE||LA184_2==KW_PROTECTION||LA184_2==KW_READONLY) ) {
					alt184=1;
				}
				else if ( (LA184_2==EOF||LA184_2==DOT||LA184_2==KW_PARTITION||LA184_2==LPAREN) ) {
					alt184=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 184, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case Identifier:
			case KW_ABORT:
			case KW_ADD:
			case KW_ADMIN:
			case KW_AFTER:
			case KW_ANALYZE:
			case KW_ARCHIVE:
			case KW_ASC:
			case KW_AUTOCOMMIT:
			case KW_BEFORE:
			case KW_BUCKET:
			case KW_BUCKETS:
			case KW_CACHE:
			case KW_CASCADE:
			case KW_CHANGE:
			case KW_CLUSTER:
			case KW_CLUSTERED:
			case KW_CLUSTERSTATUS:
			case KW_COLLECTION:
			case KW_COLUMNS:
			case KW_COMMENT:
			case KW_COMPACT:
			case KW_COMPACTIONS:
			case KW_COMPUTE:
			case KW_CONCATENATE:
			case KW_CONTINUE:
			case KW_DATA:
			case KW_DATABASES:
			case KW_DATETIME:
			case KW_DAY:
			case KW_DBPROPERTIES:
			case KW_DEFERRED:
			case KW_DEFINED:
			case KW_DELIMITED:
			case KW_DEPENDENCY:
			case KW_DESC:
			case KW_DETAIL:
			case KW_DIRECTORIES:
			case KW_DIRECTORY:
			case KW_DISABLE:
			case KW_DISTRIBUTE:
			case KW_DOW:
			case KW_DUMP:
			case KW_ELEM_TYPE:
			case KW_ENABLE:
			case KW_ESCAPED:
			case KW_EXCLUSIVE:
			case KW_EXPLAIN:
			case KW_EXPORT:
			case KW_EXPRESSION:
			case KW_FIELDS:
			case KW_FILE:
			case KW_FILEFORMAT:
			case KW_FIRST:
			case KW_FORMAT:
			case KW_FORMATTED:
			case KW_FUNCTIONS:
			case KW_HOUR:
			case KW_IDXPROPERTIES:
			case KW_INDEX:
			case KW_INDEXES:
			case KW_INPATH:
			case KW_INPUTDRIVER:
			case KW_INPUTFORMAT:
			case KW_ISOLATION:
			case KW_ITEMS:
			case KW_JAR:
			case KW_KEY:
			case KW_KEYS:
			case KW_KEY_TYPE:
			case KW_LAST:
			case KW_LEVEL:
			case KW_LIMIT:
			case KW_LINES:
			case KW_LOAD:
			case KW_LOCATION:
			case KW_LOCK:
			case KW_LOCKS:
			case KW_LOGICAL:
			case KW_LONG:
			case KW_MAPJOIN:
			case KW_MATCHED:
			case KW_MATERIALIZED:
			case KW_METADATA:
			case KW_MINUTE:
			case KW_MONTH:
			case KW_MSCK:
			case KW_NORELY:
			case KW_NOSCAN:
			case KW_NOVALIDATE:
			case KW_NULLS:
			case KW_OFFSET:
			case KW_OPERATOR:
			case KW_OPTION:
			case KW_OUTPUTDRIVER:
			case KW_OUTPUTFORMAT:
			case KW_OVERWRITE:
			case KW_OWNER:
			case KW_PARTITIONED:
			case KW_PARTITIONS:
			case KW_PLUS:
			case KW_PRETTY:
			case KW_PRINCIPALS:
			case KW_PURGE:
			case KW_QUARTER:
			case KW_READ:
			case KW_REBUILD:
			case KW_RECORDREADER:
			case KW_RECORDWRITER:
			case KW_RELOAD:
			case KW_RELY:
			case KW_RENAME:
			case KW_REPAIR:
			case KW_REPL:
			case KW_REPLACE:
			case KW_REPLICATION:
			case KW_RESTRICT:
			case KW_REWRITE:
			case KW_ROLE:
			case KW_ROLES:
			case KW_SCHEMAS:
			case KW_SECOND:
			case KW_SEMI:
			case KW_SERDE:
			case KW_SERDEPROPERTIES:
			case KW_SETS:
			case KW_SHARED:
			case KW_SHOW:
			case KW_SHOW_DATABASE:
			case KW_SKEWED:
			case KW_SNAPSHOT:
			case KW_SORT:
			case KW_SORTED:
			case KW_SSL:
			case KW_STATISTICS:
			case KW_STATUS:
			case KW_STORED:
			case KW_STREAMTABLE:
			case KW_STRING:
			case KW_STRUCT:
			case KW_SUMMARY:
			case KW_TABLE:
			case KW_TABLES:
			case KW_TBLPROPERTIES:
			case KW_TEMPORARY:
			case KW_TERMINATED:
			case KW_TINYINT:
			case KW_TOUCH:
			case KW_TRANSACTION:
			case KW_TRANSACTIONS:
			case KW_UNARCHIVE:
			case KW_UNDO:
			case KW_UNIONTYPE:
			case KW_UNLOCK:
			case KW_UNSET:
			case KW_UNSIGNED:
			case KW_USE:
			case KW_UTC:
			case KW_UTCTIMESTAMP:
			case KW_VALIDATE:
			case KW_VALUE_TYPE:
			case KW_VECTORIZATION:
			case KW_VIEW:
			case KW_VIEWS:
			case KW_WAIT:
			case KW_WEEK:
			case KW_WHILE:
			case KW_WORK:
			case KW_WRITE:
			case KW_YEAR:
			case KW_BATCH:
			case KW_DAYOFWEEK:
			case KW_HOLD_DDLTIME:
			case KW_IGNORE:
			case KW_NO_DROP:
			case KW_OFFLINE:
			case KW_PROTECTION:
			case KW_READONLY:
				{
				alt184=2;
				}
				break;
			case KW_URI:
				{
				int LA184_5 = input.LA(2);
				if ( (LA184_5==EOF||LA184_5==DOT||LA184_5==KW_PARTITION||LA184_5==LPAREN) ) {
					alt184=2;
				}
				else if ( (LA184_5==StringLiteral) ) {
					alt184=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 184, 5, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_SERVER:
				{
				int LA184_6 = input.LA(2);
				if ( (LA184_6==EOF||LA184_6==DOT||LA184_6==KW_PARTITION||LA184_6==LPAREN) ) {
					alt184=2;
				}
				else if ( (LA184_6==Identifier||(LA184_6 >= KW_ABORT && LA184_6 <= KW_AFTER)||LA184_6==KW_ANALYZE||LA184_6==KW_ARCHIVE||LA184_6==KW_ASC||(LA184_6 >= KW_AUTOCOMMIT && LA184_6 <= KW_BEFORE)||(LA184_6 >= KW_BUCKET && LA184_6 <= KW_BUCKETS)||(LA184_6 >= KW_CACHE && LA184_6 <= KW_CASCADE)||LA184_6==KW_CHANGE||(LA184_6 >= KW_CLUSTER && LA184_6 <= KW_COLLECTION)||(LA184_6 >= KW_COLUMNS && LA184_6 <= KW_COMMENT)||(LA184_6 >= KW_COMPACT && LA184_6 <= KW_CONCATENATE)||LA184_6==KW_CONTINUE||LA184_6==KW_DATA||LA184_6==KW_DATABASES||(LA184_6 >= KW_DATETIME && LA184_6 <= KW_DBPROPERTIES)||(LA184_6 >= KW_DEFERRED && LA184_6 <= KW_DEFINED)||(LA184_6 >= KW_DELIMITED && LA184_6 <= KW_DESC)||(LA184_6 >= KW_DETAIL && LA184_6 <= KW_DISABLE)||LA184_6==KW_DISTRIBUTE||LA184_6==KW_DOW||(LA184_6 >= KW_DUMP && LA184_6 <= KW_ELEM_TYPE)||LA184_6==KW_ENABLE||LA184_6==KW_ESCAPED||LA184_6==KW_EXCLUSIVE||(LA184_6 >= KW_EXPLAIN && LA184_6 <= KW_EXPRESSION)||(LA184_6 >= KW_FIELDS && LA184_6 <= KW_FIRST)||(LA184_6 >= KW_FORMAT && LA184_6 <= KW_FORMATTED)||LA184_6==KW_FUNCTIONS||(LA184_6 >= KW_HOUR && LA184_6 <= KW_IDXPROPERTIES)||(LA184_6 >= KW_INDEX && LA184_6 <= KW_INDEXES)||(LA184_6 >= KW_INPATH && LA184_6 <= KW_INPUTFORMAT)||(LA184_6 >= KW_ISOLATION && LA184_6 <= KW_JAR)||(LA184_6 >= KW_KEY && LA184_6 <= KW_LAST)||LA184_6==KW_LEVEL||(LA184_6 >= KW_LIMIT && LA184_6 <= KW_LOAD)||(LA184_6 >= KW_LOCATION && LA184_6 <= KW_LONG)||(LA184_6 >= KW_MAPJOIN && LA184_6 <= KW_MATERIALIZED)||LA184_6==KW_METADATA||(LA184_6 >= KW_MINUTE && LA184_6 <= KW_MONTH)||LA184_6==KW_MSCK||(LA184_6 >= KW_NORELY && LA184_6 <= KW_NOSCAN)||LA184_6==KW_NOVALIDATE||LA184_6==KW_NULLS||LA184_6==KW_OFFSET||(LA184_6 >= KW_OPERATOR && LA184_6 <= KW_OPTION)||(LA184_6 >= KW_OUTPUTDRIVER && LA184_6 <= KW_OUTPUTFORMAT)||(LA184_6 >= KW_OVERWRITE && LA184_6 <= KW_OWNER)||(LA184_6 >= KW_PARTITIONED && LA184_6 <= KW_PARTITIONS)||LA184_6==KW_PLUS||LA184_6==KW_PRETTY||LA184_6==KW_PRINCIPALS||(LA184_6 >= KW_PURGE && LA184_6 <= KW_QUARTER)||LA184_6==KW_READ||(LA184_6 >= KW_REBUILD && LA184_6 <= KW_RECORDWRITER)||(LA184_6 >= KW_RELOAD && LA184_6 <= KW_RESTRICT)||LA184_6==KW_REWRITE||(LA184_6 >= KW_ROLE && LA184_6 <= KW_ROLES)||(LA184_6 >= KW_SCHEMA && LA184_6 <= KW_SECOND)||(LA184_6 >= KW_SEMI && LA184_6 <= KW_SERVER)||(LA184_6 >= KW_SETS && LA184_6 <= KW_SKEWED)||(LA184_6 >= KW_SNAPSHOT && LA184_6 <= KW_SSL)||(LA184_6 >= KW_STATISTICS && LA184_6 <= KW_SUMMARY)||LA184_6==KW_TABLES||(LA184_6 >= KW_TBLPROPERTIES && LA184_6 <= KW_TERMINATED)||LA184_6==KW_TINYINT||(LA184_6 >= KW_TOUCH && LA184_6 <= KW_TRANSACTIONS)||LA184_6==KW_UNARCHIVE||LA184_6==KW_UNDO||LA184_6==KW_UNIONTYPE||(LA184_6 >= KW_UNLOCK && LA184_6 <= KW_UNSIGNED)||(LA184_6 >= KW_URI && LA184_6 <= KW_USE)||(LA184_6 >= KW_UTC && LA184_6 <= KW_VALIDATE)||LA184_6==KW_VALUE_TYPE||(LA184_6 >= KW_VECTORIZATION && LA184_6 <= KW_WEEK)||LA184_6==KW_WHILE||(LA184_6 >= KW_WORK && LA184_6 <= KW_YEAR)||LA184_6==KW_BATCH||LA184_6==KW_DAYOFWEEK||LA184_6==KW_HOLD_DDLTIME||LA184_6==KW_IGNORE||LA184_6==KW_NO_DROP||LA184_6==KW_OFFLINE||LA184_6==KW_PROTECTION||LA184_6==KW_READONLY) ) {
					alt184=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 184, 6, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 184, 0, input);
				throw nvae;
			}
			switch (alt184) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1726:7: ( KW_DATABASE | KW_SCHEMA ) identifier
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1726:7: ( KW_DATABASE | KW_SCHEMA )
					int alt180=2;
					int LA180_0 = input.LA(1);
					if ( (LA180_0==KW_DATABASE) ) {
						alt180=1;
					}
					else if ( (LA180_0==KW_SCHEMA) ) {
						alt180=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 180, 0, input);
						throw nvae;
					}

					switch (alt180) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1726:8: KW_DATABASE
							{
							KW_DATABASE591=(Token)match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privObjectCols9615); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DATABASE.add(KW_DATABASE591);

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1726:20: KW_SCHEMA
							{
							KW_SCHEMA592=(Token)match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_privObjectCols9617); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SCHEMA.add(KW_SCHEMA592);

							}
							break;

					}

					pushFollow(FOLLOW_identifier_in_privObjectCols9620);
					identifier593=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier593.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1726:42: -> ^( TOK_DB_TYPE identifier )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1726:45: ^( TOK_DB_TYPE identifier )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DB_TYPE, "TOK_DB_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1727:7: ( KW_TABLE )? tableName ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )?
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1727:7: ( KW_TABLE )?
					int alt181=2;
					int LA181_0 = input.LA(1);
					if ( (LA181_0==KW_TABLE) ) {
						alt181=1;
					}
					switch (alt181) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1727:7: KW_TABLE
							{
							KW_TABLE594=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privObjectCols9636); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE594);

							}
							break;

					}

					pushFollow(FOLLOW_tableName_in_privObjectCols9639);
					tableName595=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName595.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1727:27: ( LPAREN cols= columnNameList RPAREN )?
					int alt182=2;
					int LA182_0 = input.LA(1);
					if ( (LA182_0==LPAREN) ) {
						alt182=1;
					}
					switch (alt182) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1727:28: LPAREN cols= columnNameList RPAREN
							{
							LPAREN596=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privObjectCols9642); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN596);

							pushFollow(FOLLOW_columnNameList_in_privObjectCols9646);
							cols=columnNameList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnNameList.add(cols.getTree());
							RPAREN597=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privObjectCols9648); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN597);

							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1727:64: ( partitionSpec )?
					int alt183=2;
					int LA183_0 = input.LA(1);
					if ( (LA183_0==KW_PARTITION) ) {
						alt183=1;
					}
					switch (alt183) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1727:64: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_privObjectCols9652);
							partitionSpec598=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec598.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: tableName, cols, partitionSpec
					// token labels: 
					// rule labels: cols, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1727:79: -> ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1727:82: ^( TOK_TABLE_TYPE tableName ( $cols)? ( partitionSpec )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLE_TYPE, "TOK_TABLE_TYPE"), root_1);
						adaptor.addChild(root_1, stream_tableName.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1727:110: ( $cols)?
						if ( stream_cols.hasNext() ) {
							adaptor.addChild(root_1, stream_cols.nextTree());
						}
						stream_cols.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1727:116: ( partitionSpec )?
						if ( stream_partitionSpec.hasNext() ) {
							adaptor.addChild(root_1, stream_partitionSpec.nextTree());
						}
						stream_partitionSpec.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1728:7: KW_URI (path= StringLiteral )
					{
					KW_URI599=(Token)match(input,KW_URI,FOLLOW_KW_URI_in_privObjectCols9676); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_URI.add(KW_URI599);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1728:14: (path= StringLiteral )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1728:15: path= StringLiteral
					{
					path=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_privObjectCols9681); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(path);

					}

					// AST REWRITE
					// elements: path
					// token labels: path
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1728:35: -> ^( TOK_URI_TYPE $path)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1728:39: ^( TOK_URI_TYPE $path)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_URI_TYPE, "TOK_URI_TYPE"), root_1);
						adaptor.addChild(root_1, stream_path.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1729:7: KW_SERVER identifier
					{
					KW_SERVER600=(Token)match(input,KW_SERVER,FOLLOW_KW_SERVER_in_privObjectCols9700); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERVER.add(KW_SERVER600);

					pushFollow(FOLLOW_identifier_in_privObjectCols9702);
					identifier601=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier601.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1729:28: -> ^( TOK_SERVER_TYPE identifier )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1729:31: ^( TOK_SERVER_TYPE identifier )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SERVER_TYPE, "TOK_SERVER_TYPE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privObjectCols"


	public static class privilegeList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "privilegeList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1732:1: privilegeList : privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) ;
	public final HiveASTParser.privilegeList_return privilegeList() throws RecognitionException {
		HiveASTParser.privilegeList_return retval = new HiveASTParser.privilegeList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA603=null;
		ParserRuleReturnScope privlegeDef602 =null;
		ParserRuleReturnScope privlegeDef604 =null;

		HiveParserASTNode COMMA603_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_privlegeDef=new RewriteRuleSubtreeStream(adaptor,"rule privlegeDef");

		pushMsg("grant privilege list", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1735:5: ( privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1735:7: privlegeDef ( COMMA privlegeDef )*
			{
			pushFollow(FOLLOW_privlegeDef_in_privilegeList9737);
			privlegeDef602=privlegeDef();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privlegeDef.add(privlegeDef602.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1735:19: ( COMMA privlegeDef )*
			loop185:
			while (true) {
				int alt185=2;
				int LA185_0 = input.LA(1);
				if ( (LA185_0==COMMA) ) {
					alt185=1;
				}

				switch (alt185) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1735:20: COMMA privlegeDef
					{
					COMMA603=(Token)match(input,COMMA,FOLLOW_COMMA_in_privilegeList9740); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA603);

					pushFollow(FOLLOW_privlegeDef_in_privilegeList9742);
					privlegeDef604=privlegeDef();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_privlegeDef.add(privlegeDef604.getTree());
					}
					break;

				default :
					break loop185;
				}
			}

			// AST REWRITE
			// elements: privlegeDef
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1736:5: -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1736:8: ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIVILEGE_LIST, "TOK_PRIVILEGE_LIST"), root_1);
				if ( !(stream_privlegeDef.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_privlegeDef.hasNext() ) {
					adaptor.addChild(root_1, stream_privlegeDef.nextTree());
				}
				stream_privlegeDef.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeList"


	public static class privlegeDef_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "privlegeDef"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1739:1: privlegeDef : privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) ;
	public final HiveASTParser.privlegeDef_return privlegeDef() throws RecognitionException {
		HiveASTParser.privlegeDef_return retval = new HiveASTParser.privlegeDef_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token LPAREN606=null;
		Token RPAREN607=null;
		ParserRuleReturnScope cols =null;
		ParserRuleReturnScope privilegeType605 =null;

		HiveParserASTNode LPAREN606_tree=null;
		HiveParserASTNode RPAREN607_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_privilegeType=new RewriteRuleSubtreeStream(adaptor,"rule privilegeType");

		pushMsg("grant privilege", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1742:5: ( privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1742:7: privilegeType ( LPAREN cols= columnNameList RPAREN )?
			{
			pushFollow(FOLLOW_privilegeType_in_privlegeDef9784);
			privilegeType605=privilegeType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_privilegeType.add(privilegeType605.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1742:21: ( LPAREN cols= columnNameList RPAREN )?
			int alt186=2;
			int LA186_0 = input.LA(1);
			if ( (LA186_0==LPAREN) ) {
				alt186=1;
			}
			switch (alt186) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1742:22: LPAREN cols= columnNameList RPAREN
					{
					LPAREN606=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_privlegeDef9787); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN606);

					pushFollow(FOLLOW_columnNameList_in_privlegeDef9791);
					cols=columnNameList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameList.add(cols.getTree());
					RPAREN607=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_privlegeDef9793); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN607);

					}
					break;

			}

			// AST REWRITE
			// elements: privilegeType, cols
			// token labels: 
			// rule labels: cols, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"rule cols",cols!=null?cols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1743:5: -> ^( TOK_PRIVILEGE privilegeType ( $cols)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1743:8: ^( TOK_PRIVILEGE privilegeType ( $cols)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIVILEGE, "TOK_PRIVILEGE"), root_1);
				adaptor.addChild(root_1, stream_privilegeType.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1743:39: ( $cols)?
				if ( stream_cols.hasNext() ) {
					adaptor.addChild(root_1, stream_cols.nextTree());
				}
				stream_cols.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privlegeDef"


	public static class privilegeType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "privilegeType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1746:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) );
	public final HiveASTParser.privilegeType_return privilegeType() throws RecognitionException {
		HiveASTParser.privilegeType_return retval = new HiveASTParser.privilegeType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ALL608=null;
		Token KW_ALTER609=null;
		Token KW_UPDATE610=null;
		Token KW_CREATE611=null;
		Token KW_DROP612=null;
		Token KW_INDEX613=null;
		Token KW_LOCK614=null;
		Token KW_SELECT615=null;
		Token KW_SHOW_DATABASE616=null;
		Token KW_INSERT617=null;
		Token KW_DELETE618=null;

		HiveParserASTNode KW_ALL608_tree=null;
		HiveParserASTNode KW_ALTER609_tree=null;
		HiveParserASTNode KW_UPDATE610_tree=null;
		HiveParserASTNode KW_CREATE611_tree=null;
		HiveParserASTNode KW_DROP612_tree=null;
		HiveParserASTNode KW_INDEX613_tree=null;
		HiveParserASTNode KW_LOCK614_tree=null;
		HiveParserASTNode KW_SELECT615_tree=null;
		HiveParserASTNode KW_SHOW_DATABASE616_tree=null;
		HiveParserASTNode KW_INSERT617_tree=null;
		HiveParserASTNode KW_DELETE618_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
		RewriteRuleTokenStream stream_KW_SHOW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_SHOW_DATABASE");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
		RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
		RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
		RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");

		pushMsg("privilege type", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1749:5: ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) | KW_INSERT -> ^( TOK_PRIV_INSERT ) | KW_DELETE -> ^( TOK_PRIV_DELETE ) )
			int alt187=11;
			switch ( input.LA(1) ) {
			case KW_ALL:
				{
				alt187=1;
				}
				break;
			case KW_ALTER:
				{
				alt187=2;
				}
				break;
			case KW_UPDATE:
				{
				alt187=3;
				}
				break;
			case KW_CREATE:
				{
				alt187=4;
				}
				break;
			case KW_DROP:
				{
				alt187=5;
				}
				break;
			case KW_INDEX:
				{
				alt187=6;
				}
				break;
			case KW_LOCK:
				{
				alt187=7;
				}
				break;
			case KW_SELECT:
				{
				alt187=8;
				}
				break;
			case KW_SHOW_DATABASE:
				{
				alt187=9;
				}
				break;
			case KW_INSERT:
				{
				alt187=10;
				}
				break;
			case KW_DELETE:
				{
				alt187=11;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 187, 0, input);
				throw nvae;
			}
			switch (alt187) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1749:7: KW_ALL
					{
					KW_ALL608=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeType9838); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL608);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1749:14: -> ^( TOK_PRIV_ALL )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1749:17: ^( TOK_PRIV_ALL )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_ALL, "TOK_PRIV_ALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1750:7: KW_ALTER
					{
					KW_ALTER609=(Token)match(input,KW_ALTER,FOLLOW_KW_ALTER_in_privilegeType9852); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALTER.add(KW_ALTER609);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1750:16: -> ^( TOK_PRIV_ALTER_METADATA )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1750:19: ^( TOK_PRIV_ALTER_METADATA )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_ALTER_METADATA, "TOK_PRIV_ALTER_METADATA"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1751:7: KW_UPDATE
					{
					KW_UPDATE610=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_privilegeType9866); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE610);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1751:17: -> ^( TOK_PRIV_ALTER_DATA )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1751:20: ^( TOK_PRIV_ALTER_DATA )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_ALTER_DATA, "TOK_PRIV_ALTER_DATA"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1752:7: KW_CREATE
					{
					KW_CREATE611=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType9880); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE611);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1752:17: -> ^( TOK_PRIV_CREATE )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1752:20: ^( TOK_PRIV_CREATE )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_CREATE, "TOK_PRIV_CREATE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1753:7: KW_DROP
					{
					KW_DROP612=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_privilegeType9894); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP612);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1753:15: -> ^( TOK_PRIV_DROP )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1753:18: ^( TOK_PRIV_DROP )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_DROP, "TOK_PRIV_DROP"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1754:7: KW_INDEX
					{
					KW_INDEX613=(Token)match(input,KW_INDEX,FOLLOW_KW_INDEX_in_privilegeType9908); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INDEX.add(KW_INDEX613);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1754:16: -> ^( TOK_PRIV_INDEX )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1754:19: ^( TOK_PRIV_INDEX )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_INDEX, "TOK_PRIV_INDEX"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1755:7: KW_LOCK
					{
					KW_LOCK614=(Token)match(input,KW_LOCK,FOLLOW_KW_LOCK_in_privilegeType9922); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LOCK.add(KW_LOCK614);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1755:15: -> ^( TOK_PRIV_LOCK )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1755:18: ^( TOK_PRIV_LOCK )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_LOCK, "TOK_PRIV_LOCK"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1756:7: KW_SELECT
					{
					KW_SELECT615=(Token)match(input,KW_SELECT,FOLLOW_KW_SELECT_in_privilegeType9936); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SELECT.add(KW_SELECT615);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1756:17: -> ^( TOK_PRIV_SELECT )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1756:20: ^( TOK_PRIV_SELECT )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_SELECT, "TOK_PRIV_SELECT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 9 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1757:7: KW_SHOW_DATABASE
					{
					KW_SHOW_DATABASE616=(Token)match(input,KW_SHOW_DATABASE,FOLLOW_KW_SHOW_DATABASE_in_privilegeType9950); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SHOW_DATABASE.add(KW_SHOW_DATABASE616);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1757:24: -> ^( TOK_PRIV_SHOW_DATABASE )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1757:27: ^( TOK_PRIV_SHOW_DATABASE )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_SHOW_DATABASE, "TOK_PRIV_SHOW_DATABASE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 10 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1758:7: KW_INSERT
					{
					KW_INSERT617=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_privilegeType9964); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT617);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1758:17: -> ^( TOK_PRIV_INSERT )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1758:20: ^( TOK_PRIV_INSERT )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_INSERT, "TOK_PRIV_INSERT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 11 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1759:7: KW_DELETE
					{
					KW_DELETE618=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_privilegeType9978); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE618);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1759:17: -> ^( TOK_PRIV_DELETE )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1759:20: ^( TOK_PRIV_DELETE )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRIV_DELETE, "TOK_PRIV_DELETE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "privilegeType"


	public static class principalSpecification_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "principalSpecification"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1762:1: principalSpecification : principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) ;
	public final HiveASTParser.principalSpecification_return principalSpecification() throws RecognitionException {
		HiveASTParser.principalSpecification_return retval = new HiveASTParser.principalSpecification_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA620=null;
		ParserRuleReturnScope principalName619 =null;
		ParserRuleReturnScope principalName621 =null;

		HiveParserASTNode COMMA620_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");

		 pushMsg("user/group/role name list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1765:5: ( principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1765:7: principalName ( COMMA principalName )*
			{
			pushFollow(FOLLOW_principalName_in_principalSpecification10011);
			principalName619=principalName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_principalName.add(principalName619.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1765:21: ( COMMA principalName )*
			loop188:
			while (true) {
				int alt188=2;
				int LA188_0 = input.LA(1);
				if ( (LA188_0==COMMA) ) {
					alt188=1;
				}

				switch (alt188) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1765:22: COMMA principalName
					{
					COMMA620=(Token)match(input,COMMA,FOLLOW_COMMA_in_principalSpecification10014); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA620);

					pushFollow(FOLLOW_principalName_in_principalSpecification10016);
					principalName621=principalName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalName.add(principalName621.getTree());
					}
					break;

				default :
					break loop188;
				}
			}

			// AST REWRITE
			// elements: principalName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1765:44: -> ^( TOK_PRINCIPAL_NAME ( principalName )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1765:47: ^( TOK_PRINCIPAL_NAME ( principalName )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_PRINCIPAL_NAME, "TOK_PRINCIPAL_NAME"), root_1);
				if ( !(stream_principalName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_principalName.hasNext() ) {
					adaptor.addChild(root_1, stream_principalName.nextTree());
				}
				stream_principalName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "principalSpecification"


	public static class principalName_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "principalName"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1768:1: principalName : ( KW_USER principalIdentifier -> ^( TOK_USER principalIdentifier ) | KW_GROUP principalIdentifier -> ^( TOK_GROUP principalIdentifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) );
	public final HiveASTParser.principalName_return principalName() throws RecognitionException {
		HiveASTParser.principalName_return retval = new HiveASTParser.principalName_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_USER622=null;
		Token KW_GROUP624=null;
		Token KW_ROLE626=null;
		ParserRuleReturnScope principalIdentifier623 =null;
		ParserRuleReturnScope principalIdentifier625 =null;
		ParserRuleReturnScope identifier627 =null;

		HiveParserASTNode KW_USER622_tree=null;
		HiveParserASTNode KW_GROUP624_tree=null;
		HiveParserASTNode KW_ROLE626_tree=null;
		RewriteRuleTokenStream stream_KW_ROLE=new RewriteRuleTokenStream(adaptor,"token KW_ROLE");
		RewriteRuleTokenStream stream_KW_USER=new RewriteRuleTokenStream(adaptor,"token KW_USER");
		RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_principalIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule principalIdentifier");

		pushMsg("user|group|role name", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1771:5: ( KW_USER principalIdentifier -> ^( TOK_USER principalIdentifier ) | KW_GROUP principalIdentifier -> ^( TOK_GROUP principalIdentifier ) | KW_ROLE identifier -> ^( TOK_ROLE identifier ) )
			int alt189=3;
			switch ( input.LA(1) ) {
			case KW_USER:
				{
				alt189=1;
				}
				break;
			case KW_GROUP:
				{
				alt189=2;
				}
				break;
			case KW_ROLE:
				{
				alt189=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 189, 0, input);
				throw nvae;
			}
			switch (alt189) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1771:7: KW_USER principalIdentifier
					{
					KW_USER622=(Token)match(input,KW_USER,FOLLOW_KW_USER_in_principalName10054); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_USER.add(KW_USER622);

					pushFollow(FOLLOW_principalIdentifier_in_principalName10056);
					principalIdentifier623=principalIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalIdentifier.add(principalIdentifier623.getTree());
					// AST REWRITE
					// elements: principalIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1771:35: -> ^( TOK_USER principalIdentifier )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1771:38: ^( TOK_USER principalIdentifier )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_USER, "TOK_USER"), root_1);
						adaptor.addChild(root_1, stream_principalIdentifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1772:7: KW_GROUP principalIdentifier
					{
					KW_GROUP624=(Token)match(input,KW_GROUP,FOLLOW_KW_GROUP_in_principalName10072); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_GROUP.add(KW_GROUP624);

					pushFollow(FOLLOW_principalIdentifier_in_principalName10074);
					principalIdentifier625=principalIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_principalIdentifier.add(principalIdentifier625.getTree());
					// AST REWRITE
					// elements: principalIdentifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1772:36: -> ^( TOK_GROUP principalIdentifier )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1772:39: ^( TOK_GROUP principalIdentifier )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_GROUP, "TOK_GROUP"), root_1);
						adaptor.addChild(root_1, stream_principalIdentifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1773:7: KW_ROLE identifier
					{
					KW_ROLE626=(Token)match(input,KW_ROLE,FOLLOW_KW_ROLE_in_principalName10090); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ROLE.add(KW_ROLE626);

					pushFollow(FOLLOW_identifier_in_principalName10092);
					identifier627=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier627.getTree());
					// AST REWRITE
					// elements: identifier
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1773:26: -> ^( TOK_ROLE identifier )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1773:29: ^( TOK_ROLE identifier )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ROLE, "TOK_ROLE"), root_1);
						adaptor.addChild(root_1, stream_identifier.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "principalName"


	public static class withGrantOption_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "withGrantOption"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1776:1: withGrantOption : KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) ;
	public final HiveASTParser.withGrantOption_return withGrantOption() throws RecognitionException {
		HiveASTParser.withGrantOption_return retval = new HiveASTParser.withGrantOption_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_WITH628=null;
		Token KW_GRANT629=null;
		Token KW_OPTION630=null;

		HiveParserASTNode KW_WITH628_tree=null;
		HiveParserASTNode KW_GRANT629_tree=null;
		HiveParserASTNode KW_OPTION630_tree=null;
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");

		pushMsg("with grant option", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1779:5: ( KW_WITH KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1779:7: KW_WITH KW_GRANT KW_OPTION
			{
			KW_WITH628=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withGrantOption10127); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH628);

			KW_GRANT629=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_withGrantOption10129); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT629);

			KW_OPTION630=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withGrantOption10131); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION630);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1780:5: -> ^( TOK_GRANT_WITH_OPTION )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1780:8: ^( TOK_GRANT_WITH_OPTION )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_GRANT_WITH_OPTION, "TOK_GRANT_WITH_OPTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withGrantOption"


	public static class grantOptionFor_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "grantOptionFor"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1783:1: grantOptionFor : KW_GRANT KW_OPTION KW_FOR -> ^( TOK_GRANT_OPTION_FOR ) ;
	public final HiveASTParser.grantOptionFor_return grantOptionFor() throws RecognitionException {
		HiveASTParser.grantOptionFor_return retval = new HiveASTParser.grantOptionFor_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_GRANT631=null;
		Token KW_OPTION632=null;
		Token KW_FOR633=null;

		HiveParserASTNode KW_GRANT631_tree=null;
		HiveParserASTNode KW_OPTION632_tree=null;
		HiveParserASTNode KW_FOR633_tree=null;
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");

		pushMsg("grant option for", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1786:5: ( KW_GRANT KW_OPTION KW_FOR -> ^( TOK_GRANT_OPTION_FOR ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1786:7: KW_GRANT KW_OPTION KW_FOR
			{
			KW_GRANT631=(Token)match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantOptionFor10168); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_GRANT.add(KW_GRANT631);

			KW_OPTION632=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_grantOptionFor10170); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION632);

			KW_FOR633=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_grantOptionFor10172); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR633);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1787:5: -> ^( TOK_GRANT_OPTION_FOR )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1787:8: ^( TOK_GRANT_OPTION_FOR )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_GRANT_OPTION_FOR, "TOK_GRANT_OPTION_FOR"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "grantOptionFor"


	public static class adminOptionFor_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "adminOptionFor"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1790:1: adminOptionFor : KW_ADMIN KW_OPTION KW_FOR -> ^( TOK_ADMIN_OPTION_FOR ) ;
	public final HiveASTParser.adminOptionFor_return adminOptionFor() throws RecognitionException {
		HiveASTParser.adminOptionFor_return retval = new HiveASTParser.adminOptionFor_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ADMIN634=null;
		Token KW_OPTION635=null;
		Token KW_FOR636=null;

		HiveParserASTNode KW_ADMIN634_tree=null;
		HiveParserASTNode KW_OPTION635_tree=null;
		HiveParserASTNode KW_FOR636_tree=null;
		RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
		RewriteRuleTokenStream stream_KW_ADMIN=new RewriteRuleTokenStream(adaptor,"token KW_ADMIN");

		pushMsg("admin option for", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1793:5: ( KW_ADMIN KW_OPTION KW_FOR -> ^( TOK_ADMIN_OPTION_FOR ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1793:7: KW_ADMIN KW_OPTION KW_FOR
			{
			KW_ADMIN634=(Token)match(input,KW_ADMIN,FOLLOW_KW_ADMIN_in_adminOptionFor10205); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADMIN.add(KW_ADMIN634);

			KW_OPTION635=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_adminOptionFor10207); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION635);

			KW_FOR636=(Token)match(input,KW_FOR,FOLLOW_KW_FOR_in_adminOptionFor10209); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOR.add(KW_FOR636);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1794:5: -> ^( TOK_ADMIN_OPTION_FOR )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1794:8: ^( TOK_ADMIN_OPTION_FOR )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ADMIN_OPTION_FOR, "TOK_ADMIN_OPTION_FOR"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "adminOptionFor"


	public static class withAdminOption_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "withAdminOption"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1797:1: withAdminOption : KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) ;
	public final HiveASTParser.withAdminOption_return withAdminOption() throws RecognitionException {
		HiveASTParser.withAdminOption_return retval = new HiveASTParser.withAdminOption_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_WITH637=null;
		Token KW_ADMIN638=null;
		Token KW_OPTION639=null;

		HiveParserASTNode KW_WITH637_tree=null;
		HiveParserASTNode KW_ADMIN638_tree=null;
		HiveParserASTNode KW_OPTION639_tree=null;
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
		RewriteRuleTokenStream stream_KW_ADMIN=new RewriteRuleTokenStream(adaptor,"token KW_ADMIN");

		pushMsg("with admin option", state);
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1800:5: ( KW_WITH KW_ADMIN KW_OPTION -> ^( TOK_GRANT_WITH_ADMIN_OPTION ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1800:7: KW_WITH KW_ADMIN KW_OPTION
			{
			KW_WITH637=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withAdminOption10242); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH637);

			KW_ADMIN638=(Token)match(input,KW_ADMIN,FOLLOW_KW_ADMIN_in_withAdminOption10244); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ADMIN.add(KW_ADMIN638);

			KW_OPTION639=(Token)match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withAdminOption10246); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_OPTION.add(KW_OPTION639);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1801:5: -> ^( TOK_GRANT_WITH_ADMIN_OPTION )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1801:8: ^( TOK_GRANT_WITH_ADMIN_OPTION )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_GRANT_WITH_ADMIN_OPTION, "TOK_GRANT_WITH_ADMIN_OPTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) {popMsg(state);}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withAdminOption"


	public static class metastoreCheck_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "metastoreCheck"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1804:1: metastoreCheck : KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? ) ;
	public final HiveASTParser.metastoreCheck_return metastoreCheck() throws RecognitionException {
		HiveASTParser.metastoreCheck_return retval = new HiveASTParser.metastoreCheck_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token repair=null;
		Token KW_MSCK640=null;
		Token KW_TABLE641=null;
		Token COMMA644=null;
		ParserRuleReturnScope tableName642 =null;
		ParserRuleReturnScope partitionSpec643 =null;
		ParserRuleReturnScope partitionSpec645 =null;

		HiveParserASTNode repair_tree=null;
		HiveParserASTNode KW_MSCK640_tree=null;
		HiveParserASTNode KW_TABLE641_tree=null;
		HiveParserASTNode COMMA644_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_REPAIR=new RewriteRuleTokenStream(adaptor,"token KW_REPAIR");
		RewriteRuleTokenStream stream_KW_MSCK=new RewriteRuleTokenStream(adaptor,"token KW_MSCK");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("metastore check statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1807:5: ( KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1807:7: KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )?
			{
			KW_MSCK640=(Token)match(input,KW_MSCK,FOLLOW_KW_MSCK_in_metastoreCheck10283); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MSCK.add(KW_MSCK640);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1807:15: (repair= KW_REPAIR )?
			int alt190=2;
			int LA190_0 = input.LA(1);
			if ( (LA190_0==KW_REPAIR) ) {
				alt190=1;
			}
			switch (alt190) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1807:16: repair= KW_REPAIR
					{
					repair=(Token)match(input,KW_REPAIR,FOLLOW_KW_REPAIR_in_metastoreCheck10288); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_REPAIR.add(repair);

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1807:35: ( KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )* )?
			int alt193=2;
			int LA193_0 = input.LA(1);
			if ( (LA193_0==KW_TABLE) ) {
				alt193=1;
			}
			switch (alt193) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1807:36: KW_TABLE tableName ( partitionSpec )? ( COMMA partitionSpec )*
					{
					KW_TABLE641=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_metastoreCheck10293); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE641);

					pushFollow(FOLLOW_tableName_in_metastoreCheck10295);
					tableName642=tableName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableName.add(tableName642.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1807:55: ( partitionSpec )?
					int alt191=2;
					int LA191_0 = input.LA(1);
					if ( (LA191_0==KW_PARTITION) ) {
						alt191=1;
					}
					switch (alt191) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1807:55: partitionSpec
							{
							pushFollow(FOLLOW_partitionSpec_in_metastoreCheck10297);
							partitionSpec643=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec643.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1807:70: ( COMMA partitionSpec )*
					loop192:
					while (true) {
						int alt192=2;
						int LA192_0 = input.LA(1);
						if ( (LA192_0==COMMA) ) {
							alt192=1;
						}

						switch (alt192) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1807:71: COMMA partitionSpec
							{
							COMMA644=(Token)match(input,COMMA,FOLLOW_COMMA_in_metastoreCheck10301); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA644);

							pushFollow(FOLLOW_partitionSpec_in_metastoreCheck10303);
							partitionSpec645=partitionSpec();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_partitionSpec.add(partitionSpec645.getTree());
							}
							break;

						default :
							break loop192;
						}
					}

					}
					break;

			}

			// AST REWRITE
			// elements: partitionSpec, repair, tableName
			// token labels: repair
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_repair=new RewriteRuleTokenStream(adaptor,"token repair",repair);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1808:5: -> ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1808:8: ^( TOK_MSCK ( $repair)? ( tableName ( partitionSpec )* )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_MSCK, "TOK_MSCK"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1808:20: ( $repair)?
				if ( stream_repair.hasNext() ) {
					adaptor.addChild(root_1, stream_repair.nextNode());
				}
				stream_repair.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1808:28: ( tableName ( partitionSpec )* )?
				if ( stream_partitionSpec.hasNext()||stream_tableName.hasNext() ) {
					adaptor.addChild(root_1, stream_tableName.nextTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1808:39: ( partitionSpec )*
					while ( stream_partitionSpec.hasNext() ) {
						adaptor.addChild(root_1, stream_partitionSpec.nextTree());
					}
					stream_partitionSpec.reset();

				}
				stream_partitionSpec.reset();
				stream_tableName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "metastoreCheck"


	public static class resourceList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "resourceList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1811:1: resourceList : resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) ;
	public final HiveASTParser.resourceList_return resourceList() throws RecognitionException {
		HiveASTParser.resourceList_return retval = new HiveASTParser.resourceList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA647=null;
		ParserRuleReturnScope resource646 =null;
		ParserRuleReturnScope resource648 =null;

		HiveParserASTNode COMMA647_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_resource=new RewriteRuleSubtreeStream(adaptor,"rule resource");

		 pushMsg("resource list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1814:3: ( resource ( COMMA resource )* -> ^( TOK_RESOURCE_LIST ( resource )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1815:3: resource ( COMMA resource )*
			{
			pushFollow(FOLLOW_resource_in_resourceList10356);
			resource646=resource();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_resource.add(resource646.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1815:12: ( COMMA resource )*
			loop194:
			while (true) {
				int alt194=2;
				int LA194_0 = input.LA(1);
				if ( (LA194_0==COMMA) ) {
					alt194=1;
				}

				switch (alt194) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1815:13: COMMA resource
					{
					COMMA647=(Token)match(input,COMMA,FOLLOW_COMMA_in_resourceList10359); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA647);

					pushFollow(FOLLOW_resource_in_resourceList10361);
					resource648=resource();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_resource.add(resource648.getTree());
					}
					break;

				default :
					break loop194;
				}
			}

			// AST REWRITE
			// elements: resource
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1815:30: -> ^( TOK_RESOURCE_LIST ( resource )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1815:33: ^( TOK_RESOURCE_LIST ( resource )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_RESOURCE_LIST, "TOK_RESOURCE_LIST"), root_1);
				if ( !(stream_resource.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_resource.hasNext() ) {
					adaptor.addChild(root_1, stream_resource.nextTree());
				}
				stream_resource.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resourceList"


	public static class resource_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "resource"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1818:1: resource : resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) ;
	public final HiveASTParser.resource_return resource() throws RecognitionException {
		HiveASTParser.resource_return retval = new HiveASTParser.resource_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token resPath=null;
		ParserRuleReturnScope resType =null;

		HiveParserASTNode resPath_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleSubtreeStream stream_resourceType=new RewriteRuleSubtreeStream(adaptor,"rule resourceType");

		 pushMsg("resource", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1821:3: (resType= resourceType resPath= StringLiteral -> ^( TOK_RESOURCE_URI $resType $resPath) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1822:3: resType= resourceType resPath= StringLiteral
			{
			pushFollow(FOLLOW_resourceType_in_resource10399);
			resType=resourceType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_resourceType.add(resType.getTree());
			resPath=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_resource10403); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(resPath);

			// AST REWRITE
			// elements: resPath, resType
			// token labels: resPath
			// rule labels: resType, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_resPath=new RewriteRuleTokenStream(adaptor,"token resPath",resPath);
			RewriteRuleSubtreeStream stream_resType=new RewriteRuleSubtreeStream(adaptor,"rule resType",resType!=null?resType.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1822:46: -> ^( TOK_RESOURCE_URI $resType $resPath)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1822:49: ^( TOK_RESOURCE_URI $resType $resPath)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_RESOURCE_URI, "TOK_RESOURCE_URI"), root_1);
				adaptor.addChild(root_1, stream_resType.nextTree());
				adaptor.addChild(root_1, stream_resPath.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resource"


	public static class resourceType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "resourceType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1825:1: resourceType : ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) );
	public final HiveASTParser.resourceType_return resourceType() throws RecognitionException {
		HiveASTParser.resourceType_return retval = new HiveASTParser.resourceType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_JAR649=null;
		Token KW_FILE650=null;
		Token KW_ARCHIVE651=null;

		HiveParserASTNode KW_JAR649_tree=null;
		HiveParserASTNode KW_FILE650_tree=null;
		HiveParserASTNode KW_ARCHIVE651_tree=null;
		RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
		RewriteRuleTokenStream stream_KW_JAR=new RewriteRuleTokenStream(adaptor,"token KW_JAR");
		RewriteRuleTokenStream stream_KW_FILE=new RewriteRuleTokenStream(adaptor,"token KW_FILE");

		 pushMsg("resource type", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1828:3: ( KW_JAR -> ^( TOK_JAR ) | KW_FILE -> ^( TOK_FILE ) | KW_ARCHIVE -> ^( TOK_ARCHIVE ) )
			int alt195=3;
			switch ( input.LA(1) ) {
			case KW_JAR:
				{
				alt195=1;
				}
				break;
			case KW_FILE:
				{
				alt195=2;
				}
				break;
			case KW_ARCHIVE:
				{
				alt195=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 195, 0, input);
				throw nvae;
			}
			switch (alt195) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1829:3: KW_JAR
					{
					KW_JAR649=(Token)match(input,KW_JAR,FOLLOW_KW_JAR_in_resourceType10440); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_JAR.add(KW_JAR649);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1829:10: -> ^( TOK_JAR )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1829:13: ^( TOK_JAR )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_JAR, "TOK_JAR"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1831:3: KW_FILE
					{
					KW_FILE650=(Token)match(input,KW_FILE,FOLLOW_KW_FILE_in_resourceType10454); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FILE.add(KW_FILE650);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1831:11: -> ^( TOK_FILE )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1831:14: ^( TOK_FILE )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FILE, "TOK_FILE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1833:3: KW_ARCHIVE
					{
					KW_ARCHIVE651=(Token)match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_resourceType10468); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ARCHIVE.add(KW_ARCHIVE651);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1833:14: -> ^( TOK_ARCHIVE )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1833:17: ^( TOK_ARCHIVE )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ARCHIVE, "TOK_ARCHIVE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "resourceType"


	public static class createFunctionStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "createFunctionStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1836:1: createFunctionStatement : KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) ;
	public final HiveASTParser.createFunctionStatement_return createFunctionStatement() throws RecognitionException {
		HiveASTParser.createFunctionStatement_return retval = new HiveASTParser.createFunctionStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token temp=null;
		Token KW_CREATE652=null;
		Token KW_FUNCTION653=null;
		Token KW_AS655=null;
		Token StringLiteral656=null;
		Token KW_USING657=null;
		ParserRuleReturnScope rList =null;
		ParserRuleReturnScope functionIdentifier654 =null;

		HiveParserASTNode temp_tree=null;
		HiveParserASTNode KW_CREATE652_tree=null;
		HiveParserASTNode KW_FUNCTION653_tree=null;
		HiveParserASTNode KW_AS655_tree=null;
		HiveParserASTNode StringLiteral656_tree=null;
		HiveParserASTNode KW_USING657_tree=null;
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");
		RewriteRuleSubtreeStream stream_resourceList=new RewriteRuleSubtreeStream(adaptor,"rule resourceList");

		 pushMsg("create function statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1839:5: ( KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )? -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY ) -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1839:7: KW_CREATE (temp= KW_TEMPORARY )? KW_FUNCTION functionIdentifier KW_AS StringLiteral ( KW_USING rList= resourceList )?
			{
			KW_CREATE652=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createFunctionStatement10499); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE652);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1839:17: (temp= KW_TEMPORARY )?
			int alt196=2;
			int LA196_0 = input.LA(1);
			if ( (LA196_0==KW_TEMPORARY) ) {
				alt196=1;
			}
			switch (alt196) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1839:18: temp= KW_TEMPORARY
					{
					temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createFunctionStatement10504); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);

					}
					break;

			}

			KW_FUNCTION653=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_createFunctionStatement10508); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION653);

			pushFollow(FOLLOW_functionIdentifier_in_createFunctionStatement10510);
			functionIdentifier654=functionIdentifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_functionIdentifier.add(functionIdentifier654.getTree());
			KW_AS655=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createFunctionStatement10512); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS655);

			StringLiteral656=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_createFunctionStatement10514); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral656);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1840:7: ( KW_USING rList= resourceList )?
			int alt197=2;
			int LA197_0 = input.LA(1);
			if ( (LA197_0==KW_USING) ) {
				alt197=1;
			}
			switch (alt197) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1840:8: KW_USING rList= resourceList
					{
					KW_USING657=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_createFunctionStatement10523); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_USING.add(KW_USING657);

					pushFollow(FOLLOW_resourceList_in_createFunctionStatement10527);
					rList=resourceList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_resourceList.add(rList.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: rList, functionIdentifier, functionIdentifier, StringLiteral, rList, StringLiteral
			// token labels: 
			// rule labels: rList, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_rList=new RewriteRuleSubtreeStream(adaptor,"rule rList",rList!=null?rList.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1841:5: -> {$temp != null}? ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
			if (temp != null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1841:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? TOK_TEMPORARY )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1841:80: ( $rList)?
				if ( stream_rList.hasNext() ) {
					adaptor.addChild(root_1, stream_rList.nextTree());
				}
				stream_rList.reset();

				adaptor.addChild(root_1, (HiveParserASTNode)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY"));
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1842:5: -> ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1842:25: ^( TOK_CREATEFUNCTION functionIdentifier StringLiteral ( $rList)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				adaptor.addChild(root_1, stream_StringLiteral.nextNode());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1842:80: ( $rList)?
				if ( stream_rList.hasNext() ) {
					adaptor.addChild(root_1, stream_rList.nextTree());
				}
				stream_rList.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createFunctionStatement"


	public static class dropFunctionStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropFunctionStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1845:1: dropFunctionStatement : KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) ;
	public final HiveASTParser.dropFunctionStatement_return dropFunctionStatement() throws RecognitionException {
		HiveASTParser.dropFunctionStatement_return retval = new HiveASTParser.dropFunctionStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token temp=null;
		Token KW_DROP658=null;
		Token KW_FUNCTION659=null;
		ParserRuleReturnScope ifExists660 =null;
		ParserRuleReturnScope functionIdentifier661 =null;

		HiveParserASTNode temp_tree=null;
		HiveParserASTNode KW_DROP658_tree=null;
		HiveParserASTNode KW_FUNCTION659_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
		RewriteRuleSubtreeStream stream_functionIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule functionIdentifier");

		 pushMsg("drop function statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1848:5: ( KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY ) -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1848:7: KW_DROP (temp= KW_TEMPORARY )? KW_FUNCTION ( ifExists )? functionIdentifier
			{
			KW_DROP658=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropFunctionStatement10613); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP658);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1848:15: (temp= KW_TEMPORARY )?
			int alt198=2;
			int LA198_0 = input.LA(1);
			if ( (LA198_0==KW_TEMPORARY) ) {
				alt198=1;
			}
			switch (alt198) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1848:16: temp= KW_TEMPORARY
					{
					temp=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropFunctionStatement10618); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(temp);

					}
					break;

			}

			KW_FUNCTION659=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_dropFunctionStatement10622); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION659);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1848:48: ( ifExists )?
			int alt199=2;
			int LA199_0 = input.LA(1);
			if ( (LA199_0==KW_IF) ) {
				alt199=1;
			}
			switch (alt199) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1848:48: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropFunctionStatement10624);
					ifExists660=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists660.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_functionIdentifier_in_dropFunctionStatement10627);
			functionIdentifier661=functionIdentifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_functionIdentifier.add(functionIdentifier661.getTree());
			// AST REWRITE
			// elements: ifExists, functionIdentifier, functionIdentifier, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1849:5: -> {$temp != null}? ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
			if (temp != null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1849:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? TOK_TEMPORARY )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1849:63: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_1, (HiveParserASTNode)adaptor.create(TOK_TEMPORARY, "TOK_TEMPORARY"));
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 1850:5: -> ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1850:25: ^( TOK_DROPFUNCTION functionIdentifier ( ifExists )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);
				adaptor.addChild(root_1, stream_functionIdentifier.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1850:63: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropFunctionStatement"


	public static class reloadFunctionStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "reloadFunctionStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1853:1: reloadFunctionStatement : KW_RELOAD KW_FUNCTION -> ^( TOK_RELOADFUNCTION ) ;
	public final HiveASTParser.reloadFunctionStatement_return reloadFunctionStatement() throws RecognitionException {
		HiveASTParser.reloadFunctionStatement_return retval = new HiveASTParser.reloadFunctionStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_RELOAD662=null;
		Token KW_FUNCTION663=null;

		HiveParserASTNode KW_RELOAD662_tree=null;
		HiveParserASTNode KW_FUNCTION663_tree=null;
		RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
		RewriteRuleTokenStream stream_KW_RELOAD=new RewriteRuleTokenStream(adaptor,"token KW_RELOAD");

		 pushMsg("reload function statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1856:5: ( KW_RELOAD KW_FUNCTION -> ^( TOK_RELOADFUNCTION ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1856:7: KW_RELOAD KW_FUNCTION
			{
			KW_RELOAD662=(Token)match(input,KW_RELOAD,FOLLOW_KW_RELOAD_in_reloadFunctionStatement10705); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_RELOAD.add(KW_RELOAD662);

			KW_FUNCTION663=(Token)match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_reloadFunctionStatement10707); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FUNCTION.add(KW_FUNCTION663);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1856:29: -> ^( TOK_RELOADFUNCTION )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1856:32: ^( TOK_RELOADFUNCTION )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_RELOADFUNCTION, "TOK_RELOADFUNCTION"), root_1);
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "reloadFunctionStatement"


	public static class createMacroStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "createMacroStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1858:1: createMacroStatement : KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) ;
	public final HiveASTParser.createMacroStatement_return createMacroStatement() throws RecognitionException {
		HiveASTParser.createMacroStatement_return retval = new HiveASTParser.createMacroStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_CREATE664=null;
		Token KW_TEMPORARY665=null;
		Token KW_MACRO666=null;
		Token Identifier667=null;
		Token LPAREN668=null;
		Token RPAREN670=null;
		ParserRuleReturnScope columnNameTypeList669 =null;
		ParserRuleReturnScope expression671 =null;

		HiveParserASTNode KW_CREATE664_tree=null;
		HiveParserASTNode KW_TEMPORARY665_tree=null;
		HiveParserASTNode KW_MACRO666_tree=null;
		HiveParserASTNode Identifier667_tree=null;
		HiveParserASTNode LPAREN668_tree=null;
		HiveParserASTNode RPAREN670_tree=null;
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");

		 pushMsg("create macro statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1861:5: ( KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1861:7: KW_CREATE KW_TEMPORARY KW_MACRO Identifier LPAREN ( columnNameTypeList )? RPAREN expression
			{
			KW_CREATE664=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createMacroStatement10735); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE664);

			KW_TEMPORARY665=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createMacroStatement10737); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(KW_TEMPORARY665);

			KW_MACRO666=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_createMacroStatement10739); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MACRO.add(KW_MACRO666);

			Identifier667=(Token)match(input,Identifier,FOLLOW_Identifier_in_createMacroStatement10741); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Identifier.add(Identifier667);

			LPAREN668=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createMacroStatement10749); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN668);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1862:14: ( columnNameTypeList )?
			int alt200=2;
			int LA200_0 = input.LA(1);
			if ( (LA200_0==Identifier||(LA200_0 >= KW_ABORT && LA200_0 <= KW_AFTER)||LA200_0==KW_ANALYZE||LA200_0==KW_ARCHIVE||LA200_0==KW_ASC||(LA200_0 >= KW_AUTOCOMMIT && LA200_0 <= KW_BEFORE)||(LA200_0 >= KW_BUCKET && LA200_0 <= KW_BUCKETS)||(LA200_0 >= KW_CACHE && LA200_0 <= KW_CASCADE)||LA200_0==KW_CHANGE||(LA200_0 >= KW_CLUSTER && LA200_0 <= KW_COLLECTION)||(LA200_0 >= KW_COLUMNS && LA200_0 <= KW_COMMENT)||(LA200_0 >= KW_COMPACT && LA200_0 <= KW_CONCATENATE)||LA200_0==KW_CONTINUE||LA200_0==KW_DATA||LA200_0==KW_DATABASES||(LA200_0 >= KW_DATETIME && LA200_0 <= KW_DBPROPERTIES)||(LA200_0 >= KW_DEFERRED && LA200_0 <= KW_DEFINED)||(LA200_0 >= KW_DELIMITED && LA200_0 <= KW_DESC)||(LA200_0 >= KW_DETAIL && LA200_0 <= KW_DISABLE)||LA200_0==KW_DISTRIBUTE||LA200_0==KW_DOW||(LA200_0 >= KW_DUMP && LA200_0 <= KW_ELEM_TYPE)||LA200_0==KW_ENABLE||LA200_0==KW_ESCAPED||LA200_0==KW_EXCLUSIVE||(LA200_0 >= KW_EXPLAIN && LA200_0 <= KW_EXPRESSION)||(LA200_0 >= KW_FIELDS && LA200_0 <= KW_FIRST)||(LA200_0 >= KW_FORMAT && LA200_0 <= KW_FORMATTED)||LA200_0==KW_FUNCTIONS||(LA200_0 >= KW_HOUR && LA200_0 <= KW_IDXPROPERTIES)||(LA200_0 >= KW_INDEX && LA200_0 <= KW_INDEXES)||(LA200_0 >= KW_INPATH && LA200_0 <= KW_INPUTFORMAT)||(LA200_0 >= KW_ISOLATION && LA200_0 <= KW_JAR)||(LA200_0 >= KW_KEY && LA200_0 <= KW_LAST)||LA200_0==KW_LEVEL||(LA200_0 >= KW_LIMIT && LA200_0 <= KW_LOAD)||(LA200_0 >= KW_LOCATION && LA200_0 <= KW_LONG)||(LA200_0 >= KW_MAPJOIN && LA200_0 <= KW_MATERIALIZED)||LA200_0==KW_METADATA||(LA200_0 >= KW_MINUTE && LA200_0 <= KW_MONTH)||LA200_0==KW_MSCK||(LA200_0 >= KW_NORELY && LA200_0 <= KW_NOSCAN)||LA200_0==KW_NOVALIDATE||LA200_0==KW_NULLS||LA200_0==KW_OFFSET||(LA200_0 >= KW_OPERATOR && LA200_0 <= KW_OPTION)||(LA200_0 >= KW_OUTPUTDRIVER && LA200_0 <= KW_OUTPUTFORMAT)||(LA200_0 >= KW_OVERWRITE && LA200_0 <= KW_OWNER)||(LA200_0 >= KW_PARTITIONED && LA200_0 <= KW_PARTITIONS)||LA200_0==KW_PLUS||LA200_0==KW_PRETTY||LA200_0==KW_PRINCIPALS||(LA200_0 >= KW_PURGE && LA200_0 <= KW_QUARTER)||LA200_0==KW_READ||(LA200_0 >= KW_REBUILD && LA200_0 <= KW_RECORDWRITER)||(LA200_0 >= KW_RELOAD && LA200_0 <= KW_RESTRICT)||LA200_0==KW_REWRITE||(LA200_0 >= KW_ROLE && LA200_0 <= KW_ROLES)||(LA200_0 >= KW_SCHEMA && LA200_0 <= KW_SECOND)||(LA200_0 >= KW_SEMI && LA200_0 <= KW_SERVER)||(LA200_0 >= KW_SETS && LA200_0 <= KW_SKEWED)||(LA200_0 >= KW_SNAPSHOT && LA200_0 <= KW_SSL)||(LA200_0 >= KW_STATISTICS && LA200_0 <= KW_SUMMARY)||LA200_0==KW_TABLES||(LA200_0 >= KW_TBLPROPERTIES && LA200_0 <= KW_TERMINATED)||LA200_0==KW_TINYINT||(LA200_0 >= KW_TOUCH && LA200_0 <= KW_TRANSACTIONS)||LA200_0==KW_UNARCHIVE||LA200_0==KW_UNDO||LA200_0==KW_UNIONTYPE||(LA200_0 >= KW_UNLOCK && LA200_0 <= KW_UNSIGNED)||(LA200_0 >= KW_URI && LA200_0 <= KW_USE)||(LA200_0 >= KW_UTC && LA200_0 <= KW_VALIDATE)||LA200_0==KW_VALUE_TYPE||(LA200_0 >= KW_VECTORIZATION && LA200_0 <= KW_WEEK)||LA200_0==KW_WHILE||(LA200_0 >= KW_WORK && LA200_0 <= KW_YEAR)||LA200_0==KW_BATCH||LA200_0==KW_DAYOFWEEK||LA200_0==KW_HOLD_DDLTIME||LA200_0==KW_IGNORE||LA200_0==KW_NO_DROP||LA200_0==KW_OFFLINE||LA200_0==KW_PROTECTION||LA200_0==KW_READONLY) ) {
				alt200=1;
			}
			switch (alt200) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1862:14: columnNameTypeList
					{
					pushFollow(FOLLOW_columnNameTypeList_in_createMacroStatement10751);
					columnNameTypeList669=columnNameTypeList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList669.getTree());
					}
					break;

			}

			RPAREN670=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createMacroStatement10754); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN670);

			pushFollow(FOLLOW_expression_in_createMacroStatement10756);
			expression671=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression671.getTree());
			// AST REWRITE
			// elements: Identifier, columnNameTypeList, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1863:5: -> ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1863:8: ^( TOK_CREATEMACRO Identifier ( columnNameTypeList )? expression )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CREATEMACRO, "TOK_CREATEMACRO"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1863:37: ( columnNameTypeList )?
				if ( stream_columnNameTypeList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				}
				stream_columnNameTypeList.reset();

				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createMacroStatement"


	public static class dropMacroStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropMacroStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1866:1: dropMacroStatement : KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) ;
	public final HiveASTParser.dropMacroStatement_return dropMacroStatement() throws RecognitionException {
		HiveASTParser.dropMacroStatement_return retval = new HiveASTParser.dropMacroStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_DROP672=null;
		Token KW_TEMPORARY673=null;
		Token KW_MACRO674=null;
		Token Identifier676=null;
		ParserRuleReturnScope ifExists675 =null;

		HiveParserASTNode KW_DROP672_tree=null;
		HiveParserASTNode KW_TEMPORARY673_tree=null;
		HiveParserASTNode KW_MACRO674_tree=null;
		HiveParserASTNode Identifier676_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
		RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
		RewriteRuleTokenStream stream_KW_MACRO=new RewriteRuleTokenStream(adaptor,"token KW_MACRO");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("drop macro statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1869:5: ( KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier -> ^( TOK_DROPMACRO Identifier ( ifExists )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1869:7: KW_DROP KW_TEMPORARY KW_MACRO ( ifExists )? Identifier
			{
			KW_DROP672=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropMacroStatement10800); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP672);

			KW_TEMPORARY673=(Token)match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropMacroStatement10802); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TEMPORARY.add(KW_TEMPORARY673);

			KW_MACRO674=(Token)match(input,KW_MACRO,FOLLOW_KW_MACRO_in_dropMacroStatement10804); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MACRO.add(KW_MACRO674);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1869:37: ( ifExists )?
			int alt201=2;
			int LA201_0 = input.LA(1);
			if ( (LA201_0==KW_IF) ) {
				alt201=1;
			}
			switch (alt201) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1869:37: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropMacroStatement10806);
					ifExists675=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists675.getTree());
					}
					break;

			}

			Identifier676=(Token)match(input,Identifier,FOLLOW_Identifier_in_dropMacroStatement10809); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Identifier.add(Identifier676);

			// AST REWRITE
			// elements: ifExists, Identifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1870:5: -> ^( TOK_DROPMACRO Identifier ( ifExists )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1870:8: ^( TOK_DROPMACRO Identifier ( ifExists )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DROPMACRO, "TOK_DROPMACRO"), root_1);
				adaptor.addChild(root_1, stream_Identifier.nextNode());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1870:35: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropMacroStatement"


	public static class createViewStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "createViewStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1873:1: createViewStatement : KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) ;
	public final HiveASTParser.createViewStatement_return createViewStatement() throws RecognitionException {
		HiveASTParser.createViewStatement_return retval = new HiveASTParser.createViewStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_CREATE677=null;
		Token KW_VIEW679=null;
		Token LPAREN681=null;
		Token RPAREN683=null;
		Token KW_AS687=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope orReplace678 =null;
		ParserRuleReturnScope ifNotExists680 =null;
		ParserRuleReturnScope columnNameCommentList682 =null;
		ParserRuleReturnScope tableComment684 =null;
		ParserRuleReturnScope viewPartition685 =null;
		ParserRuleReturnScope tablePropertiesPrefixed686 =null;
		ParserRuleReturnScope selectStatementWithCTE688 =null;

		HiveParserASTNode KW_CREATE677_tree=null;
		HiveParserASTNode KW_VIEW679_tree=null;
		HiveParserASTNode LPAREN681_tree=null;
		HiveParserASTNode RPAREN683_tree=null;
		HiveParserASTNode KW_AS687_tree=null;
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_columnNameCommentList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameCommentList");
		RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
		RewriteRuleSubtreeStream stream_orReplace=new RewriteRuleSubtreeStream(adaptor,"rule orReplace");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");


		    pushMsg("create view statement", state);

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1878:5: ( KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1878:7: KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE
			{
			KW_CREATE677=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createViewStatement10851); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE677);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1878:17: ( orReplace )?
			int alt202=2;
			int LA202_0 = input.LA(1);
			if ( (LA202_0==KW_OR) ) {
				alt202=1;
			}
			switch (alt202) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1878:18: orReplace
					{
					pushFollow(FOLLOW_orReplace_in_createViewStatement10854);
					orReplace678=orReplace();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orReplace.add(orReplace678.getTree());
					}
					break;

			}

			KW_VIEW679=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createViewStatement10858); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW679);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1878:38: ( ifNotExists )?
			int alt203=2;
			int LA203_0 = input.LA(1);
			if ( (LA203_0==KW_IF) ) {
				alt203=1;
			}
			switch (alt203) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1878:39: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createViewStatement10861);
					ifNotExists680=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists680.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createViewStatement10867);
			name=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(name.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1879:9: ( LPAREN columnNameCommentList RPAREN )?
			int alt204=2;
			int LA204_0 = input.LA(1);
			if ( (LA204_0==LPAREN) ) {
				alt204=1;
			}
			switch (alt204) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1879:10: LPAREN columnNameCommentList RPAREN
					{
					LPAREN681=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createViewStatement10878); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN681);

					pushFollow(FOLLOW_columnNameCommentList_in_createViewStatement10880);
					columnNameCommentList682=columnNameCommentList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameCommentList.add(columnNameCommentList682.getTree());
					RPAREN683=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createViewStatement10882); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN683);

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1879:48: ( tableComment )?
			int alt205=2;
			int LA205_0 = input.LA(1);
			if ( (LA205_0==KW_COMMENT) ) {
				alt205=1;
			}
			switch (alt205) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1879:48: tableComment
					{
					pushFollow(FOLLOW_tableComment_in_createViewStatement10886);
					tableComment684=tableComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableComment.add(tableComment684.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1879:62: ( viewPartition )?
			int alt206=2;
			int LA206_0 = input.LA(1);
			if ( (LA206_0==KW_PARTITIONED) ) {
				alt206=1;
			}
			switch (alt206) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1879:62: viewPartition
					{
					pushFollow(FOLLOW_viewPartition_in_createViewStatement10889);
					viewPartition685=viewPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_viewPartition.add(viewPartition685.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1880:9: ( tablePropertiesPrefixed )?
			int alt207=2;
			int LA207_0 = input.LA(1);
			if ( (LA207_0==KW_TBLPROPERTIES) ) {
				alt207=1;
			}
			switch (alt207) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1880:9: tablePropertiesPrefixed
					{
					pushFollow(FOLLOW_tablePropertiesPrefixed_in_createViewStatement10900);
					tablePropertiesPrefixed686=tablePropertiesPrefixed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed686.getTree());
					}
					break;

			}

			KW_AS687=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createViewStatement10911); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS687);

			pushFollow(FOLLOW_selectStatementWithCTE_in_createViewStatement10921);
			selectStatementWithCTE688=selectStatementWithCTE();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE688.getTree());
			// AST REWRITE
			// elements: tablePropertiesPrefixed, viewPartition, tableComment, selectStatementWithCTE, columnNameCommentList, orReplace, name, ifNotExists
			// token labels: 
			// rule labels: name, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1883:5: -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1883:8: ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CREATEVIEW, "TOK_CREATEVIEW"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1883:31: ( orReplace )?
				if ( stream_orReplace.hasNext() ) {
					adaptor.addChild(root_1, stream_orReplace.nextTree());
				}
				stream_orReplace.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1884:10: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1885:10: ( columnNameCommentList )?
				if ( stream_columnNameCommentList.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameCommentList.nextTree());
				}
				stream_columnNameCommentList.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1886:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1887:10: ( viewPartition )?
				if ( stream_viewPartition.hasNext() ) {
					adaptor.addChild(root_1, stream_viewPartition.nextTree());
				}
				stream_viewPartition.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1888:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createViewStatement"


	public static class createMaterializedViewStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "createMaterializedViewStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1893:1: createMaterializedViewStatement : KW_CREATE KW_MATERIALIZED KW_VIEW ( ifNotExists )? name= tableName ( rewriteEnabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteEnabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) ;
	public final HiveASTParser.createMaterializedViewStatement_return createMaterializedViewStatement() throws RecognitionException {
		HiveASTParser.createMaterializedViewStatement_return retval = new HiveASTParser.createMaterializedViewStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_CREATE689=null;
		Token KW_MATERIALIZED690=null;
		Token KW_VIEW691=null;
		Token KW_AS699=null;
		ParserRuleReturnScope name =null;
		ParserRuleReturnScope ifNotExists692 =null;
		ParserRuleReturnScope rewriteEnabled693 =null;
		ParserRuleReturnScope tableComment694 =null;
		ParserRuleReturnScope tableRowFormat695 =null;
		ParserRuleReturnScope tableFileFormat696 =null;
		ParserRuleReturnScope tableLocation697 =null;
		ParserRuleReturnScope tablePropertiesPrefixed698 =null;
		ParserRuleReturnScope selectStatementWithCTE700 =null;

		HiveParserASTNode KW_CREATE689_tree=null;
		HiveParserASTNode KW_MATERIALIZED690_tree=null;
		HiveParserASTNode KW_VIEW691_tree=null;
		HiveParserASTNode KW_AS699_tree=null;
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
		RewriteRuleTokenStream stream_KW_MATERIALIZED=new RewriteRuleTokenStream(adaptor,"token KW_MATERIALIZED");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_selectStatementWithCTE=new RewriteRuleSubtreeStream(adaptor,"rule selectStatementWithCTE");
		RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
		RewriteRuleSubtreeStream stream_rewriteEnabled=new RewriteRuleSubtreeStream(adaptor,"rule rewriteEnabled");
		RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");


		    pushMsg("create materialized view statement", state);

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1898:5: ( KW_CREATE KW_MATERIALIZED KW_VIEW ( ifNotExists )? name= tableName ( rewriteEnabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE -> ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteEnabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? selectStatementWithCTE ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1898:7: KW_CREATE KW_MATERIALIZED KW_VIEW ( ifNotExists )? name= tableName ( rewriteEnabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? KW_AS selectStatementWithCTE
			{
			KW_CREATE689=(Token)match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createMaterializedViewStatement11044); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CREATE.add(KW_CREATE689);

			KW_MATERIALIZED690=(Token)match(input,KW_MATERIALIZED,FOLLOW_KW_MATERIALIZED_in_createMaterializedViewStatement11046); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MATERIALIZED.add(KW_MATERIALIZED690);

			KW_VIEW691=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createMaterializedViewStatement11048); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW691);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1898:41: ( ifNotExists )?
			int alt208=2;
			int LA208_0 = input.LA(1);
			if ( (LA208_0==KW_IF) ) {
				alt208=1;
			}
			switch (alt208) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1898:42: ifNotExists
					{
					pushFollow(FOLLOW_ifNotExists_in_createMaterializedViewStatement11051);
					ifNotExists692=ifNotExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists692.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableName_in_createMaterializedViewStatement11057);
			name=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(name.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1899:9: ( rewriteEnabled )?
			int alt209=2;
			int LA209_0 = input.LA(1);
			if ( (LA209_0==KW_ENABLE) ) {
				alt209=1;
			}
			switch (alt209) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1899:9: rewriteEnabled
					{
					pushFollow(FOLLOW_rewriteEnabled_in_createMaterializedViewStatement11067);
					rewriteEnabled693=rewriteEnabled();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rewriteEnabled.add(rewriteEnabled693.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1899:25: ( tableComment )?
			int alt210=2;
			int LA210_0 = input.LA(1);
			if ( (LA210_0==KW_COMMENT) ) {
				alt210=1;
			}
			switch (alt210) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1899:25: tableComment
					{
					pushFollow(FOLLOW_tableComment_in_createMaterializedViewStatement11070);
					tableComment694=tableComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableComment.add(tableComment694.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1899:39: ( tableRowFormat )?
			int alt211=2;
			int LA211_0 = input.LA(1);
			if ( (LA211_0==KW_ROW) ) {
				alt211=1;
			}
			switch (alt211) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1899:39: tableRowFormat
					{
					pushFollow(FOLLOW_tableRowFormat_in_createMaterializedViewStatement11073);
					tableRowFormat695=tableRowFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat695.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1899:55: ( tableFileFormat )?
			int alt212=2;
			int LA212_0 = input.LA(1);
			if ( (LA212_0==KW_STORED) ) {
				alt212=1;
			}
			switch (alt212) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1899:55: tableFileFormat
					{
					pushFollow(FOLLOW_tableFileFormat_in_createMaterializedViewStatement11076);
					tableFileFormat696=tableFileFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat696.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1899:72: ( tableLocation )?
			int alt213=2;
			int LA213_0 = input.LA(1);
			if ( (LA213_0==KW_LOCATION) ) {
				alt213=1;
			}
			switch (alt213) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1899:72: tableLocation
					{
					pushFollow(FOLLOW_tableLocation_in_createMaterializedViewStatement11079);
					tableLocation697=tableLocation();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableLocation.add(tableLocation697.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1900:9: ( tablePropertiesPrefixed )?
			int alt214=2;
			int LA214_0 = input.LA(1);
			if ( (LA214_0==KW_TBLPROPERTIES) ) {
				alt214=1;
			}
			switch (alt214) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1900:9: tablePropertiesPrefixed
					{
					pushFollow(FOLLOW_tablePropertiesPrefixed_in_createMaterializedViewStatement11090);
					tablePropertiesPrefixed698=tablePropertiesPrefixed();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed698.getTree());
					}
					break;

			}

			KW_AS699=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_createMaterializedViewStatement11093); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS699);

			pushFollow(FOLLOW_selectStatementWithCTE_in_createMaterializedViewStatement11095);
			selectStatementWithCTE700=selectStatementWithCTE();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectStatementWithCTE.add(selectStatementWithCTE700.getTree());
			// AST REWRITE
			// elements: rewriteEnabled, tablePropertiesPrefixed, selectStatementWithCTE, tableComment, tableRowFormat, tableFileFormat, name, ifNotExists, tableLocation
			// token labels: 
			// rule labels: name, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name",name!=null?name.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1901:5: -> ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteEnabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1901:8: ^( TOK_CREATE_MATERIALIZED_VIEW $name ( ifNotExists )? ( rewriteEnabled )? ( tableComment )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? selectStatementWithCTE )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CREATE_MATERIALIZED_VIEW, "TOK_CREATE_MATERIALIZED_VIEW"), root_1);
				adaptor.addChild(root_1, stream_name.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1902:10: ( ifNotExists )?
				if ( stream_ifNotExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifNotExists.nextTree());
				}
				stream_ifNotExists.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1903:10: ( rewriteEnabled )?
				if ( stream_rewriteEnabled.hasNext() ) {
					adaptor.addChild(root_1, stream_rewriteEnabled.nextTree());
				}
				stream_rewriteEnabled.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1904:10: ( tableComment )?
				if ( stream_tableComment.hasNext() ) {
					adaptor.addChild(root_1, stream_tableComment.nextTree());
				}
				stream_tableComment.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1905:10: ( tableRowFormat )?
				if ( stream_tableRowFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
				}
				stream_tableRowFormat.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1906:10: ( tableFileFormat )?
				if ( stream_tableFileFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
				}
				stream_tableFileFormat.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1907:10: ( tableLocation )?
				if ( stream_tableLocation.hasNext() ) {
					adaptor.addChild(root_1, stream_tableLocation.nextTree());
				}
				stream_tableLocation.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1908:10: ( tablePropertiesPrefixed )?
				if ( stream_tablePropertiesPrefixed.hasNext() ) {
					adaptor.addChild(root_1, stream_tablePropertiesPrefixed.nextTree());
				}
				stream_tablePropertiesPrefixed.reset();

				adaptor.addChild(root_1, stream_selectStatementWithCTE.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "createMaterializedViewStatement"


	public static class viewPartition_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "viewPartition"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1913:1: viewPartition : KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) ;
	public final HiveASTParser.viewPartition_return viewPartition() throws RecognitionException {
		HiveASTParser.viewPartition_return retval = new HiveASTParser.viewPartition_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_PARTITIONED701=null;
		Token KW_ON702=null;
		Token LPAREN703=null;
		Token RPAREN705=null;
		ParserRuleReturnScope columnNameList704 =null;

		HiveParserASTNode KW_PARTITIONED701_tree=null;
		HiveParserASTNode KW_ON702_tree=null;
		HiveParserASTNode LPAREN703_tree=null;
		HiveParserASTNode RPAREN705_tree=null;
		RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("view partition specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1916:5: ( KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1916:7: KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN
			{
			KW_PARTITIONED701=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_viewPartition11240); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED701);

			KW_ON702=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_viewPartition11242); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON702);

			LPAREN703=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewPartition11244); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN703);

			pushFollow(FOLLOW_columnNameList_in_viewPartition11246);
			columnNameList704=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameList.add(columnNameList704.getTree());
			RPAREN705=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewPartition11248); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN705);

			// AST REWRITE
			// elements: columnNameList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1917:5: -> ^( TOK_VIEWPARTCOLS columnNameList )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1917:8: ^( TOK_VIEWPARTCOLS columnNameList )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_VIEWPARTCOLS, "TOK_VIEWPARTCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "viewPartition"


	public static class dropViewStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropViewStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1920:1: dropViewStatement : KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) ;
	public final HiveASTParser.dropViewStatement_return dropViewStatement() throws RecognitionException {
		HiveASTParser.dropViewStatement_return retval = new HiveASTParser.dropViewStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_DROP706=null;
		Token KW_VIEW707=null;
		ParserRuleReturnScope ifExists708 =null;
		ParserRuleReturnScope viewName709 =null;

		HiveParserASTNode KW_DROP706_tree=null;
		HiveParserASTNode KW_VIEW707_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("drop view statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1923:5: ( KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1923:7: KW_DROP KW_VIEW ( ifExists )? viewName
			{
			KW_DROP706=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropViewStatement11287); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP706);

			KW_VIEW707=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropViewStatement11289); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW707);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1923:23: ( ifExists )?
			int alt215=2;
			int LA215_0 = input.LA(1);
			if ( (LA215_0==KW_IF) ) {
				alt215=1;
			}
			switch (alt215) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1923:23: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropViewStatement11291);
					ifExists708=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists708.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_viewName_in_dropViewStatement11294);
			viewName709=viewName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_viewName.add(viewName709.getTree());
			// AST REWRITE
			// elements: viewName, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1923:42: -> ^( TOK_DROPVIEW viewName ( ifExists )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1923:45: ^( TOK_DROPVIEW viewName ( ifExists )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DROPVIEW, "TOK_DROPVIEW"), root_1);
				adaptor.addChild(root_1, stream_viewName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1923:69: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropViewStatement"


	public static class dropMaterializedViewStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "dropMaterializedViewStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1926:1: dropMaterializedViewStatement : KW_DROP KW_MATERIALIZED KW_VIEW ( ifExists )? viewName -> ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? ) ;
	public final HiveASTParser.dropMaterializedViewStatement_return dropMaterializedViewStatement() throws RecognitionException {
		HiveASTParser.dropMaterializedViewStatement_return retval = new HiveASTParser.dropMaterializedViewStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_DROP710=null;
		Token KW_MATERIALIZED711=null;
		Token KW_VIEW712=null;
		ParserRuleReturnScope ifExists713 =null;
		ParserRuleReturnScope viewName714 =null;

		HiveParserASTNode KW_DROP710_tree=null;
		HiveParserASTNode KW_MATERIALIZED711_tree=null;
		HiveParserASTNode KW_VIEW712_tree=null;
		RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
		RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
		RewriteRuleTokenStream stream_KW_MATERIALIZED=new RewriteRuleTokenStream(adaptor,"token KW_MATERIALIZED");
		RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
		RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");

		 pushMsg("drop materialized view statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1929:5: ( KW_DROP KW_MATERIALIZED KW_VIEW ( ifExists )? viewName -> ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1929:7: KW_DROP KW_MATERIALIZED KW_VIEW ( ifExists )? viewName
			{
			KW_DROP710=(Token)match(input,KW_DROP,FOLLOW_KW_DROP_in_dropMaterializedViewStatement11332); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DROP.add(KW_DROP710);

			KW_MATERIALIZED711=(Token)match(input,KW_MATERIALIZED,FOLLOW_KW_MATERIALIZED_in_dropMaterializedViewStatement11334); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MATERIALIZED.add(KW_MATERIALIZED711);

			KW_VIEW712=(Token)match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropMaterializedViewStatement11336); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VIEW.add(KW_VIEW712);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1929:39: ( ifExists )?
			int alt216=2;
			int LA216_0 = input.LA(1);
			if ( (LA216_0==KW_IF) ) {
				alt216=1;
			}
			switch (alt216) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1929:39: ifExists
					{
					pushFollow(FOLLOW_ifExists_in_dropMaterializedViewStatement11338);
					ifExists713=ifExists();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_ifExists.add(ifExists713.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_viewName_in_dropMaterializedViewStatement11341);
			viewName714=viewName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_viewName.add(viewName714.getTree());
			// AST REWRITE
			// elements: viewName, ifExists
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1929:58: -> ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1929:61: ^( TOK_DROP_MATERIALIZED_VIEW viewName ( ifExists )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DROP_MATERIALIZED_VIEW, "TOK_DROP_MATERIALIZED_VIEW"), root_1);
				adaptor.addChild(root_1, stream_viewName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1929:99: ( ifExists )?
				if ( stream_ifExists.hasNext() ) {
					adaptor.addChild(root_1, stream_ifExists.nextTree());
				}
				stream_ifExists.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "dropMaterializedViewStatement"


	public static class showFunctionIdentifier_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "showFunctionIdentifier"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1932:1: showFunctionIdentifier : ( functionIdentifier | StringLiteral );
	public final HiveASTParser.showFunctionIdentifier_return showFunctionIdentifier() throws RecognitionException {
		HiveASTParser.showFunctionIdentifier_return retval = new HiveASTParser.showFunctionIdentifier_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token StringLiteral716=null;
		ParserRuleReturnScope functionIdentifier715 =null;

		HiveParserASTNode StringLiteral716_tree=null;

		 pushMsg("identifier for show function statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1935:5: ( functionIdentifier | StringLiteral )
			int alt217=2;
			int LA217_0 = input.LA(1);
			if ( (LA217_0==Identifier||(LA217_0 >= KW_ABORT && LA217_0 <= KW_AFTER)||LA217_0==KW_ANALYZE||LA217_0==KW_ARCHIVE||LA217_0==KW_ASC||(LA217_0 >= KW_AUTOCOMMIT && LA217_0 <= KW_BEFORE)||(LA217_0 >= KW_BUCKET && LA217_0 <= KW_BUCKETS)||(LA217_0 >= KW_CACHE && LA217_0 <= KW_CASCADE)||LA217_0==KW_CHANGE||(LA217_0 >= KW_CLUSTER && LA217_0 <= KW_COLLECTION)||(LA217_0 >= KW_COLUMNS && LA217_0 <= KW_COMMENT)||(LA217_0 >= KW_COMPACT && LA217_0 <= KW_CONCATENATE)||LA217_0==KW_CONTINUE||LA217_0==KW_DATA||LA217_0==KW_DATABASES||(LA217_0 >= KW_DATETIME && LA217_0 <= KW_DBPROPERTIES)||(LA217_0 >= KW_DEFERRED && LA217_0 <= KW_DEFINED)||(LA217_0 >= KW_DELIMITED && LA217_0 <= KW_DESC)||(LA217_0 >= KW_DETAIL && LA217_0 <= KW_DISABLE)||LA217_0==KW_DISTRIBUTE||LA217_0==KW_DOW||(LA217_0 >= KW_DUMP && LA217_0 <= KW_ELEM_TYPE)||LA217_0==KW_ENABLE||LA217_0==KW_ESCAPED||LA217_0==KW_EXCLUSIVE||(LA217_0 >= KW_EXPLAIN && LA217_0 <= KW_EXPRESSION)||(LA217_0 >= KW_FIELDS && LA217_0 <= KW_FIRST)||(LA217_0 >= KW_FORMAT && LA217_0 <= KW_FORMATTED)||LA217_0==KW_FUNCTIONS||(LA217_0 >= KW_HOUR && LA217_0 <= KW_IDXPROPERTIES)||(LA217_0 >= KW_INDEX && LA217_0 <= KW_INDEXES)||(LA217_0 >= KW_INPATH && LA217_0 <= KW_INPUTFORMAT)||(LA217_0 >= KW_ISOLATION && LA217_0 <= KW_JAR)||(LA217_0 >= KW_KEY && LA217_0 <= KW_LAST)||LA217_0==KW_LEVEL||(LA217_0 >= KW_LIMIT && LA217_0 <= KW_LOAD)||(LA217_0 >= KW_LOCATION && LA217_0 <= KW_LONG)||(LA217_0 >= KW_MAPJOIN && LA217_0 <= KW_MATERIALIZED)||LA217_0==KW_METADATA||(LA217_0 >= KW_MINUTE && LA217_0 <= KW_MONTH)||LA217_0==KW_MSCK||(LA217_0 >= KW_NORELY && LA217_0 <= KW_NOSCAN)||LA217_0==KW_NOVALIDATE||LA217_0==KW_NULLS||LA217_0==KW_OFFSET||(LA217_0 >= KW_OPERATOR && LA217_0 <= KW_OPTION)||(LA217_0 >= KW_OUTPUTDRIVER && LA217_0 <= KW_OUTPUTFORMAT)||(LA217_0 >= KW_OVERWRITE && LA217_0 <= KW_OWNER)||(LA217_0 >= KW_PARTITIONED && LA217_0 <= KW_PARTITIONS)||LA217_0==KW_PLUS||LA217_0==KW_PRETTY||LA217_0==KW_PRINCIPALS||(LA217_0 >= KW_PURGE && LA217_0 <= KW_QUARTER)||LA217_0==KW_READ||(LA217_0 >= KW_REBUILD && LA217_0 <= KW_RECORDWRITER)||(LA217_0 >= KW_RELOAD && LA217_0 <= KW_RESTRICT)||LA217_0==KW_REWRITE||(LA217_0 >= KW_ROLE && LA217_0 <= KW_ROLES)||(LA217_0 >= KW_SCHEMA && LA217_0 <= KW_SECOND)||(LA217_0 >= KW_SEMI && LA217_0 <= KW_SERVER)||(LA217_0 >= KW_SETS && LA217_0 <= KW_SKEWED)||(LA217_0 >= KW_SNAPSHOT && LA217_0 <= KW_SSL)||(LA217_0 >= KW_STATISTICS && LA217_0 <= KW_SUMMARY)||LA217_0==KW_TABLES||(LA217_0 >= KW_TBLPROPERTIES && LA217_0 <= KW_TERMINATED)||LA217_0==KW_TINYINT||(LA217_0 >= KW_TOUCH && LA217_0 <= KW_TRANSACTIONS)||LA217_0==KW_UNARCHIVE||LA217_0==KW_UNDO||LA217_0==KW_UNIONTYPE||(LA217_0 >= KW_UNLOCK && LA217_0 <= KW_UNSIGNED)||(LA217_0 >= KW_URI && LA217_0 <= KW_USE)||(LA217_0 >= KW_UTC && LA217_0 <= KW_VALIDATE)||LA217_0==KW_VALUE_TYPE||(LA217_0 >= KW_VECTORIZATION && LA217_0 <= KW_WEEK)||LA217_0==KW_WHILE||(LA217_0 >= KW_WORK && LA217_0 <= KW_YEAR)||LA217_0==KW_BATCH||LA217_0==KW_DAYOFWEEK||LA217_0==KW_HOLD_DDLTIME||LA217_0==KW_IGNORE||LA217_0==KW_NO_DROP||LA217_0==KW_OFFLINE||LA217_0==KW_PROTECTION||LA217_0==KW_READONLY) ) {
				alt217=1;
			}
			else if ( (LA217_0==StringLiteral) ) {
				alt217=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 217, 0, input);
				throw nvae;
			}

			switch (alt217) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1935:7: functionIdentifier
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_functionIdentifier_in_showFunctionIdentifier11379);
					functionIdentifier715=functionIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, functionIdentifier715.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1936:7: StringLiteral
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					StringLiteral716=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showFunctionIdentifier11387); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					StringLiteral716_tree = (HiveParserASTNode)adaptor.create(StringLiteral716);
					adaptor.addChild(root_0, StringLiteral716_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showFunctionIdentifier"


	public static class showStmtIdentifier_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "showStmtIdentifier"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1939:1: showStmtIdentifier : ( identifier | StringLiteral );
	public final HiveASTParser.showStmtIdentifier_return showStmtIdentifier() throws RecognitionException {
		HiveASTParser.showStmtIdentifier_return retval = new HiveASTParser.showStmtIdentifier_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token StringLiteral718=null;
		ParserRuleReturnScope identifier717 =null;

		HiveParserASTNode StringLiteral718_tree=null;

		 pushMsg("identifier for show statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1942:5: ( identifier | StringLiteral )
			int alt218=2;
			int LA218_0 = input.LA(1);
			if ( (LA218_0==Identifier||(LA218_0 >= KW_ABORT && LA218_0 <= KW_AFTER)||LA218_0==KW_ANALYZE||LA218_0==KW_ARCHIVE||LA218_0==KW_ASC||(LA218_0 >= KW_AUTOCOMMIT && LA218_0 <= KW_BEFORE)||(LA218_0 >= KW_BUCKET && LA218_0 <= KW_BUCKETS)||(LA218_0 >= KW_CACHE && LA218_0 <= KW_CASCADE)||LA218_0==KW_CHANGE||(LA218_0 >= KW_CLUSTER && LA218_0 <= KW_COLLECTION)||(LA218_0 >= KW_COLUMNS && LA218_0 <= KW_COMMENT)||(LA218_0 >= KW_COMPACT && LA218_0 <= KW_CONCATENATE)||LA218_0==KW_CONTINUE||LA218_0==KW_DATA||LA218_0==KW_DATABASES||(LA218_0 >= KW_DATETIME && LA218_0 <= KW_DBPROPERTIES)||(LA218_0 >= KW_DEFERRED && LA218_0 <= KW_DEFINED)||(LA218_0 >= KW_DELIMITED && LA218_0 <= KW_DESC)||(LA218_0 >= KW_DETAIL && LA218_0 <= KW_DISABLE)||LA218_0==KW_DISTRIBUTE||LA218_0==KW_DOW||(LA218_0 >= KW_DUMP && LA218_0 <= KW_ELEM_TYPE)||LA218_0==KW_ENABLE||LA218_0==KW_ESCAPED||LA218_0==KW_EXCLUSIVE||(LA218_0 >= KW_EXPLAIN && LA218_0 <= KW_EXPRESSION)||(LA218_0 >= KW_FIELDS && LA218_0 <= KW_FIRST)||(LA218_0 >= KW_FORMAT && LA218_0 <= KW_FORMATTED)||LA218_0==KW_FUNCTIONS||(LA218_0 >= KW_HOUR && LA218_0 <= KW_IDXPROPERTIES)||(LA218_0 >= KW_INDEX && LA218_0 <= KW_INDEXES)||(LA218_0 >= KW_INPATH && LA218_0 <= KW_INPUTFORMAT)||(LA218_0 >= KW_ISOLATION && LA218_0 <= KW_JAR)||(LA218_0 >= KW_KEY && LA218_0 <= KW_LAST)||LA218_0==KW_LEVEL||(LA218_0 >= KW_LIMIT && LA218_0 <= KW_LOAD)||(LA218_0 >= KW_LOCATION && LA218_0 <= KW_LONG)||(LA218_0 >= KW_MAPJOIN && LA218_0 <= KW_MATERIALIZED)||LA218_0==KW_METADATA||(LA218_0 >= KW_MINUTE && LA218_0 <= KW_MONTH)||LA218_0==KW_MSCK||(LA218_0 >= KW_NORELY && LA218_0 <= KW_NOSCAN)||LA218_0==KW_NOVALIDATE||LA218_0==KW_NULLS||LA218_0==KW_OFFSET||(LA218_0 >= KW_OPERATOR && LA218_0 <= KW_OPTION)||(LA218_0 >= KW_OUTPUTDRIVER && LA218_0 <= KW_OUTPUTFORMAT)||(LA218_0 >= KW_OVERWRITE && LA218_0 <= KW_OWNER)||(LA218_0 >= KW_PARTITIONED && LA218_0 <= KW_PARTITIONS)||LA218_0==KW_PLUS||LA218_0==KW_PRETTY||LA218_0==KW_PRINCIPALS||(LA218_0 >= KW_PURGE && LA218_0 <= KW_QUARTER)||LA218_0==KW_READ||(LA218_0 >= KW_REBUILD && LA218_0 <= KW_RECORDWRITER)||(LA218_0 >= KW_RELOAD && LA218_0 <= KW_RESTRICT)||LA218_0==KW_REWRITE||(LA218_0 >= KW_ROLE && LA218_0 <= KW_ROLES)||(LA218_0 >= KW_SCHEMA && LA218_0 <= KW_SECOND)||(LA218_0 >= KW_SEMI && LA218_0 <= KW_SERVER)||(LA218_0 >= KW_SETS && LA218_0 <= KW_SKEWED)||(LA218_0 >= KW_SNAPSHOT && LA218_0 <= KW_SSL)||(LA218_0 >= KW_STATISTICS && LA218_0 <= KW_SUMMARY)||LA218_0==KW_TABLES||(LA218_0 >= KW_TBLPROPERTIES && LA218_0 <= KW_TERMINATED)||LA218_0==KW_TINYINT||(LA218_0 >= KW_TOUCH && LA218_0 <= KW_TRANSACTIONS)||LA218_0==KW_UNARCHIVE||LA218_0==KW_UNDO||LA218_0==KW_UNIONTYPE||(LA218_0 >= KW_UNLOCK && LA218_0 <= KW_UNSIGNED)||(LA218_0 >= KW_URI && LA218_0 <= KW_USE)||(LA218_0 >= KW_UTC && LA218_0 <= KW_VALIDATE)||LA218_0==KW_VALUE_TYPE||(LA218_0 >= KW_VECTORIZATION && LA218_0 <= KW_WEEK)||LA218_0==KW_WHILE||(LA218_0 >= KW_WORK && LA218_0 <= KW_YEAR)||LA218_0==KW_BATCH||LA218_0==KW_DAYOFWEEK||LA218_0==KW_HOLD_DDLTIME||LA218_0==KW_IGNORE||LA218_0==KW_NO_DROP||LA218_0==KW_OFFLINE||LA218_0==KW_PROTECTION||LA218_0==KW_READONLY) ) {
				alt218=1;
			}
			else if ( (LA218_0==StringLiteral) ) {
				alt218=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 218, 0, input);
				throw nvae;
			}

			switch (alt218) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1942:7: identifier
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_identifier_in_showStmtIdentifier11414);
					identifier717=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier717.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1943:7: StringLiteral
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					StringLiteral718=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_showStmtIdentifier11422); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					StringLiteral718_tree = (HiveParserASTNode)adaptor.create(StringLiteral718);
					adaptor.addChild(root_0, StringLiteral718_tree);
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "showStmtIdentifier"


	public static class tableComment_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableComment"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1946:1: tableComment : KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) ;
	public final HiveASTParser.tableComment_return tableComment() throws RecognitionException {
		HiveASTParser.tableComment_return retval = new HiveASTParser.tableComment_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token comment=null;
		Token KW_COMMENT719=null;

		HiveParserASTNode comment_tree=null;
		HiveParserASTNode KW_COMMENT719_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

		 pushMsg("table's comment", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1949:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1950:7: KW_COMMENT comment= StringLiteral
			{
			KW_COMMENT719=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_tableComment11455); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT719);

			comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableComment11459); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

			// AST REWRITE
			// elements: comment
			// token labels: comment
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1950:41: -> ^( TOK_TABLECOMMENT $comment)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1950:44: ^( TOK_TABLECOMMENT $comment)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLECOMMENT, "TOK_TABLECOMMENT"), root_1);
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableComment"


	public static class tablePartition_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tablePartition"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1953:1: tablePartition : KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) ;
	public final HiveASTParser.tablePartition_return tablePartition() throws RecognitionException {
		HiveASTParser.tablePartition_return retval = new HiveASTParser.tablePartition_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_PARTITIONED720=null;
		Token KW_BY721=null;
		Token LPAREN722=null;
		Token RPAREN724=null;
		ParserRuleReturnScope columnNameTypeList723 =null;

		HiveParserASTNode KW_PARTITIONED720_tree=null;
		HiveParserASTNode KW_BY721_tree=null;
		HiveParserASTNode LPAREN722_tree=null;
		HiveParserASTNode RPAREN724_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");

		 pushMsg("table partition specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1956:5: ( KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1956:7: KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN
			{
			KW_PARTITIONED720=(Token)match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_tablePartition11496); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_PARTITIONED.add(KW_PARTITIONED720);

			KW_BY721=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tablePartition11498); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY721);

			LPAREN722=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tablePartition11500); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN722);

			pushFollow(FOLLOW_columnNameTypeList_in_tablePartition11502);
			columnNameTypeList723=columnNameTypeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameTypeList.add(columnNameTypeList723.getTree());
			RPAREN724=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tablePartition11504); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN724);

			// AST REWRITE
			// elements: columnNameTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1957:5: -> ^( TOK_TABLEPARTCOLS columnNameTypeList )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1957:8: ^( TOK_TABLEPARTCOLS columnNameTypeList )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEPARTCOLS, "TOK_TABLEPARTCOLS"), root_1);
				adaptor.addChild(root_1, stream_columnNameTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePartition"


	public static class tableBuckets_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableBuckets"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1960:1: tableBuckets : KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num) ;
	public final HiveASTParser.tableBuckets_return tableBuckets() throws RecognitionException {
		HiveASTParser.tableBuckets_return retval = new HiveASTParser.tableBuckets_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token num=null;
		Token KW_CLUSTERED725=null;
		Token KW_BY726=null;
		Token LPAREN727=null;
		Token RPAREN728=null;
		Token KW_SORTED729=null;
		Token KW_BY730=null;
		Token LPAREN731=null;
		Token RPAREN732=null;
		Token KW_INTO733=null;
		Token KW_BUCKETS734=null;
		ParserRuleReturnScope bucketCols =null;
		ParserRuleReturnScope sortCols =null;

		HiveParserASTNode num_tree=null;
		HiveParserASTNode KW_CLUSTERED725_tree=null;
		HiveParserASTNode KW_BY726_tree=null;
		HiveParserASTNode LPAREN727_tree=null;
		HiveParserASTNode RPAREN728_tree=null;
		HiveParserASTNode KW_SORTED729_tree=null;
		HiveParserASTNode KW_BY730_tree=null;
		HiveParserASTNode LPAREN731_tree=null;
		HiveParserASTNode RPAREN732_tree=null;
		HiveParserASTNode KW_INTO733_tree=null;
		HiveParserASTNode KW_BUCKETS734_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
		RewriteRuleSubtreeStream stream_columnNameOrderList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrderList");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("table buckets specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1963:5: ( KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1964:7: KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS
			{
			KW_CLUSTERED725=(Token)match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableBuckets11549); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CLUSTERED.add(KW_CLUSTERED725);

			KW_BY726=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets11551); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY726);

			LPAREN727=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets11553); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN727);

			pushFollow(FOLLOW_columnNameList_in_tableBuckets11557);
			bucketCols=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameList.add(bucketCols.getTree());
			RPAREN728=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets11559); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN728);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1964:66: ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )?
			int alt219=2;
			int LA219_0 = input.LA(1);
			if ( (LA219_0==KW_SORTED) ) {
				alt219=1;
			}
			switch (alt219) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1964:67: KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN
					{
					KW_SORTED729=(Token)match(input,KW_SORTED,FOLLOW_KW_SORTED_in_tableBuckets11562); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SORTED.add(KW_SORTED729);

					KW_BY730=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets11564); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY730);

					LPAREN731=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets11566); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN731);

					pushFollow(FOLLOW_columnNameOrderList_in_tableBuckets11570);
					sortCols=columnNameOrderList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameOrderList.add(sortCols.getTree());
					RPAREN732=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets11572); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN732);

					}
					break;

			}

			KW_INTO733=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_tableBuckets11576); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO733);

			num=(Token)match(input,Number,FOLLOW_Number_in_tableBuckets11580); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_Number.add(num);

			KW_BUCKETS734=(Token)match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableBuckets11582); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BUCKETS.add(KW_BUCKETS734);

			// AST REWRITE
			// elements: sortCols, bucketCols, num
			// token labels: num
			// rule labels: bucketCols, sortCols, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
			RewriteRuleSubtreeStream stream_bucketCols=new RewriteRuleSubtreeStream(adaptor,"rule bucketCols",bucketCols!=null?bucketCols.getTree():null);
			RewriteRuleSubtreeStream stream_sortCols=new RewriteRuleSubtreeStream(adaptor,"rule sortCols",sortCols!=null?sortCols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1965:5: -> ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1965:8: ^( TOK_ALTERTABLE_BUCKETS $bucketCols ( $sortCols)? $num)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ALTERTABLE_BUCKETS, "TOK_ALTERTABLE_BUCKETS"), root_1);
				adaptor.addChild(root_1, stream_bucketCols.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1965:46: ( $sortCols)?
				if ( stream_sortCols.hasNext() ) {
					adaptor.addChild(root_1, stream_sortCols.nextTree());
				}
				stream_sortCols.reset();

				adaptor.addChild(root_1, stream_num.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableBuckets"


	public static class tableSkewed_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableSkewed"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1968:1: tableSkewed : KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) ;
	public final HiveASTParser.tableSkewed_return tableSkewed() throws RecognitionException {
		HiveASTParser.tableSkewed_return retval = new HiveASTParser.tableSkewed_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SKEWED735=null;
		Token KW_BY736=null;
		Token LPAREN737=null;
		Token RPAREN738=null;
		Token KW_ON739=null;
		Token LPAREN740=null;
		Token RPAREN741=null;
		ParserRuleReturnScope skewedCols =null;
		ParserRuleReturnScope skewedValues =null;
		ParserRuleReturnScope storedAsDirs742 =null;

		HiveParserASTNode KW_SKEWED735_tree=null;
		HiveParserASTNode KW_BY736_tree=null;
		HiveParserASTNode LPAREN737_tree=null;
		HiveParserASTNode RPAREN738_tree=null;
		HiveParserASTNode KW_ON739_tree=null;
		HiveParserASTNode LPAREN740_tree=null;
		HiveParserASTNode RPAREN741_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleSubtreeStream stream_skewedValueElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueElement");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
		RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");

		 pushMsg("table skewed specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1971:5: ( KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1972:6: KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( ( storedAsDirs )=> storedAsDirs )?
			{
			KW_SKEWED735=(Token)match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_tableSkewed11634); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SKEWED.add(KW_SKEWED735);

			KW_BY736=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableSkewed11636); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY736);

			LPAREN737=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed11638); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN737);

			pushFollow(FOLLOW_columnNameList_in_tableSkewed11642);
			skewedCols=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameList.add(skewedCols.getTree());
			RPAREN738=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed11644); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN738);

			KW_ON739=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_tableSkewed11646); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON739);

			LPAREN740=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed11648); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN740);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1972:75: (skewedValues= skewedValueElement )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1972:76: skewedValues= skewedValueElement
			{
			pushFollow(FOLLOW_skewedValueElement_in_tableSkewed11653);
			skewedValues=skewedValueElement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedValueElement.add(skewedValues.getTree());
			}

			RPAREN741=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed11656); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN741);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1972:116: ( ( storedAsDirs )=> storedAsDirs )?
			int alt220=2;
			int LA220_0 = input.LA(1);
			if ( (LA220_0==KW_STORED) ) {
				int LA220_1 = input.LA(2);
				if ( (LA220_1==KW_AS) ) {
					int LA220_7 = input.LA(3);
					if ( (LA220_7==KW_DIRECTORIES) ) {
						int LA220_9 = input.LA(4);
						if ( (synpred17_HiveASTParser()) ) {
							alt220=1;
						}
					}
				}
			}
			switch (alt220) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1972:117: ( storedAsDirs )=> storedAsDirs
					{
					pushFollow(FOLLOW_storedAsDirs_in_tableSkewed11665);
					storedAsDirs742=storedAsDirs();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_storedAsDirs.add(storedAsDirs742.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: skewedCols, skewedValues, storedAsDirs
			// token labels: 
			// rule labels: skewedCols, skewedValues, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_skewedCols=new RewriteRuleSubtreeStream(adaptor,"rule skewedCols",skewedCols!=null?skewedCols.getTree():null);
			RewriteRuleSubtreeStream stream_skewedValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedValues",skewedValues!=null?skewedValues.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 1973:5: -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1973:8: ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLESKEWED, "TOK_TABLESKEWED"), root_1);
				adaptor.addChild(root_1, stream_skewedCols.nextTree());
				adaptor.addChild(root_1, stream_skewedValues.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1973:52: ( storedAsDirs )?
				if ( stream_storedAsDirs.hasNext() ) {
					adaptor.addChild(root_1, stream_storedAsDirs.nextTree());
				}
				stream_storedAsDirs.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableSkewed"


	public static class rowFormat_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "rowFormat"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1976:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );
	public final HiveASTParser.rowFormat_return rowFormat() throws RecognitionException {
		HiveASTParser.rowFormat_return retval = new HiveASTParser.rowFormat_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope rowFormatSerde743 =null;
		ParserRuleReturnScope rowFormatDelimited744 =null;

		RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
		RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");

		 pushMsg("serde specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1979:5: ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) )
			int alt221=3;
			int LA221_0 = input.LA(1);
			if ( (LA221_0==KW_ROW) ) {
				int LA221_1 = input.LA(2);
				if ( (LA221_1==KW_FORMAT) ) {
					int LA221_26 = input.LA(3);
					if ( (LA221_26==KW_SERDE) ) {
						alt221=1;
					}
					else if ( (LA221_26==KW_DELIMITED) ) {
						alt221=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 221, 26, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 221, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA221_0==EOF||LA221_0==KW_CLUSTER||LA221_0==KW_DISTRIBUTE||LA221_0==KW_EXCEPT||LA221_0==KW_FROM||LA221_0==KW_GROUP||LA221_0==KW_HAVING||LA221_0==KW_INSERT||LA221_0==KW_INTERSECT||LA221_0==KW_LATERAL||LA221_0==KW_LIMIT||LA221_0==KW_MAP||LA221_0==KW_MINUS||LA221_0==KW_ORDER||(LA221_0 >= KW_RECORDREADER && LA221_0 <= KW_REDUCE)||LA221_0==KW_SELECT||LA221_0==KW_SORT||LA221_0==KW_UNION||LA221_0==KW_USING||LA221_0==KW_WHERE||LA221_0==KW_WINDOW||LA221_0==RPAREN) ) {
				alt221=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 221, 0, input);
				throw nvae;
			}

			switch (alt221) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1979:7: rowFormatSerde
					{
					pushFollow(FOLLOW_rowFormatSerde_in_rowFormat11713);
					rowFormatSerde743=rowFormatSerde();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatSerde.add(rowFormatSerde743.getTree());
					// AST REWRITE
					// elements: rowFormatSerde
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1979:22: -> ^( TOK_SERDE rowFormatSerde )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1979:25: ^( TOK_SERDE rowFormatSerde )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1980:7: rowFormatDelimited
					{
					pushFollow(FOLLOW_rowFormatDelimited_in_rowFormat11729);
					rowFormatDelimited744=rowFormatDelimited();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatDelimited.add(rowFormatDelimited744.getTree());
					// AST REWRITE
					// elements: rowFormatDelimited
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1980:26: -> ^( TOK_SERDE rowFormatDelimited )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1980:29: ^( TOK_SERDE rowFormatDelimited )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1981:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1981:9: -> ^( TOK_SERDE )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1981:12: ^( TOK_SERDE )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormat"


	public static class recordReader_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "recordReader"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1984:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );
	public final HiveASTParser.recordReader_return recordReader() throws RecognitionException {
		HiveASTParser.recordReader_return retval = new HiveASTParser.recordReader_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_RECORDREADER745=null;
		Token StringLiteral746=null;

		HiveParserASTNode KW_RECORDREADER745_tree=null;
		HiveParserASTNode StringLiteral746_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_RECORDREADER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDREADER");

		 pushMsg("record reader specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1987:5: ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) )
			int alt222=2;
			int LA222_0 = input.LA(1);
			if ( (LA222_0==KW_RECORDREADER) ) {
				alt222=1;
			}
			else if ( (LA222_0==EOF||LA222_0==KW_CLUSTER||LA222_0==KW_DISTRIBUTE||LA222_0==KW_EXCEPT||LA222_0==KW_FROM||LA222_0==KW_GROUP||LA222_0==KW_HAVING||LA222_0==KW_INSERT||LA222_0==KW_INTERSECT||LA222_0==KW_LATERAL||LA222_0==KW_LIMIT||LA222_0==KW_MAP||LA222_0==KW_MINUS||LA222_0==KW_ORDER||LA222_0==KW_REDUCE||LA222_0==KW_SELECT||LA222_0==KW_SORT||LA222_0==KW_UNION||LA222_0==KW_WHERE||LA222_0==KW_WINDOW||LA222_0==RPAREN) ) {
				alt222=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 222, 0, input);
				throw nvae;
			}

			switch (alt222) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1987:7: KW_RECORDREADER StringLiteral
					{
					KW_RECORDREADER745=(Token)match(input,KW_RECORDREADER,FOLLOW_KW_RECORDREADER_in_recordReader11778); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RECORDREADER.add(KW_RECORDREADER745);

					StringLiteral746=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordReader11780); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral746);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1987:37: -> ^( TOK_RECORDREADER StringLiteral )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1987:40: ^( TOK_RECORDREADER StringLiteral )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1988:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1988:9: -> ^( TOK_RECORDREADER )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1988:12: ^( TOK_RECORDREADER )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "recordReader"


	public static class recordWriter_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "recordWriter"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1991:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );
	public final HiveASTParser.recordWriter_return recordWriter() throws RecognitionException {
		HiveASTParser.recordWriter_return retval = new HiveASTParser.recordWriter_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_RECORDWRITER747=null;
		Token StringLiteral748=null;

		HiveParserASTNode KW_RECORDWRITER747_tree=null;
		HiveParserASTNode StringLiteral748_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_RECORDWRITER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDWRITER");

		 pushMsg("record writer specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1994:5: ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) )
			int alt223=2;
			int LA223_0 = input.LA(1);
			if ( (LA223_0==KW_RECORDWRITER) ) {
				alt223=1;
			}
			else if ( (LA223_0==KW_USING) ) {
				alt223=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 223, 0, input);
				throw nvae;
			}

			switch (alt223) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1994:7: KW_RECORDWRITER StringLiteral
					{
					KW_RECORDWRITER747=(Token)match(input,KW_RECORDWRITER,FOLLOW_KW_RECORDWRITER_in_recordWriter11829); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RECORDWRITER.add(KW_RECORDWRITER747);

					StringLiteral748=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_recordWriter11831); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral748);

					// AST REWRITE
					// elements: StringLiteral
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1994:37: -> ^( TOK_RECORDWRITER StringLiteral )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1994:40: ^( TOK_RECORDWRITER StringLiteral )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1995:9: 
					{
					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 1995:9: -> ^( TOK_RECORDWRITER )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1995:12: ^( TOK_RECORDWRITER )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "recordWriter"


	public static class rowFormatSerde_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "rowFormatSerde"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1998:1: rowFormatSerde : KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) ;
	public final HiveASTParser.rowFormatSerde_return rowFormatSerde() throws RecognitionException {
		HiveASTParser.rowFormatSerde_return retval = new HiveASTParser.rowFormatSerde_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token name=null;
		Token KW_ROW749=null;
		Token KW_FORMAT750=null;
		Token KW_SERDE751=null;
		Token KW_WITH752=null;
		Token KW_SERDEPROPERTIES753=null;
		ParserRuleReturnScope serdeprops =null;

		HiveParserASTNode name_tree=null;
		HiveParserASTNode KW_ROW749_tree=null;
		HiveParserASTNode KW_FORMAT750_tree=null;
		HiveParserASTNode KW_SERDE751_tree=null;
		HiveParserASTNode KW_WITH752_tree=null;
		HiveParserASTNode KW_SERDEPROPERTIES753_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
		RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("serde format specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2001:5: ( KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2001:7: KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
			{
			KW_ROW749=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatSerde11880); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROW.add(KW_ROW749);

			KW_FORMAT750=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatSerde11882); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FORMAT.add(KW_FORMAT750);

			KW_SERDE751=(Token)match(input,KW_SERDE,FOLLOW_KW_SERDE_in_rowFormatSerde11884); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SERDE.add(KW_SERDE751);

			name=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_rowFormatSerde11888); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(name);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2001:52: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
			int alt224=2;
			int LA224_0 = input.LA(1);
			if ( (LA224_0==KW_WITH) ) {
				alt224=1;
			}
			switch (alt224) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2001:53: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
					{
					KW_WITH752=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_rowFormatSerde11891); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH752);

					KW_SERDEPROPERTIES753=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde11893); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES753);

					pushFollow(FOLLOW_tableProperties_in_rowFormatSerde11897);
					serdeprops=tableProperties();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableProperties.add(serdeprops.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: serdeprops, name
			// token labels: name
			// rule labels: serdeprops, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
			RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2002:5: -> ^( TOK_SERDENAME $name ( $serdeprops)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2002:8: ^( TOK_SERDENAME $name ( $serdeprops)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SERDENAME, "TOK_SERDENAME"), root_1);
				adaptor.addChild(root_1, stream_name.nextNode());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2002:31: ( $serdeprops)?
				if ( stream_serdeprops.hasNext() ) {
					adaptor.addChild(root_1, stream_serdeprops.nextTree());
				}
				stream_serdeprops.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormatSerde"


	public static class rowFormatDelimited_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "rowFormatDelimited"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2005:1: rowFormatDelimited : KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) ;
	public final HiveASTParser.rowFormatDelimited_return rowFormatDelimited() throws RecognitionException {
		HiveASTParser.rowFormatDelimited_return retval = new HiveASTParser.rowFormatDelimited_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ROW754=null;
		Token KW_FORMAT755=null;
		Token KW_DELIMITED756=null;
		ParserRuleReturnScope tableRowFormatFieldIdentifier757 =null;
		ParserRuleReturnScope tableRowFormatCollItemsIdentifier758 =null;
		ParserRuleReturnScope tableRowFormatMapKeysIdentifier759 =null;
		ParserRuleReturnScope tableRowFormatLinesIdentifier760 =null;
		ParserRuleReturnScope tableRowNullFormat761 =null;

		HiveParserASTNode KW_ROW754_tree=null;
		HiveParserASTNode KW_FORMAT755_tree=null;
		HiveParserASTNode KW_DELIMITED756_tree=null;
		RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
		RewriteRuleTokenStream stream_KW_DELIMITED=new RewriteRuleTokenStream(adaptor,"token KW_DELIMITED");
		RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
		RewriteRuleSubtreeStream stream_tableRowNullFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowNullFormat");
		RewriteRuleSubtreeStream stream_tableRowFormatFieldIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatFieldIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatCollItemsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatCollItemsIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatMapKeysIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatMapKeysIdentifier");
		RewriteRuleSubtreeStream stream_tableRowFormatLinesIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatLinesIdentifier");

		 pushMsg("serde properties specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2008:5: ( KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2009:7: KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )?
			{
			KW_ROW754=(Token)match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatDelimited11949); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROW.add(KW_ROW754);

			KW_FORMAT755=(Token)match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatDelimited11951); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FORMAT.add(KW_FORMAT755);

			KW_DELIMITED756=(Token)match(input,KW_DELIMITED,FOLLOW_KW_DELIMITED_in_rowFormatDelimited11953); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DELIMITED.add(KW_DELIMITED756);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2009:37: ( tableRowFormatFieldIdentifier )?
			int alt225=2;
			int LA225_0 = input.LA(1);
			if ( (LA225_0==KW_FIELDS) ) {
				alt225=1;
			}
			switch (alt225) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2009:37: tableRowFormatFieldIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited11955);
					tableRowFormatFieldIdentifier757=tableRowFormatFieldIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatFieldIdentifier.add(tableRowFormatFieldIdentifier757.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2009:68: ( tableRowFormatCollItemsIdentifier )?
			int alt226=2;
			int LA226_0 = input.LA(1);
			if ( (LA226_0==KW_COLLECTION) ) {
				alt226=1;
			}
			switch (alt226) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2009:68: tableRowFormatCollItemsIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited11958);
					tableRowFormatCollItemsIdentifier758=tableRowFormatCollItemsIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatCollItemsIdentifier.add(tableRowFormatCollItemsIdentifier758.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2009:103: ( tableRowFormatMapKeysIdentifier )?
			int alt227=2;
			alt227 = dfa227.predict(input);
			switch (alt227) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2009:103: tableRowFormatMapKeysIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited11961);
					tableRowFormatMapKeysIdentifier759=tableRowFormatMapKeysIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatMapKeysIdentifier.add(tableRowFormatMapKeysIdentifier759.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2009:136: ( tableRowFormatLinesIdentifier )?
			int alt228=2;
			int LA228_0 = input.LA(1);
			if ( (LA228_0==KW_LINES) ) {
				alt228=1;
			}
			switch (alt228) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2009:136: tableRowFormatLinesIdentifier
					{
					pushFollow(FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited11964);
					tableRowFormatLinesIdentifier760=tableRowFormatLinesIdentifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowFormatLinesIdentifier.add(tableRowFormatLinesIdentifier760.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2009:167: ( tableRowNullFormat )?
			int alt229=2;
			int LA229_0 = input.LA(1);
			if ( (LA229_0==KW_NULL) ) {
				alt229=1;
			}
			switch (alt229) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2009:167: tableRowNullFormat
					{
					pushFollow(FOLLOW_tableRowNullFormat_in_rowFormatDelimited11967);
					tableRowNullFormat761=tableRowNullFormat();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableRowNullFormat.add(tableRowNullFormat761.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableRowFormatLinesIdentifier, tableRowNullFormat, tableRowFormatFieldIdentifier, tableRowFormatCollItemsIdentifier, tableRowFormatMapKeysIdentifier
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2010:5: -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2010:8: ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ( tableRowNullFormat )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SERDEPROPS, "TOK_SERDEPROPS"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2010:25: ( tableRowFormatFieldIdentifier )?
				if ( stream_tableRowFormatFieldIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatFieldIdentifier.nextTree());
				}
				stream_tableRowFormatFieldIdentifier.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2010:56: ( tableRowFormatCollItemsIdentifier )?
				if ( stream_tableRowFormatCollItemsIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatCollItemsIdentifier.nextTree());
				}
				stream_tableRowFormatCollItemsIdentifier.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2010:91: ( tableRowFormatMapKeysIdentifier )?
				if ( stream_tableRowFormatMapKeysIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatMapKeysIdentifier.nextTree());
				}
				stream_tableRowFormatMapKeysIdentifier.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2010:124: ( tableRowFormatLinesIdentifier )?
				if ( stream_tableRowFormatLinesIdentifier.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowFormatLinesIdentifier.nextTree());
				}
				stream_tableRowFormatLinesIdentifier.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2010:155: ( tableRowNullFormat )?
				if ( stream_tableRowNullFormat.hasNext() ) {
					adaptor.addChild(root_1, stream_tableRowNullFormat.nextTree());
				}
				stream_tableRowNullFormat.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rowFormatDelimited"


	public static class tableRowFormat_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormat"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2013:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );
	public final HiveASTParser.tableRowFormat_return tableRowFormat() throws RecognitionException {
		HiveASTParser.tableRowFormat_return retval = new HiveASTParser.tableRowFormat_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope rowFormatDelimited762 =null;
		ParserRuleReturnScope rowFormatSerde763 =null;

		RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
		RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");

		 pushMsg("table row format specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2016:5: ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) )
			int alt230=2;
			int LA230_0 = input.LA(1);
			if ( (LA230_0==KW_ROW) ) {
				int LA230_1 = input.LA(2);
				if ( (LA230_1==KW_FORMAT) ) {
					int LA230_2 = input.LA(3);
					if ( (LA230_2==KW_DELIMITED) ) {
						alt230=1;
					}
					else if ( (LA230_2==KW_SERDE) ) {
						alt230=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 230, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 230, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 230, 0, input);
				throw nvae;
			}

			switch (alt230) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2017:7: rowFormatDelimited
					{
					pushFollow(FOLLOW_rowFormatDelimited_in_tableRowFormat12026);
					rowFormatDelimited762=rowFormatDelimited();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatDelimited.add(rowFormatDelimited762.getTree());
					// AST REWRITE
					// elements: rowFormatDelimited
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2018:5: -> ^( TOK_TABLEROWFORMAT rowFormatDelimited )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2018:8: ^( TOK_TABLEROWFORMAT rowFormatDelimited )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEROWFORMAT, "TOK_TABLEROWFORMAT"), root_1);
						adaptor.addChild(root_1, stream_rowFormatDelimited.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2019:7: rowFormatSerde
					{
					pushFollow(FOLLOW_rowFormatSerde_in_tableRowFormat12046);
					rowFormatSerde763=rowFormatSerde();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_rowFormatSerde.add(rowFormatSerde763.getTree());
					// AST REWRITE
					// elements: rowFormatSerde
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2020:5: -> ^( TOK_TABLESERIALIZER rowFormatSerde )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2020:8: ^( TOK_TABLESERIALIZER rowFormatSerde )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLESERIALIZER, "TOK_TABLESERIALIZER"), root_1);
						adaptor.addChild(root_1, stream_rowFormatSerde.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormat"


	public static class tablePropertiesPrefixed_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tablePropertiesPrefixed"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2023:1: tablePropertiesPrefixed : KW_TBLPROPERTIES ! tableProperties ;
	public final HiveASTParser.tablePropertiesPrefixed_return tablePropertiesPrefixed() throws RecognitionException {
		HiveASTParser.tablePropertiesPrefixed_return retval = new HiveASTParser.tablePropertiesPrefixed_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_TBLPROPERTIES764=null;
		ParserRuleReturnScope tableProperties765 =null;

		HiveParserASTNode KW_TBLPROPERTIES764_tree=null;

		 pushMsg("table properties with prefix", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2026:5: ( KW_TBLPROPERTIES ! tableProperties )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2027:9: KW_TBLPROPERTIES ! tableProperties
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			KW_TBLPROPERTIES764=(Token)match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed12093); if (state.failed) return retval;
			pushFollow(FOLLOW_tableProperties_in_tablePropertiesPrefixed12096);
			tableProperties765=tableProperties();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, tableProperties765.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePropertiesPrefixed"


	public static class tableProperties_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableProperties"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2030:1: tableProperties : LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) ;
	public final HiveASTParser.tableProperties_return tableProperties() throws RecognitionException {
		HiveASTParser.tableProperties_return retval = new HiveASTParser.tableProperties_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token LPAREN766=null;
		Token RPAREN768=null;
		ParserRuleReturnScope tablePropertiesList767 =null;

		HiveParserASTNode LPAREN766_tree=null;
		HiveParserASTNode RPAREN768_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_tablePropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesList");

		 pushMsg("table properties", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2033:5: ( LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2034:7: LPAREN tablePropertiesList RPAREN
			{
			LPAREN766=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_tableProperties12129); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN766);

			pushFollow(FOLLOW_tablePropertiesList_in_tableProperties12131);
			tablePropertiesList767=tablePropertiesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tablePropertiesList.add(tablePropertiesList767.getTree());
			RPAREN768=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_tableProperties12133); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN768);

			// AST REWRITE
			// elements: tablePropertiesList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2034:41: -> ^( TOK_TABLEPROPERTIES tablePropertiesList )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2034:44: ^( TOK_TABLEPROPERTIES tablePropertiesList )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEPROPERTIES, "TOK_TABLEPROPERTIES"), root_1);
				adaptor.addChild(root_1, stream_tablePropertiesList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableProperties"


	public static class tablePropertiesList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tablePropertiesList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2037:1: tablePropertiesList : ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) );
	public final HiveASTParser.tablePropertiesList_return tablePropertiesList() throws RecognitionException {
		HiveASTParser.tablePropertiesList_return retval = new HiveASTParser.tablePropertiesList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA770=null;
		Token COMMA773=null;
		ParserRuleReturnScope keyValueProperty769 =null;
		ParserRuleReturnScope keyValueProperty771 =null;
		ParserRuleReturnScope keyProperty772 =null;
		ParserRuleReturnScope keyProperty774 =null;

		HiveParserASTNode COMMA770_tree=null;
		HiveParserASTNode COMMA773_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
		RewriteRuleSubtreeStream stream_keyProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyProperty");

		 pushMsg("table properties list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2040:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) )
			int alt233=2;
			int LA233_0 = input.LA(1);
			if ( (LA233_0==StringLiteral) ) {
				int LA233_1 = input.LA(2);
				if ( (LA233_1==EQUAL) ) {
					alt233=1;
				}
				else if ( (LA233_1==COMMA||LA233_1==RPAREN) ) {
					alt233=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 233, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 233, 0, input);
				throw nvae;
			}

			switch (alt233) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2041:7: keyValueProperty ( COMMA keyValueProperty )*
					{
					pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList12174);
					keyValueProperty769=keyValueProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty769.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2041:24: ( COMMA keyValueProperty )*
					loop231:
					while (true) {
						int alt231=2;
						int LA231_0 = input.LA(1);
						if ( (LA231_0==COMMA) ) {
							alt231=1;
						}

						switch (alt231) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2041:25: COMMA keyValueProperty
							{
							COMMA770=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList12177); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA770);

							pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList12179);
							keyValueProperty771=keyValueProperty();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_keyValueProperty.add(keyValueProperty771.getTree());
							}
							break;

						default :
							break loop231;
						}
					}

					// AST REWRITE
					// elements: keyValueProperty
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2041:50: -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2041:53: ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);
						if ( !(stream_keyValueProperty.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_keyValueProperty.hasNext() ) {
							adaptor.addChild(root_1, stream_keyValueProperty.nextTree());
						}
						stream_keyValueProperty.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2043:7: keyProperty ( COMMA keyProperty )*
					{
					pushFollow(FOLLOW_keyProperty_in_tablePropertiesList12204);
					keyProperty772=keyProperty();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_keyProperty.add(keyProperty772.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2043:19: ( COMMA keyProperty )*
					loop232:
					while (true) {
						int alt232=2;
						int LA232_0 = input.LA(1);
						if ( (LA232_0==COMMA) ) {
							alt232=1;
						}

						switch (alt232) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2043:20: COMMA keyProperty
							{
							COMMA773=(Token)match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList12207); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA773);

							pushFollow(FOLLOW_keyProperty_in_tablePropertiesList12209);
							keyProperty774=keyProperty();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_keyProperty.add(keyProperty774.getTree());
							}
							break;

						default :
							break loop232;
						}
					}

					// AST REWRITE
					// elements: keyProperty
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2043:40: -> ^( TOK_TABLEPROPLIST ( keyProperty )+ )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2043:43: ^( TOK_TABLEPROPLIST ( keyProperty )+ )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);
						if ( !(stream_keyProperty.hasNext()) ) {
							throw new RewriteEarlyExitException();
						}
						while ( stream_keyProperty.hasNext() ) {
							adaptor.addChild(root_1, stream_keyProperty.nextTree());
						}
						stream_keyProperty.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tablePropertiesList"


	public static class keyValueProperty_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "keyValueProperty"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2046:1: keyValueProperty : key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) ;
	public final HiveASTParser.keyValueProperty_return keyValueProperty() throws RecognitionException {
		HiveASTParser.keyValueProperty_return retval = new HiveASTParser.keyValueProperty_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token key=null;
		Token value=null;
		Token EQUAL775=null;

		HiveParserASTNode key_tree=null;
		HiveParserASTNode value_tree=null;
		HiveParserASTNode EQUAL775_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

		 pushMsg("specifying key/value property", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2049:5: (key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2050:7: key= StringLiteral EQUAL value= StringLiteral
			{
			key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty12255); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(key);

			EQUAL775=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_keyValueProperty12257); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL775);

			value=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty12261); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(value);

			// AST REWRITE
			// elements: key, value
			// token labels: value, key
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
			RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2050:51: -> ^( TOK_TABLEPROPERTY $key $value)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2050:54: ^( TOK_TABLEPROPERTY $key $value)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);
				adaptor.addChild(root_1, stream_key.nextNode());
				adaptor.addChild(root_1, stream_value.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyValueProperty"


	public static class keyProperty_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "keyProperty"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2053:1: keyProperty : key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) ;
	public final HiveASTParser.keyProperty_return keyProperty() throws RecognitionException {
		HiveASTParser.keyProperty_return retval = new HiveASTParser.keyProperty_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token key=null;

		HiveParserASTNode key_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

		 pushMsg("specifying key property", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2056:5: (key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2057:7: key= StringLiteral
			{
			key=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_keyProperty12308); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(key);

			// AST REWRITE
			// elements: key
			// token labels: key
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2057:25: -> ^( TOK_TABLEPROPERTY $key TOK_NULL )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2057:28: ^( TOK_TABLEPROPERTY $key TOK_NULL )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);
				adaptor.addChild(root_1, stream_key.nextNode());
				adaptor.addChild(root_1, (HiveParserASTNode)adaptor.create(TOK_NULL, "TOK_NULL"));
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "keyProperty"


	public static class tableRowFormatFieldIdentifier_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatFieldIdentifier"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2060:1: tableRowFormatFieldIdentifier : KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) ;
	public final HiveASTParser.tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier() throws RecognitionException {
		HiveASTParser.tableRowFormatFieldIdentifier_return retval = new HiveASTParser.tableRowFormatFieldIdentifier_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token fldIdnt=null;
		Token fldEscape=null;
		Token KW_FIELDS776=null;
		Token KW_TERMINATED777=null;
		Token KW_BY778=null;
		Token KW_ESCAPED779=null;
		Token KW_BY780=null;

		HiveParserASTNode fldIdnt_tree=null;
		HiveParserASTNode fldEscape_tree=null;
		HiveParserASTNode KW_FIELDS776_tree=null;
		HiveParserASTNode KW_TERMINATED777_tree=null;
		HiveParserASTNode KW_BY778_tree=null;
		HiveParserASTNode KW_ESCAPED779_tree=null;
		HiveParserASTNode KW_BY780_tree=null;
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_ESCAPED=new RewriteRuleTokenStream(adaptor,"token KW_ESCAPED");
		RewriteRuleTokenStream stream_KW_FIELDS=new RewriteRuleTokenStream(adaptor,"token KW_FIELDS");

		 pushMsg("table row format's field separator", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2063:5: ( KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2064:7: KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
			{
			KW_FIELDS776=(Token)match(input,KW_FIELDS,FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier12352); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FIELDS.add(KW_FIELDS776);

			KW_TERMINATED777=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier12354); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED777);

			KW_BY778=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier12356); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY778);

			fldIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier12360); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(fldIdnt);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2064:59: ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
			int alt234=2;
			int LA234_0 = input.LA(1);
			if ( (LA234_0==KW_ESCAPED) ) {
				alt234=1;
			}
			switch (alt234) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2064:60: KW_ESCAPED KW_BY fldEscape= StringLiteral
					{
					KW_ESCAPED779=(Token)match(input,KW_ESCAPED,FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier12363); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ESCAPED.add(KW_ESCAPED779);

					KW_BY780=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier12365); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY780);

					fldEscape=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier12369); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(fldEscape);

					}
					break;

			}

			// AST REWRITE
			// elements: fldIdnt, fldEscape
			// token labels: fldIdnt, fldEscape
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_fldIdnt=new RewriteRuleTokenStream(adaptor,"token fldIdnt",fldIdnt);
			RewriteRuleTokenStream stream_fldEscape=new RewriteRuleTokenStream(adaptor,"token fldEscape",fldEscape);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2065:5: -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2065:8: ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEROWFORMATFIELD, "TOK_TABLEROWFORMATFIELD"), root_1);
				adaptor.addChild(root_1, stream_fldIdnt.nextNode());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2065:44: ( $fldEscape)?
				if ( stream_fldEscape.hasNext() ) {
					adaptor.addChild(root_1, stream_fldEscape.nextNode());
				}
				stream_fldEscape.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatFieldIdentifier"


	public static class tableRowFormatCollItemsIdentifier_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatCollItemsIdentifier"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2068:1: tableRowFormatCollItemsIdentifier : KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) ;
	public final HiveASTParser.tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier() throws RecognitionException {
		HiveASTParser.tableRowFormatCollItemsIdentifier_return retval = new HiveASTParser.tableRowFormatCollItemsIdentifier_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token collIdnt=null;
		Token KW_COLLECTION781=null;
		Token KW_ITEMS782=null;
		Token KW_TERMINATED783=null;
		Token KW_BY784=null;

		HiveParserASTNode collIdnt_tree=null;
		HiveParserASTNode KW_COLLECTION781_tree=null;
		HiveParserASTNode KW_ITEMS782_tree=null;
		HiveParserASTNode KW_TERMINATED783_tree=null;
		HiveParserASTNode KW_BY784_tree=null;
		RewriteRuleTokenStream stream_KW_COLLECTION=new RewriteRuleTokenStream(adaptor,"token KW_COLLECTION");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_ITEMS=new RewriteRuleTokenStream(adaptor,"token KW_ITEMS");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

		 pushMsg("table row format's column separator", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2071:5: ( KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2072:7: KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral
			{
			KW_COLLECTION781=(Token)match(input,KW_COLLECTION,FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier12421); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COLLECTION.add(KW_COLLECTION781);

			KW_ITEMS782=(Token)match(input,KW_ITEMS,FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier12423); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ITEMS.add(KW_ITEMS782);

			KW_TERMINATED783=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier12425); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED783);

			KW_BY784=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier12427); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY784);

			collIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier12431); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(collIdnt);

			// AST REWRITE
			// elements: collIdnt
			// token labels: collIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_collIdnt=new RewriteRuleTokenStream(adaptor,"token collIdnt",collIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2073:5: -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2073:8: ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEROWFORMATCOLLITEMS, "TOK_TABLEROWFORMATCOLLITEMS"), root_1);
				adaptor.addChild(root_1, stream_collIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatCollItemsIdentifier"


	public static class tableRowFormatMapKeysIdentifier_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatMapKeysIdentifier"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2076:1: tableRowFormatMapKeysIdentifier : KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) ;
	public final HiveASTParser.tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier() throws RecognitionException {
		HiveASTParser.tableRowFormatMapKeysIdentifier_return retval = new HiveASTParser.tableRowFormatMapKeysIdentifier_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token mapKeysIdnt=null;
		Token KW_MAP785=null;
		Token KW_KEYS786=null;
		Token KW_TERMINATED787=null;
		Token KW_BY788=null;

		HiveParserASTNode mapKeysIdnt_tree=null;
		HiveParserASTNode KW_MAP785_tree=null;
		HiveParserASTNode KW_KEYS786_tree=null;
		HiveParserASTNode KW_TERMINATED787_tree=null;
		HiveParserASTNode KW_BY788_tree=null;
		RewriteRuleTokenStream stream_KW_KEYS=new RewriteRuleTokenStream(adaptor,"token KW_KEYS");
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");

		 pushMsg("table row format's map key separator", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2079:5: ( KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2080:7: KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral
			{
			KW_MAP785=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier12477); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MAP.add(KW_MAP785);

			KW_KEYS786=(Token)match(input,KW_KEYS,FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier12479); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_KEYS.add(KW_KEYS786);

			KW_TERMINATED787=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier12481); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED787);

			KW_BY788=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier12483); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY788);

			mapKeysIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier12487); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(mapKeysIdnt);

			// AST REWRITE
			// elements: mapKeysIdnt
			// token labels: mapKeysIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_mapKeysIdnt=new RewriteRuleTokenStream(adaptor,"token mapKeysIdnt",mapKeysIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2081:5: -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2081:8: ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEROWFORMATMAPKEYS, "TOK_TABLEROWFORMATMAPKEYS"), root_1);
				adaptor.addChild(root_1, stream_mapKeysIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatMapKeysIdentifier"


	public static class tableRowFormatLinesIdentifier_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowFormatLinesIdentifier"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2084:1: tableRowFormatLinesIdentifier : KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) ;
	public final HiveASTParser.tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier() throws RecognitionException {
		HiveASTParser.tableRowFormatLinesIdentifier_return retval = new HiveASTParser.tableRowFormatLinesIdentifier_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token linesIdnt=null;
		Token KW_LINES789=null;
		Token KW_TERMINATED790=null;
		Token KW_BY791=null;

		HiveParserASTNode linesIdnt_tree=null;
		HiveParserASTNode KW_LINES789_tree=null;
		HiveParserASTNode KW_TERMINATED790_tree=null;
		HiveParserASTNode KW_BY791_tree=null;
		RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LINES=new RewriteRuleTokenStream(adaptor,"token KW_LINES");

		 pushMsg("table row format's line separator", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2087:5: ( KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2088:7: KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral
			{
			KW_LINES789=(Token)match(input,KW_LINES,FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier12533); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LINES.add(KW_LINES789);

			KW_TERMINATED790=(Token)match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier12535); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TERMINATED.add(KW_TERMINATED790);

			KW_BY791=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier12537); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY791);

			linesIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier12541); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(linesIdnt);

			// AST REWRITE
			// elements: linesIdnt
			// token labels: linesIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_linesIdnt=new RewriteRuleTokenStream(adaptor,"token linesIdnt",linesIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2089:5: -> ^( TOK_TABLEROWFORMATLINES $linesIdnt)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2089:8: ^( TOK_TABLEROWFORMATLINES $linesIdnt)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEROWFORMATLINES, "TOK_TABLEROWFORMATLINES"), root_1);
				adaptor.addChild(root_1, stream_linesIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowFormatLinesIdentifier"


	public static class tableRowNullFormat_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableRowNullFormat"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2092:1: tableRowNullFormat : KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) ;
	public final HiveASTParser.tableRowNullFormat_return tableRowNullFormat() throws RecognitionException {
		HiveASTParser.tableRowNullFormat_return retval = new HiveASTParser.tableRowNullFormat_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token nullIdnt=null;
		Token KW_NULL792=null;
		Token KW_DEFINED793=null;
		Token KW_AS794=null;

		HiveParserASTNode nullIdnt_tree=null;
		HiveParserASTNode KW_NULL792_tree=null;
		HiveParserASTNode KW_DEFINED793_tree=null;
		HiveParserASTNode KW_AS794_tree=null;
		RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_DEFINED=new RewriteRuleTokenStream(adaptor,"token KW_DEFINED");

		 pushMsg("table row format's null specifier", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2095:5: ( KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATNULL $nullIdnt) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2096:7: KW_NULL KW_DEFINED KW_AS nullIdnt= StringLiteral
			{
			KW_NULL792=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_tableRowNullFormat12587); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_NULL.add(KW_NULL792);

			KW_DEFINED793=(Token)match(input,KW_DEFINED,FOLLOW_KW_DEFINED_in_tableRowNullFormat12589); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DEFINED.add(KW_DEFINED793);

			KW_AS794=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableRowNullFormat12591); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS794);

			nullIdnt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowNullFormat12595); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(nullIdnt);

			// AST REWRITE
			// elements: nullIdnt
			// token labels: nullIdnt
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_nullIdnt=new RewriteRuleTokenStream(adaptor,"token nullIdnt",nullIdnt);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2097:5: -> ^( TOK_TABLEROWFORMATNULL $nullIdnt)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2097:8: ^( TOK_TABLEROWFORMATNULL $nullIdnt)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEROWFORMATNULL, "TOK_TABLEROWFORMATNULL"), root_1);
				adaptor.addChild(root_1, stream_nullIdnt.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableRowNullFormat"


	public static class tableFileFormat_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableFileFormat"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2099:1: tableFileFormat : ( ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
	public final HiveASTParser.tableFileFormat_return tableFileFormat() throws RecognitionException {
		HiveASTParser.tableFileFormat_return retval = new HiveASTParser.tableFileFormat_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token inFmt=null;
		Token outFmt=null;
		Token inDriver=null;
		Token outDriver=null;
		Token storageHandler=null;
		Token KW_STORED795=null;
		Token KW_AS796=null;
		Token KW_INPUTFORMAT797=null;
		Token KW_OUTPUTFORMAT798=null;
		Token KW_INPUTDRIVER799=null;
		Token KW_OUTPUTDRIVER800=null;
		Token KW_STORED801=null;
		Token KW_BY802=null;
		Token KW_WITH803=null;
		Token KW_SERDEPROPERTIES804=null;
		Token KW_STORED805=null;
		Token KW_AS806=null;
		ParserRuleReturnScope serdeprops =null;
		ParserRuleReturnScope genericSpec =null;

		HiveParserASTNode inFmt_tree=null;
		HiveParserASTNode outFmt_tree=null;
		HiveParserASTNode inDriver_tree=null;
		HiveParserASTNode outDriver_tree=null;
		HiveParserASTNode storageHandler_tree=null;
		HiveParserASTNode KW_STORED795_tree=null;
		HiveParserASTNode KW_AS796_tree=null;
		HiveParserASTNode KW_INPUTFORMAT797_tree=null;
		HiveParserASTNode KW_OUTPUTFORMAT798_tree=null;
		HiveParserASTNode KW_INPUTDRIVER799_tree=null;
		HiveParserASTNode KW_OUTPUTDRIVER800_tree=null;
		HiveParserASTNode KW_STORED801_tree=null;
		HiveParserASTNode KW_BY802_tree=null;
		HiveParserASTNode KW_WITH803_tree=null;
		HiveParserASTNode KW_SERDEPROPERTIES804_tree=null;
		HiveParserASTNode KW_STORED805_tree=null;
		HiveParserASTNode KW_AS806_tree=null;
		RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
		RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
		RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
		RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
		RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");

		 pushMsg("table file format specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2102:5: ( ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
			int alt237=3;
			int LA237_0 = input.LA(1);
			if ( (LA237_0==KW_STORED) ) {
				int LA237_1 = input.LA(2);
				if ( (LA237_1==KW_AS) ) {
					int LA237_2 = input.LA(3);
					if ( (LA237_2==KW_INPUTFORMAT) ) {
						int LA237_4 = input.LA(4);
						if ( (synpred18_HiveASTParser()) ) {
							alt237=1;
						}
						else if ( (true) ) {
							alt237=3;
						}

					}
					else if ( (LA237_2==Identifier||(LA237_2 >= KW_ABORT && LA237_2 <= KW_AFTER)||LA237_2==KW_ANALYZE||LA237_2==KW_ARCHIVE||LA237_2==KW_ASC||(LA237_2 >= KW_AUTOCOMMIT && LA237_2 <= KW_BEFORE)||(LA237_2 >= KW_BUCKET && LA237_2 <= KW_BUCKETS)||(LA237_2 >= KW_CACHE && LA237_2 <= KW_CASCADE)||LA237_2==KW_CHANGE||(LA237_2 >= KW_CLUSTER && LA237_2 <= KW_COLLECTION)||(LA237_2 >= KW_COLUMNS && LA237_2 <= KW_COMMENT)||(LA237_2 >= KW_COMPACT && LA237_2 <= KW_CONCATENATE)||LA237_2==KW_CONTINUE||LA237_2==KW_DATA||LA237_2==KW_DATABASES||(LA237_2 >= KW_DATETIME && LA237_2 <= KW_DBPROPERTIES)||(LA237_2 >= KW_DEFERRED && LA237_2 <= KW_DEFINED)||(LA237_2 >= KW_DELIMITED && LA237_2 <= KW_DESC)||(LA237_2 >= KW_DETAIL && LA237_2 <= KW_DISABLE)||LA237_2==KW_DISTRIBUTE||LA237_2==KW_DOW||(LA237_2 >= KW_DUMP && LA237_2 <= KW_ELEM_TYPE)||LA237_2==KW_ENABLE||LA237_2==KW_ESCAPED||LA237_2==KW_EXCLUSIVE||(LA237_2 >= KW_EXPLAIN && LA237_2 <= KW_EXPRESSION)||(LA237_2 >= KW_FIELDS && LA237_2 <= KW_FIRST)||(LA237_2 >= KW_FORMAT && LA237_2 <= KW_FORMATTED)||LA237_2==KW_FUNCTIONS||(LA237_2 >= KW_HOUR && LA237_2 <= KW_IDXPROPERTIES)||(LA237_2 >= KW_INDEX && LA237_2 <= KW_INDEXES)||(LA237_2 >= KW_INPATH && LA237_2 <= KW_INPUTDRIVER)||(LA237_2 >= KW_ISOLATION && LA237_2 <= KW_JAR)||(LA237_2 >= KW_KEY && LA237_2 <= KW_LAST)||LA237_2==KW_LEVEL||(LA237_2 >= KW_LIMIT && LA237_2 <= KW_LOAD)||(LA237_2 >= KW_LOCATION && LA237_2 <= KW_LONG)||(LA237_2 >= KW_MAPJOIN && LA237_2 <= KW_MATERIALIZED)||LA237_2==KW_METADATA||(LA237_2 >= KW_MINUTE && LA237_2 <= KW_MONTH)||LA237_2==KW_MSCK||(LA237_2 >= KW_NORELY && LA237_2 <= KW_NOSCAN)||LA237_2==KW_NOVALIDATE||LA237_2==KW_NULLS||LA237_2==KW_OFFSET||(LA237_2 >= KW_OPERATOR && LA237_2 <= KW_OPTION)||(LA237_2 >= KW_OUTPUTDRIVER && LA237_2 <= KW_OUTPUTFORMAT)||(LA237_2 >= KW_OVERWRITE && LA237_2 <= KW_OWNER)||(LA237_2 >= KW_PARTITIONED && LA237_2 <= KW_PARTITIONS)||LA237_2==KW_PLUS||LA237_2==KW_PRETTY||LA237_2==KW_PRINCIPALS||(LA237_2 >= KW_PURGE && LA237_2 <= KW_QUARTER)||LA237_2==KW_READ||(LA237_2 >= KW_REBUILD && LA237_2 <= KW_RECORDWRITER)||(LA237_2 >= KW_RELOAD && LA237_2 <= KW_RESTRICT)||LA237_2==KW_REWRITE||(LA237_2 >= KW_ROLE && LA237_2 <= KW_ROLES)||(LA237_2 >= KW_SCHEMA && LA237_2 <= KW_SECOND)||(LA237_2 >= KW_SEMI && LA237_2 <= KW_SERVER)||(LA237_2 >= KW_SETS && LA237_2 <= KW_SKEWED)||(LA237_2 >= KW_SNAPSHOT && LA237_2 <= KW_SSL)||(LA237_2 >= KW_STATISTICS && LA237_2 <= KW_SUMMARY)||LA237_2==KW_TABLES||(LA237_2 >= KW_TBLPROPERTIES && LA237_2 <= KW_TERMINATED)||LA237_2==KW_TINYINT||(LA237_2 >= KW_TOUCH && LA237_2 <= KW_TRANSACTIONS)||LA237_2==KW_UNARCHIVE||LA237_2==KW_UNDO||LA237_2==KW_UNIONTYPE||(LA237_2 >= KW_UNLOCK && LA237_2 <= KW_UNSIGNED)||(LA237_2 >= KW_URI && LA237_2 <= KW_USE)||(LA237_2 >= KW_UTC && LA237_2 <= KW_VALIDATE)||LA237_2==KW_VALUE_TYPE||(LA237_2 >= KW_VECTORIZATION && LA237_2 <= KW_WEEK)||LA237_2==KW_WHILE||(LA237_2 >= KW_WORK && LA237_2 <= KW_YEAR)||LA237_2==KW_BATCH||LA237_2==KW_DAYOFWEEK||LA237_2==KW_HOLD_DDLTIME||LA237_2==KW_IGNORE||LA237_2==KW_NO_DROP||LA237_2==KW_OFFLINE||LA237_2==KW_PROTECTION||LA237_2==KW_READONLY) ) {
						alt237=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 237, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( (LA237_1==KW_BY) ) {
					alt237=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 237, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 237, 0, input);
				throw nvae;
			}

			switch (alt237) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2103:7: ( KW_STORED KW_AS KW_INPUTFORMAT )=> KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					{
					KW_STORED795=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat12650); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED795);

					KW_AS796=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat12652); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS796);

					KW_INPUTFORMAT797=(Token)match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_tableFileFormat12654); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT797);

					inFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat12658); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(inFmt);

					KW_OUTPUTFORMAT798=(Token)match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat12660); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT798);

					outFmt=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat12664); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(outFmt);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2103:131: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
					int alt235=2;
					int LA235_0 = input.LA(1);
					if ( (LA235_0==KW_INPUTDRIVER) ) {
						alt235=1;
					}
					switch (alt235) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2103:132: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
							{
							KW_INPUTDRIVER799=(Token)match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_tableFileFormat12667); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER799);

							inDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat12671); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(inDriver);

							KW_OUTPUTDRIVER800=(Token)match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat12673); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER800);

							outDriver=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat12677); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_StringLiteral.add(outDriver);

							}
							break;

					}

					// AST REWRITE
					// elements: inFmt, outFmt, inDriver, outDriver
					// token labels: inFmt, inDriver, outDriver, outFmt
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
					RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
					RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
					RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2104:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2104:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);
						adaptor.addChild(root_1, stream_inFmt.nextNode());
						adaptor.addChild(root_1, stream_outFmt.nextNode());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2104:48: ( $inDriver)?
						if ( stream_inDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_inDriver.nextNode());
						}
						stream_inDriver.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2104:59: ( $outDriver)?
						if ( stream_outDriver.hasNext() ) {
							adaptor.addChild(root_1, stream_outDriver.nextNode());
						}
						stream_outDriver.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2105:9: KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
					{
					KW_STORED801=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat12715); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED801);

					KW_BY802=(Token)match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat12717); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BY.add(KW_BY802);

					storageHandler=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat12721); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(storageHandler);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2106:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
					int alt236=2;
					int LA236_0 = input.LA(1);
					if ( (LA236_0==KW_WITH) ) {
						alt236=1;
					}
					switch (alt236) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2106:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
							{
							KW_WITH803=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat12733); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH803);

							KW_SERDEPROPERTIES804=(Token)match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat12735); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES804);

							pushFollow(FOLLOW_tableProperties_in_tableFileFormat12739);
							serdeprops=tableProperties();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableProperties.add(serdeprops.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: storageHandler, serdeprops
					// token labels: storageHandler
					// rule labels: serdeprops, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_storageHandler=new RewriteRuleTokenStream(adaptor,"token storageHandler",storageHandler);
					RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"rule serdeprops",serdeprops!=null?serdeprops.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2107:7: -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2107:10: ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER"), root_1);
						adaptor.addChild(root_1, stream_storageHandler.nextNode());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2107:48: ( $serdeprops)?
						if ( stream_serdeprops.hasNext() ) {
							adaptor.addChild(root_1, stream_serdeprops.nextTree());
						}
						stream_serdeprops.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2108:9: KW_STORED KW_AS genericSpec= identifier
					{
					KW_STORED805=(Token)match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat12770); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STORED.add(KW_STORED805);

					KW_AS806=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat12772); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS806);

					pushFollow(FOLLOW_identifier_in_tableFileFormat12776);
					genericSpec=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(genericSpec.getTree());
					// AST REWRITE
					// elements: genericSpec
					// token labels: 
					// rule labels: genericSpec, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_genericSpec=new RewriteRuleSubtreeStream(adaptor,"rule genericSpec",genericSpec!=null?genericSpec.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2109:7: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2109:10: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);
						adaptor.addChild(root_1, stream_genericSpec.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableFileFormat"


	public static class tableLocation_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableLocation"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2112:1: tableLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) ;
	public final HiveASTParser.tableLocation_return tableLocation() throws RecognitionException {
		HiveASTParser.tableLocation_return retval = new HiveASTParser.tableLocation_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token locn=null;
		Token KW_LOCATION807=null;

		HiveParserASTNode locn_tree=null;
		HiveParserASTNode KW_LOCATION807_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

		 pushMsg("table location specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2115:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2116:7: KW_LOCATION locn= StringLiteral
			{
			KW_LOCATION807=(Token)match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_tableLocation12824); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LOCATION.add(KW_LOCATION807);

			locn=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_tableLocation12828); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_StringLiteral.add(locn);

			// AST REWRITE
			// elements: locn
			// token labels: locn
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2116:38: -> ^( TOK_TABLELOCATION $locn)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2116:41: ^( TOK_TABLELOCATION $locn)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABLELOCATION, "TOK_TABLELOCATION"), root_1);
				adaptor.addChild(root_1, stream_locn.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableLocation"


	public static class columnNameTypeList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2119:1: columnNameTypeList : columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) ;
	public final HiveASTParser.columnNameTypeList_return columnNameTypeList() throws RecognitionException {
		HiveASTParser.columnNameTypeList_return retval = new HiveASTParser.columnNameTypeList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA809=null;
		ParserRuleReturnScope columnNameType808 =null;
		ParserRuleReturnScope columnNameType810 =null;

		HiveParserASTNode COMMA809_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");

		 pushMsg("column name type list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2122:5: ( columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2122:7: columnNameType ( COMMA columnNameType )*
			{
			pushFollow(FOLLOW_columnNameType_in_columnNameTypeList12864);
			columnNameType808=columnNameType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType808.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2122:22: ( COMMA columnNameType )*
			loop238:
			while (true) {
				int alt238=2;
				int LA238_0 = input.LA(1);
				if ( (LA238_0==COMMA) ) {
					alt238=1;
				}

				switch (alt238) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2122:23: COMMA columnNameType
					{
					COMMA809=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeList12867); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA809);

					pushFollow(FOLLOW_columnNameType_in_columnNameTypeList12869);
					columnNameType810=columnNameType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameType.add(columnNameType810.getTree());
					}
					break;

				default :
					break loop238;
				}
			}

			// AST REWRITE
			// elements: columnNameType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2122:46: -> ^( TOK_TABCOLLIST ( columnNameType )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2122:49: ^( TOK_TABCOLLIST ( columnNameType )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameType.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameType.nextTree());
				}
				stream_columnNameType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeList"


	public static class columnNameTypeOrConstraintList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeOrConstraintList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2125:1: columnNameTypeOrConstraintList : columnNameTypeOrConstraint ( COMMA columnNameTypeOrConstraint )* -> ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ ) ;
	public final HiveASTParser.columnNameTypeOrConstraintList_return columnNameTypeOrConstraintList() throws RecognitionException {
		HiveASTParser.columnNameTypeOrConstraintList_return retval = new HiveASTParser.columnNameTypeOrConstraintList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA812=null;
		ParserRuleReturnScope columnNameTypeOrConstraint811 =null;
		ParserRuleReturnScope columnNameTypeOrConstraint813 =null;

		HiveParserASTNode COMMA812_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameTypeOrConstraint=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeOrConstraint");

		 pushMsg("column name type and constraints list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2128:5: ( columnNameTypeOrConstraint ( COMMA columnNameTypeOrConstraint )* -> ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2128:7: columnNameTypeOrConstraint ( COMMA columnNameTypeOrConstraint )*
			{
			pushFollow(FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList12907);
			columnNameTypeOrConstraint811=columnNameTypeOrConstraint();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameTypeOrConstraint.add(columnNameTypeOrConstraint811.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2128:34: ( COMMA columnNameTypeOrConstraint )*
			loop239:
			while (true) {
				int alt239=2;
				int LA239_0 = input.LA(1);
				if ( (LA239_0==COMMA) ) {
					alt239=1;
				}

				switch (alt239) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2128:35: COMMA columnNameTypeOrConstraint
					{
					COMMA812=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeOrConstraintList12910); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA812);

					pushFollow(FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList12912);
					columnNameTypeOrConstraint813=columnNameTypeOrConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameTypeOrConstraint.add(columnNameTypeOrConstraint813.getTree());
					}
					break;

				default :
					break loop239;
				}
			}

			// AST REWRITE
			// elements: columnNameTypeOrConstraint
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2128:70: -> ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2128:73: ^( TOK_TABCOLLIST ( columnNameTypeOrConstraint )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameTypeOrConstraint.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameTypeOrConstraint.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameTypeOrConstraint.nextTree());
				}
				stream_columnNameTypeOrConstraint.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeOrConstraintList"


	public static class columnNameColonTypeList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameColonTypeList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2131:1: columnNameColonTypeList : columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) ;
	public final HiveASTParser.columnNameColonTypeList_return columnNameColonTypeList() throws RecognitionException {
		HiveASTParser.columnNameColonTypeList_return retval = new HiveASTParser.columnNameColonTypeList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA815=null;
		ParserRuleReturnScope columnNameColonType814 =null;
		ParserRuleReturnScope columnNameColonType816 =null;

		HiveParserASTNode COMMA815_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameColonType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonType");

		 pushMsg("column name type list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2134:5: ( columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2134:7: columnNameColonType ( COMMA columnNameColonType )*
			{
			pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList12950);
			columnNameColonType814=columnNameColonType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameColonType.add(columnNameColonType814.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2134:27: ( COMMA columnNameColonType )*
			loop240:
			while (true) {
				int alt240=2;
				int LA240_0 = input.LA(1);
				if ( (LA240_0==COMMA) ) {
					alt240=1;
				}

				switch (alt240) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2134:28: COMMA columnNameColonType
					{
					COMMA815=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameColonTypeList12953); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA815);

					pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList12955);
					columnNameColonType816=columnNameColonType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameColonType.add(columnNameColonType816.getTree());
					}
					break;

				default :
					break loop240;
				}
			}

			// AST REWRITE
			// elements: columnNameColonType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2134:56: -> ^( TOK_TABCOLLIST ( columnNameColonType )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2134:59: ^( TOK_TABCOLLIST ( columnNameColonType )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);
				if ( !(stream_columnNameColonType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameColonType.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameColonType.nextTree());
				}
				stream_columnNameColonType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameColonTypeList"


	public static class columnNameList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2137:1: columnNameList : columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) ;
	public final HiveASTParser.columnNameList_return columnNameList() throws RecognitionException {
		HiveASTParser.columnNameList_return retval = new HiveASTParser.columnNameList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA818=null;
		ParserRuleReturnScope columnName817 =null;
		ParserRuleReturnScope columnName819 =null;

		HiveParserASTNode COMMA818_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");

		 pushMsg("column name list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2140:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2140:7: columnName ( COMMA columnName )*
			{
			pushFollow(FOLLOW_columnName_in_columnNameList12993);
			columnName817=columnName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnName.add(columnName817.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2140:18: ( COMMA columnName )*
			loop241:
			while (true) {
				int alt241=2;
				int LA241_0 = input.LA(1);
				if ( (LA241_0==COMMA) ) {
					alt241=1;
				}

				switch (alt241) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2140:19: COMMA columnName
					{
					COMMA818=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameList12996); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA818);

					pushFollow(FOLLOW_columnName_in_columnNameList12998);
					columnName819=columnName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnName.add(columnName819.getTree());
					}
					break;

				default :
					break loop241;
				}
			}

			// AST REWRITE
			// elements: columnName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2140:38: -> ^( TOK_TABCOLNAME ( columnName )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2140:41: ^( TOK_TABCOLNAME ( columnName )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnName.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnName.hasNext() ) {
					adaptor.addChild(root_1, stream_columnName.nextTree());
				}
				stream_columnName.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameList"


	public static class columnName_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnName"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2143:1: columnName : identifier ;
	public final HiveASTParser.columnName_return columnName() throws RecognitionException {
		HiveASTParser.columnName_return retval = new HiveASTParser.columnName_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope identifier820 =null;


		 pushMsg("column name", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2146:5: ( identifier )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2147:7: identifier
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_columnName13042);
			identifier820=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier820.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnName"


	public static class extColumnName_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "extColumnName"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2150:1: extColumnName : identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* ;
	public final HiveASTParser.extColumnName_return extColumnName() throws RecognitionException {
		HiveASTParser.extColumnName_return retval = new HiveASTParser.extColumnName_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token DOT822=null;
		Token KW_ELEM_TYPE823=null;
		Token KW_KEY_TYPE824=null;
		Token KW_VALUE_TYPE825=null;
		ParserRuleReturnScope identifier821 =null;
		ParserRuleReturnScope identifier826 =null;

		HiveParserASTNode DOT822_tree=null;
		HiveParserASTNode KW_ELEM_TYPE823_tree=null;
		HiveParserASTNode KW_KEY_TYPE824_tree=null;
		HiveParserASTNode KW_VALUE_TYPE825_tree=null;

		 pushMsg("column name for complex types", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2153:5: ( identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )* )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:7: identifier ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			pushFollow(FOLLOW_identifier_in_extColumnName13075);
			identifier821=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier821.getTree());

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:18: ( DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier ) )*
			loop243:
			while (true) {
				int alt243=2;
				int LA243_0 = input.LA(1);
				if ( (LA243_0==DOT) ) {
					alt243=1;
				}

				switch (alt243) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:19: DOT ^ ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
					{
					DOT822=(Token)match(input,DOT,FOLLOW_DOT_in_extColumnName13078); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOT822_tree = (HiveParserASTNode)adaptor.create(DOT822);
					root_0 = (HiveParserASTNode)adaptor.becomeRoot(DOT822_tree, root_0);
					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:24: ( ( KW_ELEM_TYPE )=> KW_ELEM_TYPE | ( KW_KEY_TYPE )=> KW_KEY_TYPE | ( KW_VALUE_TYPE )=> KW_VALUE_TYPE | identifier )
					int alt242=4;
					switch ( input.LA(1) ) {
					case KW_ELEM_TYPE:
						{
						int LA242_1 = input.LA(2);
						if ( (synpred19_HiveASTParser()) ) {
							alt242=1;
						}
						else if ( (true) ) {
							alt242=4;
						}

						}
						break;
					case KW_KEY_TYPE:
						{
						int LA242_2 = input.LA(2);
						if ( (synpred20_HiveASTParser()) ) {
							alt242=2;
						}
						else if ( (true) ) {
							alt242=4;
						}

						}
						break;
					case KW_VALUE_TYPE:
						{
						int LA242_3 = input.LA(2);
						if ( (synpred21_HiveASTParser()) ) {
							alt242=3;
						}
						else if ( (true) ) {
							alt242=4;
						}

						}
						break;
					case Identifier:
					case KW_ABORT:
					case KW_ADD:
					case KW_ADMIN:
					case KW_AFTER:
					case KW_ANALYZE:
					case KW_ARCHIVE:
					case KW_ASC:
					case KW_AUTOCOMMIT:
					case KW_BEFORE:
					case KW_BUCKET:
					case KW_BUCKETS:
					case KW_CACHE:
					case KW_CASCADE:
					case KW_CHANGE:
					case KW_CLUSTER:
					case KW_CLUSTERED:
					case KW_CLUSTERSTATUS:
					case KW_COLLECTION:
					case KW_COLUMNS:
					case KW_COMMENT:
					case KW_COMPACT:
					case KW_COMPACTIONS:
					case KW_COMPUTE:
					case KW_CONCATENATE:
					case KW_CONTINUE:
					case KW_DATA:
					case KW_DATABASES:
					case KW_DATETIME:
					case KW_DAY:
					case KW_DBPROPERTIES:
					case KW_DEFERRED:
					case KW_DEFINED:
					case KW_DELIMITED:
					case KW_DEPENDENCY:
					case KW_DESC:
					case KW_DETAIL:
					case KW_DIRECTORIES:
					case KW_DIRECTORY:
					case KW_DISABLE:
					case KW_DISTRIBUTE:
					case KW_DOW:
					case KW_DUMP:
					case KW_ENABLE:
					case KW_ESCAPED:
					case KW_EXCLUSIVE:
					case KW_EXPLAIN:
					case KW_EXPORT:
					case KW_EXPRESSION:
					case KW_FIELDS:
					case KW_FILE:
					case KW_FILEFORMAT:
					case KW_FIRST:
					case KW_FORMAT:
					case KW_FORMATTED:
					case KW_FUNCTIONS:
					case KW_HOUR:
					case KW_IDXPROPERTIES:
					case KW_INDEX:
					case KW_INDEXES:
					case KW_INPATH:
					case KW_INPUTDRIVER:
					case KW_INPUTFORMAT:
					case KW_ISOLATION:
					case KW_ITEMS:
					case KW_JAR:
					case KW_KEY:
					case KW_KEYS:
					case KW_LAST:
					case KW_LEVEL:
					case KW_LIMIT:
					case KW_LINES:
					case KW_LOAD:
					case KW_LOCATION:
					case KW_LOCK:
					case KW_LOCKS:
					case KW_LOGICAL:
					case KW_LONG:
					case KW_MAPJOIN:
					case KW_MATCHED:
					case KW_MATERIALIZED:
					case KW_METADATA:
					case KW_MINUTE:
					case KW_MONTH:
					case KW_MSCK:
					case KW_NORELY:
					case KW_NOSCAN:
					case KW_NOVALIDATE:
					case KW_NULLS:
					case KW_OFFSET:
					case KW_OPERATOR:
					case KW_OPTION:
					case KW_OUTPUTDRIVER:
					case KW_OUTPUTFORMAT:
					case KW_OVERWRITE:
					case KW_OWNER:
					case KW_PARTITIONED:
					case KW_PARTITIONS:
					case KW_PLUS:
					case KW_PRETTY:
					case KW_PRINCIPALS:
					case KW_PURGE:
					case KW_QUARTER:
					case KW_READ:
					case KW_REBUILD:
					case KW_RECORDREADER:
					case KW_RECORDWRITER:
					case KW_RELOAD:
					case KW_RELY:
					case KW_RENAME:
					case KW_REPAIR:
					case KW_REPL:
					case KW_REPLACE:
					case KW_REPLICATION:
					case KW_RESTRICT:
					case KW_REWRITE:
					case KW_ROLE:
					case KW_ROLES:
					case KW_SCHEMA:
					case KW_SCHEMAS:
					case KW_SECOND:
					case KW_SEMI:
					case KW_SERDE:
					case KW_SERDEPROPERTIES:
					case KW_SERVER:
					case KW_SETS:
					case KW_SHARED:
					case KW_SHOW:
					case KW_SHOW_DATABASE:
					case KW_SKEWED:
					case KW_SNAPSHOT:
					case KW_SORT:
					case KW_SORTED:
					case KW_SSL:
					case KW_STATISTICS:
					case KW_STATUS:
					case KW_STORED:
					case KW_STREAMTABLE:
					case KW_STRING:
					case KW_STRUCT:
					case KW_SUMMARY:
					case KW_TABLES:
					case KW_TBLPROPERTIES:
					case KW_TEMPORARY:
					case KW_TERMINATED:
					case KW_TINYINT:
					case KW_TOUCH:
					case KW_TRANSACTION:
					case KW_TRANSACTIONS:
					case KW_UNARCHIVE:
					case KW_UNDO:
					case KW_UNIONTYPE:
					case KW_UNLOCK:
					case KW_UNSET:
					case KW_UNSIGNED:
					case KW_URI:
					case KW_USE:
					case KW_UTC:
					case KW_UTCTIMESTAMP:
					case KW_VALIDATE:
					case KW_VECTORIZATION:
					case KW_VIEW:
					case KW_VIEWS:
					case KW_WAIT:
					case KW_WEEK:
					case KW_WHILE:
					case KW_WORK:
					case KW_WRITE:
					case KW_YEAR:
					case KW_BATCH:
					case KW_DAYOFWEEK:
					case KW_HOLD_DDLTIME:
					case KW_IGNORE:
					case KW_NO_DROP:
					case KW_OFFLINE:
					case KW_PROTECTION:
					case KW_READONLY:
						{
						alt242=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 242, 0, input);
						throw nvae;
					}
					switch (alt242) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:25: ( KW_ELEM_TYPE )=> KW_ELEM_TYPE
							{
							KW_ELEM_TYPE823=(Token)match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_extColumnName13088); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KW_ELEM_TYPE823_tree = (HiveParserASTNode)adaptor.create(KW_ELEM_TYPE823);
							adaptor.addChild(root_0, KW_ELEM_TYPE823_tree);
							}

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:58: ( KW_KEY_TYPE )=> KW_KEY_TYPE
							{
							KW_KEY_TYPE824=(Token)match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_extColumnName13098); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KW_KEY_TYPE824_tree = (HiveParserASTNode)adaptor.create(KW_KEY_TYPE824);
							adaptor.addChild(root_0, KW_KEY_TYPE824_tree);
							}

							}
							break;
						case 3 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:89: ( KW_VALUE_TYPE )=> KW_VALUE_TYPE
							{
							KW_VALUE_TYPE825=(Token)match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_extColumnName13108); if (state.failed) return retval;
							if ( state.backtracking==0 ) {
							KW_VALUE_TYPE825_tree = (HiveParserASTNode)adaptor.create(KW_VALUE_TYPE825);
							adaptor.addChild(root_0, KW_VALUE_TYPE825_tree);
							}

							}
							break;
						case 4 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:124: identifier
							{
							pushFollow(FOLLOW_identifier_in_extColumnName13112);
							identifier826=identifier();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) adaptor.addChild(root_0, identifier826.getTree());

							}
							break;

					}

					}
					break;

				default :
					break loop243;
				}
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "extColumnName"


	public static class columnNameOrderList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameOrderList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2157:1: columnNameOrderList : columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) ;
	public final HiveASTParser.columnNameOrderList_return columnNameOrderList() throws RecognitionException {
		HiveASTParser.columnNameOrderList_return retval = new HiveASTParser.columnNameOrderList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA828=null;
		ParserRuleReturnScope columnNameOrder827 =null;
		ParserRuleReturnScope columnNameOrder829 =null;

		HiveParserASTNode COMMA828_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrder");

		 pushMsg("column name order list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2160:5: ( columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2160:7: columnNameOrder ( COMMA columnNameOrder )*
			{
			pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList13142);
			columnNameOrder827=columnNameOrder();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameOrder.add(columnNameOrder827.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2160:23: ( COMMA columnNameOrder )*
			loop244:
			while (true) {
				int alt244=2;
				int LA244_0 = input.LA(1);
				if ( (LA244_0==COMMA) ) {
					alt244=1;
				}

				switch (alt244) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2160:24: COMMA columnNameOrder
					{
					COMMA828=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameOrderList13145); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA828);

					pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList13147);
					columnNameOrder829=columnNameOrder();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameOrder.add(columnNameOrder829.getTree());
					}
					break;

				default :
					break loop244;
				}
			}

			// AST REWRITE
			// elements: columnNameOrder
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2160:48: -> ^( TOK_TABCOLNAME ( columnNameOrder )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2160:51: ^( TOK_TABCOLNAME ( columnNameOrder )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnNameOrder.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameOrder.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameOrder.nextTree());
				}
				stream_columnNameOrder.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameOrderList"


	public static class columnParenthesesList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnParenthesesList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2163:1: columnParenthesesList : LPAREN ! columnNameList RPAREN !;
	public final HiveASTParser.columnParenthesesList_return columnParenthesesList() throws RecognitionException {
		HiveASTParser.columnParenthesesList_return retval = new HiveASTParser.columnParenthesesList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token LPAREN830=null;
		Token RPAREN832=null;
		ParserRuleReturnScope columnNameList831 =null;

		HiveParserASTNode LPAREN830_tree=null;
		HiveParserASTNode RPAREN832_tree=null;

		 pushMsg("column parentheses list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2166:5: ( LPAREN ! columnNameList RPAREN !)
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2166:7: LPAREN ! columnNameList RPAREN !
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			LPAREN830=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_columnParenthesesList13185); if (state.failed) return retval;
			pushFollow(FOLLOW_columnNameList_in_columnParenthesesList13188);
			columnNameList831=columnNameList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, columnNameList831.getTree());

			RPAREN832=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_columnParenthesesList13190); if (state.failed) return retval;
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnParenthesesList"


	public static class enableValidateSpecification_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "enableValidateSpecification"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2169:1: enableValidateSpecification : enableSpecification ( validateSpecification )? ;
	public final HiveASTParser.enableValidateSpecification_return enableValidateSpecification() throws RecognitionException {
		HiveASTParser.enableValidateSpecification_return retval = new HiveASTParser.enableValidateSpecification_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope enableSpecification833 =null;
		ParserRuleReturnScope validateSpecification834 =null;


		 pushMsg("enable specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2172:5: ( enableSpecification ( validateSpecification )? )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2172:7: enableSpecification ( validateSpecification )?
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			pushFollow(FOLLOW_enableSpecification_in_enableValidateSpecification13218);
			enableSpecification833=enableSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, enableSpecification833.getTree());

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2172:27: ( validateSpecification )?
			int alt245=2;
			int LA245_0 = input.LA(1);
			if ( (LA245_0==KW_NOVALIDATE||LA245_0==KW_VALIDATE) ) {
				alt245=1;
			}
			switch (alt245) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2172:27: validateSpecification
					{
					pushFollow(FOLLOW_validateSpecification_in_enableValidateSpecification13220);
					validateSpecification834=validateSpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, validateSpecification834.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "enableValidateSpecification"


	public static class enableSpecification_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "enableSpecification"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2175:1: enableSpecification : ( KW_ENABLE -> ^( TOK_ENABLE ) | KW_DISABLE -> ^( TOK_DISABLE ) );
	public final HiveASTParser.enableSpecification_return enableSpecification() throws RecognitionException {
		HiveASTParser.enableSpecification_return retval = new HiveASTParser.enableSpecification_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ENABLE835=null;
		Token KW_DISABLE836=null;

		HiveParserASTNode KW_ENABLE835_tree=null;
		HiveParserASTNode KW_DISABLE836_tree=null;
		RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
		RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");

		 pushMsg("enable specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2178:5: ( KW_ENABLE -> ^( TOK_ENABLE ) | KW_DISABLE -> ^( TOK_DISABLE ) )
			int alt246=2;
			int LA246_0 = input.LA(1);
			if ( (LA246_0==KW_ENABLE) ) {
				alt246=1;
			}
			else if ( (LA246_0==KW_DISABLE) ) {
				alt246=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 246, 0, input);
				throw nvae;
			}

			switch (alt246) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2178:7: KW_ENABLE
					{
					KW_ENABLE835=(Token)match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_enableSpecification13248); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ENABLE.add(KW_ENABLE835);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2178:17: -> ^( TOK_ENABLE )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2178:20: ^( TOK_ENABLE )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ENABLE, "TOK_ENABLE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2179:7: KW_DISABLE
					{
					KW_DISABLE836=(Token)match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_enableSpecification13262); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DISABLE.add(KW_DISABLE836);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2179:18: -> ^( TOK_DISABLE )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2179:21: ^( TOK_DISABLE )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DISABLE, "TOK_DISABLE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "enableSpecification"


	public static class validateSpecification_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "validateSpecification"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2182:1: validateSpecification : ( KW_VALIDATE -> ^( TOK_VALIDATE ) | KW_NOVALIDATE -> ^( TOK_NOVALIDATE ) );
	public final HiveASTParser.validateSpecification_return validateSpecification() throws RecognitionException {
		HiveASTParser.validateSpecification_return retval = new HiveASTParser.validateSpecification_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_VALIDATE837=null;
		Token KW_NOVALIDATE838=null;

		HiveParserASTNode KW_VALIDATE837_tree=null;
		HiveParserASTNode KW_NOVALIDATE838_tree=null;
		RewriteRuleTokenStream stream_KW_VALIDATE=new RewriteRuleTokenStream(adaptor,"token KW_VALIDATE");
		RewriteRuleTokenStream stream_KW_NOVALIDATE=new RewriteRuleTokenStream(adaptor,"token KW_NOVALIDATE");

		 pushMsg("validate specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2185:5: ( KW_VALIDATE -> ^( TOK_VALIDATE ) | KW_NOVALIDATE -> ^( TOK_NOVALIDATE ) )
			int alt247=2;
			int LA247_0 = input.LA(1);
			if ( (LA247_0==KW_VALIDATE) ) {
				alt247=1;
			}
			else if ( (LA247_0==KW_NOVALIDATE) ) {
				alt247=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 247, 0, input);
				throw nvae;
			}

			switch (alt247) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2185:7: KW_VALIDATE
					{
					KW_VALIDATE837=(Token)match(input,KW_VALIDATE,FOLLOW_KW_VALIDATE_in_validateSpecification13295); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VALIDATE.add(KW_VALIDATE837);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2185:19: -> ^( TOK_VALIDATE )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2185:22: ^( TOK_VALIDATE )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_VALIDATE, "TOK_VALIDATE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2186:7: KW_NOVALIDATE
					{
					KW_NOVALIDATE838=(Token)match(input,KW_NOVALIDATE,FOLLOW_KW_NOVALIDATE_in_validateSpecification13309); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOVALIDATE.add(KW_NOVALIDATE838);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2186:21: -> ^( TOK_NOVALIDATE )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2186:24: ^( TOK_NOVALIDATE )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NOVALIDATE, "TOK_NOVALIDATE"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "validateSpecification"


	public static class relySpecification_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "relySpecification"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2189:1: relySpecification : ( KW_RELY -> ^( TOK_RELY ) | ( KW_NORELY )? -> ^( TOK_NORELY ) );
	public final HiveASTParser.relySpecification_return relySpecification() throws RecognitionException {
		HiveASTParser.relySpecification_return retval = new HiveASTParser.relySpecification_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_RELY839=null;
		Token KW_NORELY840=null;

		HiveParserASTNode KW_RELY839_tree=null;
		HiveParserASTNode KW_NORELY840_tree=null;
		RewriteRuleTokenStream stream_KW_NORELY=new RewriteRuleTokenStream(adaptor,"token KW_NORELY");
		RewriteRuleTokenStream stream_KW_RELY=new RewriteRuleTokenStream(adaptor,"token KW_RELY");

		 pushMsg("rely specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2192:5: ( KW_RELY -> ^( TOK_RELY ) | ( KW_NORELY )? -> ^( TOK_NORELY ) )
			int alt249=2;
			int LA249_0 = input.LA(1);
			if ( (LA249_0==KW_RELY) ) {
				alt249=1;
			}
			else if ( (LA249_0==EOF||LA249_0==COMMA||LA249_0==KW_AFTER||LA249_0==KW_CASCADE||LA249_0==KW_COMMENT||LA249_0==KW_FIRST||LA249_0==KW_NORELY||LA249_0==KW_RESTRICT||LA249_0==RPAREN) ) {
				alt249=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 249, 0, input);
				throw nvae;
			}

			switch (alt249) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2192:8: KW_RELY
					{
					KW_RELY839=(Token)match(input,KW_RELY,FOLLOW_KW_RELY_in_relySpecification13343); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_RELY.add(KW_RELY839);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2192:16: -> ^( TOK_RELY )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2192:19: ^( TOK_RELY )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_RELY, "TOK_RELY"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2193:8: ( KW_NORELY )?
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2193:8: ( KW_NORELY )?
					int alt248=2;
					int LA248_0 = input.LA(1);
					if ( (LA248_0==KW_NORELY) ) {
						alt248=1;
					}
					switch (alt248) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2193:9: KW_NORELY
							{
							KW_NORELY840=(Token)match(input,KW_NORELY,FOLLOW_KW_NORELY_in_relySpecification13359); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_NORELY.add(KW_NORELY840);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2193:21: -> ^( TOK_NORELY )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2193:24: ^( TOK_NORELY )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NORELY, "TOK_NORELY"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "relySpecification"


	public static class tableConstraint_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableConstraint"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2196:1: tableConstraint : ( KW_CONSTRAINT constraintName= identifier )? tableConstraintType pkCols= columnParenthesesList constraintTraits -> {$constraintName.tree != null}? ^( tableConstraintType $pkCols ^( TOK_CONSTRAINT_NAME $constraintName) constraintTraits ) -> ^( tableConstraintType $pkCols constraintTraits ) ;
	public final HiveASTParser.tableConstraint_return tableConstraint() throws RecognitionException {
		HiveASTParser.tableConstraint_return retval = new HiveASTParser.tableConstraint_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_CONSTRAINT841=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope pkCols =null;
		ParserRuleReturnScope tableConstraintType842 =null;
		ParserRuleReturnScope constraintTraits843 =null;

		HiveParserASTNode KW_CONSTRAINT841_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
		RewriteRuleSubtreeStream stream_constraintTraits=new RewriteRuleSubtreeStream(adaptor,"rule constraintTraits");
		RewriteRuleSubtreeStream stream_tableConstraintType=new RewriteRuleSubtreeStream(adaptor,"rule tableConstraintType");

		 pushMsg("pk or uk or nn constraint", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2199:5: ( ( KW_CONSTRAINT constraintName= identifier )? tableConstraintType pkCols= columnParenthesesList constraintTraits -> {$constraintName.tree != null}? ^( tableConstraintType $pkCols ^( TOK_CONSTRAINT_NAME $constraintName) constraintTraits ) -> ^( tableConstraintType $pkCols constraintTraits ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2199:7: ( KW_CONSTRAINT constraintName= identifier )? tableConstraintType pkCols= columnParenthesesList constraintTraits
			{
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2199:7: ( KW_CONSTRAINT constraintName= identifier )?
			int alt250=2;
			int LA250_0 = input.LA(1);
			if ( (LA250_0==KW_CONSTRAINT) ) {
				alt250=1;
			}
			switch (alt250) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2199:8: KW_CONSTRAINT constraintName= identifier
					{
					KW_CONSTRAINT841=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_tableConstraint13395); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT841);

					pushFollow(FOLLOW_identifier_in_tableConstraint13399);
					constraintName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_tableConstraintType_in_tableConstraint13403);
			tableConstraintType842=tableConstraintType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableConstraintType.add(tableConstraintType842.getTree());
			pushFollow(FOLLOW_columnParenthesesList_in_tableConstraint13407);
			pkCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(pkCols.getTree());
			pushFollow(FOLLOW_constraintTraits_in_tableConstraint13409);
			constraintTraits843=constraintTraits();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constraintTraits.add(constraintTraits843.getTree());
			// AST REWRITE
			// elements: tableConstraintType, pkCols, constraintName, pkCols, constraintTraits, tableConstraintType, constraintTraits
			// token labels: 
			// rule labels: constraintName, pkCols, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_pkCols=new RewriteRuleSubtreeStream(adaptor,"rule pkCols",pkCols!=null?pkCols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2200:5: -> {$constraintName.tree != null}? ^( tableConstraintType $pkCols ^( TOK_CONSTRAINT_NAME $constraintName) constraintTraits )
			if ((constraintName!=null?((HiveParserASTNode)constraintName.getTree()):null) != null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2201:13: ^( tableConstraintType $pkCols ^( TOK_CONSTRAINT_NAME $constraintName) constraintTraits )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot(stream_tableConstraintType.nextNode(), root_1);
				adaptor.addChild(root_1, stream_pkCols.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2201:43: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_constraintTraits.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2202:5: -> ^( tableConstraintType $pkCols constraintTraits )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2202:8: ^( tableConstraintType $pkCols constraintTraits )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot(stream_tableConstraintType.nextNode(), root_1);
				adaptor.addChild(root_1, stream_pkCols.nextTree());
				adaptor.addChild(root_1, stream_constraintTraits.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableConstraint"


	public static class alterConstraintWithName_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterConstraintWithName"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2205:1: alterConstraintWithName : KW_CONSTRAINT constraintName= identifier tableConstraintType pkCols= columnParenthesesList ( constraintOptsAlter )? -> ^( tableConstraintType $pkCols ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) ;
	public final HiveASTParser.alterConstraintWithName_return alterConstraintWithName() throws RecognitionException {
		HiveASTParser.alterConstraintWithName_return retval = new HiveASTParser.alterConstraintWithName_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_CONSTRAINT844=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope pkCols =null;
		ParserRuleReturnScope tableConstraintType845 =null;
		ParserRuleReturnScope constraintOptsAlter846 =null;

		HiveParserASTNode KW_CONSTRAINT844_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");
		RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
		RewriteRuleSubtreeStream stream_tableConstraintType=new RewriteRuleSubtreeStream(adaptor,"rule tableConstraintType");

		 pushMsg("pk or uk or nn constraint with name", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2208:5: ( KW_CONSTRAINT constraintName= identifier tableConstraintType pkCols= columnParenthesesList ( constraintOptsAlter )? -> ^( tableConstraintType $pkCols ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2208:7: KW_CONSTRAINT constraintName= identifier tableConstraintType pkCols= columnParenthesesList ( constraintOptsAlter )?
			{
			KW_CONSTRAINT844=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterConstraintWithName13487); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT844);

			pushFollow(FOLLOW_identifier_in_alterConstraintWithName13491);
			constraintName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
			pushFollow(FOLLOW_tableConstraintType_in_alterConstraintWithName13493);
			tableConstraintType845=tableConstraintType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableConstraintType.add(tableConstraintType845.getTree());
			pushFollow(FOLLOW_columnParenthesesList_in_alterConstraintWithName13497);
			pkCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(pkCols.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2208:96: ( constraintOptsAlter )?
			int alt251=2;
			int LA251_0 = input.LA(1);
			if ( (LA251_0==KW_DISABLE||LA251_0==KW_ENABLE) ) {
				alt251=1;
			}
			switch (alt251) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2208:96: constraintOptsAlter
					{
					pushFollow(FOLLOW_constraintOptsAlter_in_alterConstraintWithName13499);
					constraintOptsAlter846=constraintOptsAlter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter846.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: constraintName, pkCols, constraintOptsAlter, tableConstraintType
			// token labels: 
			// rule labels: constraintName, pkCols, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_pkCols=new RewriteRuleSubtreeStream(adaptor,"rule pkCols",pkCols!=null?pkCols.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2209:5: -> ^( tableConstraintType $pkCols ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2209:8: ^( tableConstraintType $pkCols ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot(stream_tableConstraintType.nextNode(), root_1);
				adaptor.addChild(root_1, stream_pkCols.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2209:38: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2209:77: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterConstraintWithName"


	public static class alterForeignKeyWithName_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterForeignKeyWithName"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2212:1: alterForeignKeyWithName : KW_CONSTRAINT constraintName= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsAlter )? -> ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? ) ;
	public final HiveASTParser.alterForeignKeyWithName_return alterForeignKeyWithName() throws RecognitionException {
		HiveASTParser.alterForeignKeyWithName_return retval = new HiveASTParser.alterForeignKeyWithName_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_CONSTRAINT847=null;
		Token KW_FOREIGN848=null;
		Token KW_KEY849=null;
		Token KW_REFERENCES850=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope fkCols =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope parCols =null;
		ParserRuleReturnScope constraintOptsAlter851 =null;

		HiveParserASTNode KW_CONSTRAINT847_tree=null;
		HiveParserASTNode KW_FOREIGN848_tree=null;
		HiveParserASTNode KW_KEY849_tree=null;
		HiveParserASTNode KW_REFERENCES850_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
		RewriteRuleTokenStream stream_KW_FOREIGN=new RewriteRuleTokenStream(adaptor,"token KW_FOREIGN");
		RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");
		RewriteRuleSubtreeStream stream_columnParenthesesList=new RewriteRuleSubtreeStream(adaptor,"rule columnParenthesesList");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("foreign key with key name", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2215:5: ( KW_CONSTRAINT constraintName= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsAlter )? -> ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2215:7: KW_CONSTRAINT constraintName= identifier KW_FOREIGN KW_KEY fkCols= columnParenthesesList KW_REFERENCES tabName= tableName parCols= columnParenthesesList ( constraintOptsAlter )?
			{
			KW_CONSTRAINT847=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterForeignKeyWithName13550); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT847);

			pushFollow(FOLLOW_identifier_in_alterForeignKeyWithName13554);
			constraintName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
			KW_FOREIGN848=(Token)match(input,KW_FOREIGN,FOLLOW_KW_FOREIGN_in_alterForeignKeyWithName13556); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FOREIGN.add(KW_FOREIGN848);

			KW_KEY849=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_alterForeignKeyWithName13558); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY849);

			pushFollow(FOLLOW_columnParenthesesList_in_alterForeignKeyWithName13562);
			fkCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(fkCols.getTree());
			KW_REFERENCES850=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_alterForeignKeyWithName13565); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES850);

			pushFollow(FOLLOW_tableName_in_alterForeignKeyWithName13569);
			tabName=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
			pushFollow(FOLLOW_columnParenthesesList_in_alterForeignKeyWithName13573);
			parCols=columnParenthesesList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnParenthesesList.add(parCols.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2215:157: ( constraintOptsAlter )?
			int alt252=2;
			int LA252_0 = input.LA(1);
			if ( (LA252_0==KW_DISABLE||LA252_0==KW_ENABLE) ) {
				alt252=1;
			}
			switch (alt252) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2215:157: constraintOptsAlter
					{
					pushFollow(FOLLOW_constraintOptsAlter_in_alterForeignKeyWithName13575);
					constraintOptsAlter851=constraintOptsAlter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter851.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: parCols, constraintOptsAlter, fkCols, tabName, constraintName
			// token labels: 
			// rule labels: parCols, tabName, fkCols, constraintName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_parCols=new RewriteRuleSubtreeStream(adaptor,"rule parCols",parCols!=null?parCols.getTree():null);
			RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
			RewriteRuleSubtreeStream stream_fkCols=new RewriteRuleSubtreeStream(adaptor,"rule fkCols",fkCols!=null?fkCols.getTree():null);
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2216:5: -> ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2216:8: ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) $fkCols $tabName $parCols ( constraintOptsAlter )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2216:26: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_fkCols.nextTree());
				adaptor.addChild(root_1, stream_tabName.nextTree());
				adaptor.addChild(root_1, stream_parCols.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2216:91: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterForeignKeyWithName"


	public static class skewedValueElement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedValueElement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2219:1: skewedValueElement : ( skewedColumnValues | skewedColumnValuePairList );
	public final HiveASTParser.skewedValueElement_return skewedValueElement() throws RecognitionException {
		HiveASTParser.skewedValueElement_return retval = new HiveASTParser.skewedValueElement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope skewedColumnValues852 =null;
		ParserRuleReturnScope skewedColumnValuePairList853 =null;


		 pushMsg("skewed value element", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2222:5: ( skewedColumnValues | skewedColumnValuePairList )
			int alt253=2;
			int LA253_0 = input.LA(1);
			if ( (LA253_0==CharSetName||LA253_0==IntegralLiteral||(LA253_0 >= KW_CURRENT_DATE && LA253_0 <= KW_CURRENT_TIMESTAMP)||LA253_0==KW_DATE||LA253_0==KW_FALSE||LA253_0==KW_NULL||LA253_0==KW_TIMESTAMP||LA253_0==KW_TRUE||(LA253_0 >= Number && LA253_0 <= NumberLiteral)||LA253_0==StringLiteral) ) {
				alt253=1;
			}
			else if ( (LA253_0==LPAREN) ) {
				alt253=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 253, 0, input);
				throw nvae;
			}

			switch (alt253) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2223:7: skewedColumnValues
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValues_in_skewedValueElement13639);
					skewedColumnValues852=skewedColumnValues();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValues852.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2224:8: skewedColumnValuePairList
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValuePairList_in_skewedValueElement13648);
					skewedColumnValuePairList853=skewedColumnValuePairList();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValuePairList853.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedValueElement"


	public static class skewedColumnValuePairList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValuePairList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2227:1: skewedColumnValuePairList : skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) ;
	public final HiveASTParser.skewedColumnValuePairList_return skewedColumnValuePairList() throws RecognitionException {
		HiveASTParser.skewedColumnValuePairList_return retval = new HiveASTParser.skewedColumnValuePairList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA855=null;
		ParserRuleReturnScope skewedColumnValuePair854 =null;
		ParserRuleReturnScope skewedColumnValuePair856 =null;

		HiveParserASTNode COMMA855_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedColumnValuePair=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValuePair");

		 pushMsg("column value pair list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2230:5: ( skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2230:7: skewedColumnValuePair ( COMMA skewedColumnValuePair )*
			{
			pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList13675);
			skewedColumnValuePair854=skewedColumnValuePair();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedColumnValuePair.add(skewedColumnValuePair854.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2230:29: ( COMMA skewedColumnValuePair )*
			loop254:
			while (true) {
				int alt254=2;
				int LA254_0 = input.LA(1);
				if ( (LA254_0==COMMA) ) {
					alt254=1;
				}

				switch (alt254) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2230:30: COMMA skewedColumnValuePair
					{
					COMMA855=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValuePairList13678); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA855);

					pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList13680);
					skewedColumnValuePair856=skewedColumnValuePair();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_skewedColumnValuePair.add(skewedColumnValuePair856.getTree());
					}
					break;

				default :
					break loop254;
				}
			}

			// AST REWRITE
			// elements: skewedColumnValuePair
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2230:60: -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2230:63: ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLVALUE_PAIR, "TOK_TABCOLVALUE_PAIR"), root_1);
				if ( !(stream_skewedColumnValuePair.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedColumnValuePair.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedColumnValuePair.nextTree());
				}
				stream_skewedColumnValuePair.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValuePairList"


	public static class skewedColumnValuePair_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValuePair"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2233:1: skewedColumnValuePair : LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) ;
	public final HiveASTParser.skewedColumnValuePair_return skewedColumnValuePair() throws RecognitionException {
		HiveASTParser.skewedColumnValuePair_return retval = new HiveASTParser.skewedColumnValuePair_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token LPAREN857=null;
		Token RPAREN858=null;
		ParserRuleReturnScope colValues =null;

		HiveParserASTNode LPAREN857_tree=null;
		HiveParserASTNode RPAREN858_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleSubtreeStream stream_skewedColumnValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValues");

		 pushMsg("column value pair", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2236:5: ( LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2237:7: LPAREN colValues= skewedColumnValues RPAREN
			{
			LPAREN857=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_skewedColumnValuePair13725); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN857);

			pushFollow(FOLLOW_skewedColumnValues_in_skewedColumnValuePair13729);
			colValues=skewedColumnValues();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedColumnValues.add(colValues.getTree());
			RPAREN858=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_skewedColumnValuePair13731); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN858);

			// AST REWRITE
			// elements: colValues
			// token labels: 
			// rule labels: colValues, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_colValues=new RewriteRuleSubtreeStream(adaptor,"rule colValues",colValues!=null?colValues.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2238:7: -> ^( TOK_TABCOLVALUES $colValues)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2238:10: ^( TOK_TABCOLVALUES $colValues)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLVALUES, "TOK_TABCOLVALUES"), root_1);
				adaptor.addChild(root_1, stream_colValues.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValuePair"


	public static class skewedColumnValues_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValues"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2241:1: skewedColumnValues : skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) ;
	public final HiveASTParser.skewedColumnValues_return skewedColumnValues() throws RecognitionException {
		HiveASTParser.skewedColumnValues_return retval = new HiveASTParser.skewedColumnValues_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA860=null;
		ParserRuleReturnScope skewedColumnValue859 =null;
		ParserRuleReturnScope skewedColumnValue861 =null;

		HiveParserASTNode COMMA860_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_skewedColumnValue=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValue");

		 pushMsg("column values", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2244:5: ( skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2244:7: skewedColumnValue ( COMMA skewedColumnValue )*
			{
			pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues13774);
			skewedColumnValue859=skewedColumnValue();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_skewedColumnValue.add(skewedColumnValue859.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2244:25: ( COMMA skewedColumnValue )*
			loop255:
			while (true) {
				int alt255=2;
				int LA255_0 = input.LA(1);
				if ( (LA255_0==COMMA) ) {
					alt255=1;
				}

				switch (alt255) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2244:26: COMMA skewedColumnValue
					{
					COMMA860=(Token)match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValues13777); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA860);

					pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues13779);
					skewedColumnValue861=skewedColumnValue();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_skewedColumnValue.add(skewedColumnValue861.getTree());
					}
					break;

				default :
					break loop255;
				}
			}

			// AST REWRITE
			// elements: skewedColumnValue
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2244:52: -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2244:55: ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLVALUE, "TOK_TABCOLVALUE"), root_1);
				if ( !(stream_skewedColumnValue.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_skewedColumnValue.hasNext() ) {
					adaptor.addChild(root_1, stream_skewedColumnValue.nextTree());
				}
				stream_skewedColumnValue.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValues"


	public static class skewedColumnValue_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedColumnValue"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2247:1: skewedColumnValue : constant ;
	public final HiveASTParser.skewedColumnValue_return skewedColumnValue() throws RecognitionException {
		HiveASTParser.skewedColumnValue_return retval = new HiveASTParser.skewedColumnValue_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope constant862 =null;


		 pushMsg("column value", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2250:5: ( constant )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2251:7: constant
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			pushFollow(FOLLOW_constant_in_skewedColumnValue13823);
			constant862=constant();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, constant862.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedColumnValue"


	public static class skewedValueLocationElement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "skewedValueLocationElement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2254:1: skewedValueLocationElement : ( skewedColumnValue | skewedColumnValuePair );
	public final HiveASTParser.skewedValueLocationElement_return skewedValueLocationElement() throws RecognitionException {
		HiveASTParser.skewedValueLocationElement_return retval = new HiveASTParser.skewedValueLocationElement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope skewedColumnValue863 =null;
		ParserRuleReturnScope skewedColumnValuePair864 =null;


		 pushMsg("skewed value location element", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2257:5: ( skewedColumnValue | skewedColumnValuePair )
			int alt256=2;
			int LA256_0 = input.LA(1);
			if ( (LA256_0==CharSetName||LA256_0==IntegralLiteral||(LA256_0 >= KW_CURRENT_DATE && LA256_0 <= KW_CURRENT_TIMESTAMP)||LA256_0==KW_DATE||LA256_0==KW_FALSE||LA256_0==KW_NULL||LA256_0==KW_TIMESTAMP||LA256_0==KW_TRUE||(LA256_0 >= Number && LA256_0 <= NumberLiteral)||LA256_0==StringLiteral) ) {
				alt256=1;
			}
			else if ( (LA256_0==LPAREN) ) {
				alt256=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 256, 0, input);
				throw nvae;
			}

			switch (alt256) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2258:7: skewedColumnValue
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValue_in_skewedValueLocationElement13857);
					skewedColumnValue863=skewedColumnValue();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValue863.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2259:8: skewedColumnValuePair
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement13866);
					skewedColumnValuePair864=skewedColumnValuePair();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, skewedColumnValuePair864.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "skewedValueLocationElement"


	public static class orderSpecification_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "orderSpecification"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2262:1: orderSpecification : ( KW_ASC | KW_DESC );
	public final HiveASTParser.orderSpecification_return orderSpecification() throws RecognitionException {
		HiveASTParser.orderSpecification_return retval = new HiveASTParser.orderSpecification_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token set865=null;

		HiveParserASTNode set865_tree=null;

		 pushMsg("order specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2265:5: ( KW_ASC | KW_DESC )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			set865=input.LT(1);
			if ( input.LA(1)==KW_ASC||input.LA(1)==KW_DESC ) {
				input.consume();
				if ( state.backtracking==0 ) adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(set865));
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				throw mse;
			}
			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "orderSpecification"


	public static class nullOrdering_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "nullOrdering"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2267:1: nullOrdering : ( KW_NULLS KW_FIRST -> ^( TOK_NULLS_FIRST ) | KW_NULLS KW_LAST -> ^( TOK_NULLS_LAST ) );
	public final HiveASTParser.nullOrdering_return nullOrdering() throws RecognitionException {
		HiveASTParser.nullOrdering_return retval = new HiveASTParser.nullOrdering_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_NULLS866=null;
		Token KW_FIRST867=null;
		Token KW_NULLS868=null;
		Token KW_LAST869=null;

		HiveParserASTNode KW_NULLS866_tree=null;
		HiveParserASTNode KW_FIRST867_tree=null;
		HiveParserASTNode KW_NULLS868_tree=null;
		HiveParserASTNode KW_LAST869_tree=null;
		RewriteRuleTokenStream stream_KW_FIRST=new RewriteRuleTokenStream(adaptor,"token KW_FIRST");
		RewriteRuleTokenStream stream_KW_NULLS=new RewriteRuleTokenStream(adaptor,"token KW_NULLS");
		RewriteRuleTokenStream stream_KW_LAST=new RewriteRuleTokenStream(adaptor,"token KW_LAST");

		 pushMsg("nulls ordering", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2270:5: ( KW_NULLS KW_FIRST -> ^( TOK_NULLS_FIRST ) | KW_NULLS KW_LAST -> ^( TOK_NULLS_LAST ) )
			int alt257=2;
			int LA257_0 = input.LA(1);
			if ( (LA257_0==KW_NULLS) ) {
				int LA257_1 = input.LA(2);
				if ( (LA257_1==KW_FIRST) ) {
					alt257=1;
				}
				else if ( (LA257_1==KW_LAST) ) {
					alt257=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 257, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 257, 0, input);
				throw nvae;
			}

			switch (alt257) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2270:7: KW_NULLS KW_FIRST
					{
					KW_NULLS866=(Token)match(input,KW_NULLS,FOLLOW_KW_NULLS_in_nullOrdering13920); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NULLS.add(KW_NULLS866);

					KW_FIRST867=(Token)match(input,KW_FIRST,FOLLOW_KW_FIRST_in_nullOrdering13922); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FIRST.add(KW_FIRST867);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2270:25: -> ^( TOK_NULLS_FIRST )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2270:28: ^( TOK_NULLS_FIRST )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2271:7: KW_NULLS KW_LAST
					{
					KW_NULLS868=(Token)match(input,KW_NULLS,FOLLOW_KW_NULLS_in_nullOrdering13936); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NULLS.add(KW_NULLS868);

					KW_LAST869=(Token)match(input,KW_LAST,FOLLOW_KW_LAST_in_nullOrdering13938); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LAST.add(KW_LAST869);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2271:24: -> ^( TOK_NULLS_LAST )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2271:27: ^( TOK_NULLS_LAST )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "nullOrdering"


	public static class columnNameOrder_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameOrder"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2274:1: columnNameOrder : identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) ) -> {$orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) ) ;
	public final HiveASTParser.columnNameOrder_return columnNameOrder() throws RecognitionException {
		HiveASTParser.columnNameOrder_return retval = new HiveASTParser.columnNameOrder_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope orderSpec =null;
		ParserRuleReturnScope nullSpec =null;
		ParserRuleReturnScope identifier870 =null;

		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_nullOrdering=new RewriteRuleSubtreeStream(adaptor,"rule nullOrdering");
		RewriteRuleSubtreeStream stream_orderSpecification=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecification");

		 pushMsg("column name order", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2277:5: ( identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) ) -> {$orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2277:7: identifier (orderSpec= orderSpecification )? (nullSpec= nullOrdering )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameOrder13971);
			identifier870=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier870.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2277:27: (orderSpec= orderSpecification )?
			int alt258=2;
			int LA258_0 = input.LA(1);
			if ( (LA258_0==KW_ASC||LA258_0==KW_DESC) ) {
				alt258=1;
			}
			switch (alt258) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2277:27: orderSpec= orderSpecification
					{
					pushFollow(FOLLOW_orderSpecification_in_columnNameOrder13975);
					orderSpec=orderSpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderSpecification.add(orderSpec.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2277:56: (nullSpec= nullOrdering )?
			int alt259=2;
			int LA259_0 = input.LA(1);
			if ( (LA259_0==KW_NULLS) ) {
				alt259=1;
			}
			switch (alt259) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2277:56: nullSpec= nullOrdering
					{
					pushFollow(FOLLOW_nullOrdering_in_columnNameOrder13980);
					nullSpec=nullOrdering();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nullOrdering.add(nullSpec.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: identifier, identifier, identifier, identifier, identifier, nullSpec, identifier, nullSpec, nullSpec
			// token labels: 
			// rule labels: nullSpec, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_nullSpec=new RewriteRuleSubtreeStream(adaptor,"rule nullSpec",nullSpec!=null?nullSpec.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2278:5: -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
			if ((orderSpec!=null?((HiveParserASTNode)orderSpec.getTree()):null) == null && (nullSpec!=null?((HiveParserASTNode)nullSpec.getTree()):null) == null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2279:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2279:37: ^( TOK_NULLS_FIRST identifier )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2280:5: -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
			if ((orderSpec!=null?((HiveParserASTNode)orderSpec.getTree()):null) == null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2281:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2281:37: ^( $nullSpec identifier )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2282:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
			if ((nullSpec!=null?((HiveParserASTNode)nullSpec.getTree()):null) == null && (orderSpec!=null?((HiveParserASTNode)orderSpec.getTree()):null).getType()==HiveASTParser.KW_ASC) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2283:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST identifier ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2283:37: ^( TOK_NULLS_FIRST identifier )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2284:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) )
			if ((nullSpec!=null?((HiveParserASTNode)nullSpec.getTree()):null) == null && (orderSpec!=null?((HiveParserASTNode)orderSpec.getTree()):null).getType()==HiveASTParser.KW_DESC) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2285:13: ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST identifier ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2285:38: ^( TOK_NULLS_LAST identifier )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST"), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2286:5: -> {$orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
			if ((orderSpec!=null?((HiveParserASTNode)orderSpec.getTree()):null).getType()==HiveASTParser.KW_ASC) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2287:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec identifier ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2287:37: ^( $nullSpec identifier )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2288:5: -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2288:8: ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec identifier ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2288:33: ^( $nullSpec identifier )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_identifier.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameOrder"


	public static class columnNameCommentList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameCommentList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2291:1: columnNameCommentList : columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) ;
	public final HiveASTParser.columnNameCommentList_return columnNameCommentList() throws RecognitionException {
		HiveASTParser.columnNameCommentList_return retval = new HiveASTParser.columnNameCommentList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA872=null;
		ParserRuleReturnScope columnNameComment871 =null;
		ParserRuleReturnScope columnNameComment873 =null;

		HiveParserASTNode COMMA872_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_columnNameComment=new RewriteRuleSubtreeStream(adaptor,"rule columnNameComment");

		 pushMsg("column name comment list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2294:5: ( columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2294:7: columnNameComment ( COMMA columnNameComment )*
			{
			pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList14177);
			columnNameComment871=columnNameComment();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameComment.add(columnNameComment871.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2294:25: ( COMMA columnNameComment )*
			loop260:
			while (true) {
				int alt260=2;
				int LA260_0 = input.LA(1);
				if ( (LA260_0==COMMA) ) {
					alt260=1;
				}

				switch (alt260) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2294:26: COMMA columnNameComment
					{
					COMMA872=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnNameCommentList14180); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA872);

					pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList14182);
					columnNameComment873=columnNameComment();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnNameComment.add(columnNameComment873.getTree());
					}
					break;

				default :
					break loop260;
				}
			}

			// AST REWRITE
			// elements: columnNameComment
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2294:52: -> ^( TOK_TABCOLNAME ( columnNameComment )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2294:55: ^( TOK_TABCOLNAME ( columnNameComment )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);
				if ( !(stream_columnNameComment.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_columnNameComment.hasNext() ) {
					adaptor.addChild(root_1, stream_columnNameComment.nextTree());
				}
				stream_columnNameComment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameCommentList"


	public static class columnNameComment_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameComment"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2297:1: columnNameComment : colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) ;
	public final HiveASTParser.columnNameComment_return columnNameComment() throws RecognitionException {
		HiveASTParser.columnNameComment_return retval = new HiveASTParser.columnNameComment_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token comment=null;
		Token KW_COMMENT874=null;
		ParserRuleReturnScope colName =null;

		HiveParserASTNode comment_tree=null;
		HiveParserASTNode KW_COMMENT874_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");

		 pushMsg("column name comment", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2300:5: (colName= identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2300:7: colName= identifier ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameComment14222);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2300:26: ( KW_COMMENT comment= StringLiteral )?
			int alt261=2;
			int LA261_0 = input.LA(1);
			if ( (LA261_0==KW_COMMENT) ) {
				alt261=1;
			}
			switch (alt261) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2300:27: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT874=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameComment14225); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT874);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameComment14229); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colName, comment
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2301:5: -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2301:8: ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, (HiveParserASTNode)adaptor.create(TOK_NULL, "TOK_NULL"));
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2301:40: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameComment"


	public static class columnRefOrder_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnRefOrder"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2304:1: columnRefOrder : expression (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) ) -> {$orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) ) ;
	public final HiveASTParser.columnRefOrder_return columnRefOrder() throws RecognitionException {
		HiveASTParser.columnRefOrder_return retval = new HiveASTParser.columnRefOrder_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope orderSpec =null;
		ParserRuleReturnScope nullSpec =null;
		ParserRuleReturnScope expression875 =null;

		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_nullOrdering=new RewriteRuleSubtreeStream(adaptor,"rule nullOrdering");
		RewriteRuleSubtreeStream stream_orderSpecification=new RewriteRuleSubtreeStream(adaptor,"rule orderSpecification");

		 pushMsg("column order", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2307:5: ( expression (orderSpec= orderSpecification )? (nullSpec= nullOrdering )? -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) ) -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) ) -> {$orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) ) -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2307:7: expression (orderSpec= orderSpecification )? (nullSpec= nullOrdering )?
			{
			pushFollow(FOLLOW_expression_in_columnRefOrder14277);
			expression875=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression875.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2307:27: (orderSpec= orderSpecification )?
			int alt262=2;
			int LA262_0 = input.LA(1);
			if ( (LA262_0==KW_ASC||LA262_0==KW_DESC) ) {
				alt262=1;
			}
			switch (alt262) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2307:27: orderSpec= orderSpecification
					{
					pushFollow(FOLLOW_orderSpecification_in_columnRefOrder14281);
					orderSpec=orderSpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderSpecification.add(orderSpec.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2307:56: (nullSpec= nullOrdering )?
			int alt263=2;
			int LA263_0 = input.LA(1);
			if ( (LA263_0==KW_NULLS) ) {
				alt263=1;
			}
			switch (alt263) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2307:56: nullSpec= nullOrdering
					{
					pushFollow(FOLLOW_nullOrdering_in_columnRefOrder14286);
					nullSpec=nullOrdering();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_nullOrdering.add(nullSpec.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: expression, expression, nullSpec, expression, nullSpec, expression, expression, nullSpec, expression
			// token labels: 
			// rule labels: nullSpec, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_nullSpec=new RewriteRuleSubtreeStream(adaptor,"rule nullSpec",nullSpec!=null?nullSpec.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2308:5: -> {$orderSpec.tree == null && $nullSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
			if ((orderSpec!=null?((HiveParserASTNode)orderSpec.getTree()):null) == null && (nullSpec!=null?((HiveParserASTNode)nullSpec.getTree()):null) == null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2309:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2309:37: ^( TOK_NULLS_FIRST expression )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2310:5: -> {$orderSpec.tree == null}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
			if ((orderSpec!=null?((HiveParserASTNode)orderSpec.getTree()):null) == null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2311:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2311:37: ^( $nullSpec expression )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2312:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
			if ((nullSpec!=null?((HiveParserASTNode)nullSpec.getTree()):null) == null && (orderSpec!=null?((HiveParserASTNode)orderSpec.getTree()):null).getType()==HiveASTParser.KW_ASC) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2313:13: ^( TOK_TABSORTCOLNAMEASC ^( TOK_NULLS_FIRST expression ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2313:37: ^( TOK_NULLS_FIRST expression )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NULLS_FIRST, "TOK_NULLS_FIRST"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2314:5: -> {$nullSpec.tree == null && $orderSpec.tree.getType()==HiveASTParser.KW_DESC}? ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) )
			if ((nullSpec!=null?((HiveParserASTNode)nullSpec.getTree()):null) == null && (orderSpec!=null?((HiveParserASTNode)orderSpec.getTree()):null).getType()==HiveASTParser.KW_DESC) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2315:13: ^( TOK_TABSORTCOLNAMEDESC ^( TOK_NULLS_LAST expression ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2315:38: ^( TOK_NULLS_LAST expression )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NULLS_LAST, "TOK_NULLS_LAST"), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2316:5: -> {$orderSpec.tree.getType()==HiveASTParser.KW_ASC}? ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
			if ((orderSpec!=null?((HiveParserASTNode)orderSpec.getTree()):null).getType()==HiveASTParser.KW_ASC) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2317:13: ^( TOK_TABSORTCOLNAMEASC ^( $nullSpec expression ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2317:37: ^( $nullSpec expression )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2318:5: -> ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2318:8: ^( TOK_TABSORTCOLNAMEDESC ^( $nullSpec expression ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2318:33: ^( $nullSpec expression )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot(stream_nullSpec.nextNode(), root_2);
				adaptor.addChild(root_2, stream_expression.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnRefOrder"


	public static class columnNameType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2321:1: columnNameType : colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
	public final HiveASTParser.columnNameType_return columnNameType() throws RecognitionException {
		HiveASTParser.columnNameType_return retval = new HiveASTParser.columnNameType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token comment=null;
		Token KW_COMMENT877=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope colType876 =null;

		HiveParserASTNode comment_tree=null;
		HiveParserASTNode KW_COMMENT877_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 pushMsg("column specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2324:5: (colName= identifier colType ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2324:7: colName= identifier colType ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameType14485);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			pushFollow(FOLLOW_colType_in_columnNameType14487);
			colType876=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType876.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2324:34: ( KW_COMMENT comment= StringLiteral )?
			int alt264=2;
			int LA264_0 = input.LA(1);
			if ( (LA264_0==KW_COMMENT) ) {
				alt264=1;
			}
			switch (alt264) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2324:35: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT877=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameType14490); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT877);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameType14494); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: comment, colName, colName, colType, colType
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2325:5: -> {containExcludedCharForCreateTableColumnName($colName.text)}?
			if (containExcludedCharForCreateTableColumnName((colName!=null?input.toString(colName.start,colName.stop):null))) {
				adaptor.addChild(root_0, throwColumnNameException());
			}

			else // 2326:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
			if (comment == null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2326:28: ^( TOK_TABCOL $colName colType )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2327:5: -> ^( TOK_TABCOL $colName colType $comment)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2327:28: ^( TOK_TABCOL $colName colType $comment)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameType"


	public static class columnNameTypeOrConstraint_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeOrConstraint"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2330:1: columnNameTypeOrConstraint : ( ( tableConstraint ) | ( columnNameTypeConstraint ) );
	public final HiveASTParser.columnNameTypeOrConstraint_return columnNameTypeOrConstraint() throws RecognitionException {
		HiveASTParser.columnNameTypeOrConstraint_return retval = new HiveASTParser.columnNameTypeOrConstraint_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope tableConstraint878 =null;
		ParserRuleReturnScope columnNameTypeConstraint879 =null;


		 pushMsg("column name or constraint", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2333:5: ( ( tableConstraint ) | ( columnNameTypeConstraint ) )
			int alt265=2;
			int LA265_0 = input.LA(1);
			if ( (LA265_0==KW_CONSTRAINT||LA265_0==KW_PRIMARY||LA265_0==KW_UNIQUE) ) {
				alt265=1;
			}
			else if ( (LA265_0==Identifier||(LA265_0 >= KW_ABORT && LA265_0 <= KW_AFTER)||LA265_0==KW_ANALYZE||LA265_0==KW_ARCHIVE||LA265_0==KW_ASC||(LA265_0 >= KW_AUTOCOMMIT && LA265_0 <= KW_BEFORE)||(LA265_0 >= KW_BUCKET && LA265_0 <= KW_BUCKETS)||(LA265_0 >= KW_CACHE && LA265_0 <= KW_CASCADE)||LA265_0==KW_CHANGE||(LA265_0 >= KW_CLUSTER && LA265_0 <= KW_COLLECTION)||(LA265_0 >= KW_COLUMNS && LA265_0 <= KW_COMMENT)||(LA265_0 >= KW_COMPACT && LA265_0 <= KW_CONCATENATE)||LA265_0==KW_CONTINUE||LA265_0==KW_DATA||LA265_0==KW_DATABASES||(LA265_0 >= KW_DATETIME && LA265_0 <= KW_DBPROPERTIES)||(LA265_0 >= KW_DEFERRED && LA265_0 <= KW_DEFINED)||(LA265_0 >= KW_DELIMITED && LA265_0 <= KW_DESC)||(LA265_0 >= KW_DETAIL && LA265_0 <= KW_DISABLE)||LA265_0==KW_DISTRIBUTE||LA265_0==KW_DOW||(LA265_0 >= KW_DUMP && LA265_0 <= KW_ELEM_TYPE)||LA265_0==KW_ENABLE||LA265_0==KW_ESCAPED||LA265_0==KW_EXCLUSIVE||(LA265_0 >= KW_EXPLAIN && LA265_0 <= KW_EXPRESSION)||(LA265_0 >= KW_FIELDS && LA265_0 <= KW_FIRST)||(LA265_0 >= KW_FORMAT && LA265_0 <= KW_FORMATTED)||LA265_0==KW_FUNCTIONS||(LA265_0 >= KW_HOUR && LA265_0 <= KW_IDXPROPERTIES)||(LA265_0 >= KW_INDEX && LA265_0 <= KW_INDEXES)||(LA265_0 >= KW_INPATH && LA265_0 <= KW_INPUTFORMAT)||(LA265_0 >= KW_ISOLATION && LA265_0 <= KW_JAR)||(LA265_0 >= KW_KEY && LA265_0 <= KW_LAST)||LA265_0==KW_LEVEL||(LA265_0 >= KW_LIMIT && LA265_0 <= KW_LOAD)||(LA265_0 >= KW_LOCATION && LA265_0 <= KW_LONG)||(LA265_0 >= KW_MAPJOIN && LA265_0 <= KW_MATERIALIZED)||LA265_0==KW_METADATA||(LA265_0 >= KW_MINUTE && LA265_0 <= KW_MONTH)||LA265_0==KW_MSCK||(LA265_0 >= KW_NORELY && LA265_0 <= KW_NOSCAN)||LA265_0==KW_NOVALIDATE||LA265_0==KW_NULLS||LA265_0==KW_OFFSET||(LA265_0 >= KW_OPERATOR && LA265_0 <= KW_OPTION)||(LA265_0 >= KW_OUTPUTDRIVER && LA265_0 <= KW_OUTPUTFORMAT)||(LA265_0 >= KW_OVERWRITE && LA265_0 <= KW_OWNER)||(LA265_0 >= KW_PARTITIONED && LA265_0 <= KW_PARTITIONS)||LA265_0==KW_PLUS||LA265_0==KW_PRETTY||LA265_0==KW_PRINCIPALS||(LA265_0 >= KW_PURGE && LA265_0 <= KW_QUARTER)||LA265_0==KW_READ||(LA265_0 >= KW_REBUILD && LA265_0 <= KW_RECORDWRITER)||(LA265_0 >= KW_RELOAD && LA265_0 <= KW_RESTRICT)||LA265_0==KW_REWRITE||(LA265_0 >= KW_ROLE && LA265_0 <= KW_ROLES)||(LA265_0 >= KW_SCHEMA && LA265_0 <= KW_SECOND)||(LA265_0 >= KW_SEMI && LA265_0 <= KW_SERVER)||(LA265_0 >= KW_SETS && LA265_0 <= KW_SKEWED)||(LA265_0 >= KW_SNAPSHOT && LA265_0 <= KW_SSL)||(LA265_0 >= KW_STATISTICS && LA265_0 <= KW_SUMMARY)||LA265_0==KW_TABLES||(LA265_0 >= KW_TBLPROPERTIES && LA265_0 <= KW_TERMINATED)||LA265_0==KW_TINYINT||(LA265_0 >= KW_TOUCH && LA265_0 <= KW_TRANSACTIONS)||LA265_0==KW_UNARCHIVE||LA265_0==KW_UNDO||LA265_0==KW_UNIONTYPE||(LA265_0 >= KW_UNLOCK && LA265_0 <= KW_UNSIGNED)||(LA265_0 >= KW_URI && LA265_0 <= KW_USE)||(LA265_0 >= KW_UTC && LA265_0 <= KW_VALIDATE)||LA265_0==KW_VALUE_TYPE||(LA265_0 >= KW_VECTORIZATION && LA265_0 <= KW_WEEK)||LA265_0==KW_WHILE||(LA265_0 >= KW_WORK && LA265_0 <= KW_YEAR)||LA265_0==KW_BATCH||LA265_0==KW_DAYOFWEEK||LA265_0==KW_HOLD_DDLTIME||LA265_0==KW_IGNORE||LA265_0==KW_NO_DROP||LA265_0==KW_OFFLINE||LA265_0==KW_PROTECTION||LA265_0==KW_READONLY) ) {
				alt265=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 265, 0, input);
				throw nvae;
			}

			switch (alt265) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2333:7: ( tableConstraint )
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2333:7: ( tableConstraint )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2333:9: tableConstraint
					{
					pushFollow(FOLLOW_tableConstraint_in_columnNameTypeOrConstraint14590);
					tableConstraint878=tableConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tableConstraint878.getTree());

					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2334:7: ( columnNameTypeConstraint )
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2334:7: ( columnNameTypeConstraint )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2334:9: columnNameTypeConstraint
					{
					pushFollow(FOLLOW_columnNameTypeConstraint_in_columnNameTypeOrConstraint14602);
					columnNameTypeConstraint879=columnNameTypeConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, columnNameTypeConstraint879.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeOrConstraint"


	public static class columnNameTypeConstraint_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameTypeConstraint"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2337:1: columnNameTypeConstraint : colName= identifier colType ( colConstraint )? ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> ^( TOK_TABCOL $colName colType ( $comment)? ( colConstraint )? ) ;
	public final HiveASTParser.columnNameTypeConstraint_return columnNameTypeConstraint() throws RecognitionException {
		HiveASTParser.columnNameTypeConstraint_return retval = new HiveASTParser.columnNameTypeConstraint_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token comment=null;
		Token KW_COMMENT882=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope colType880 =null;
		ParserRuleReturnScope colConstraint881 =null;

		HiveParserASTNode comment_tree=null;
		HiveParserASTNode KW_COMMENT882_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
		RewriteRuleSubtreeStream stream_colConstraint=new RewriteRuleSubtreeStream(adaptor,"rule colConstraint");

		 pushMsg("column specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2340:5: (colName= identifier colType ( colConstraint )? ( KW_COMMENT comment= StringLiteral )? -> {containExcludedCharForCreateTableColumnName($colName.text)}? -> ^( TOK_TABCOL $colName colType ( $comment)? ( colConstraint )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2340:7: colName= identifier colType ( colConstraint )? ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameTypeConstraint14633);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			pushFollow(FOLLOW_colType_in_columnNameTypeConstraint14635);
			colType880=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType880.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2340:34: ( colConstraint )?
			int alt266=2;
			int LA266_0 = input.LA(1);
			if ( (LA266_0==KW_NOT) ) {
				alt266=1;
			}
			switch (alt266) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2340:34: colConstraint
					{
					pushFollow(FOLLOW_colConstraint_in_columnNameTypeConstraint14637);
					colConstraint881=colConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_colConstraint.add(colConstraint881.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2340:49: ( KW_COMMENT comment= StringLiteral )?
			int alt267=2;
			int LA267_0 = input.LA(1);
			if ( (LA267_0==KW_COMMENT) ) {
				alt267=1;
			}
			switch (alt267) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2340:50: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT882=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameTypeConstraint14641); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT882);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameTypeConstraint14645); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: comment, colConstraint, colType, colName
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2341:5: -> {containExcludedCharForCreateTableColumnName($colName.text)}?
			if (containExcludedCharForCreateTableColumnName((colName!=null?input.toString(colName.start,colName.stop):null))) {
				adaptor.addChild(root_0, throwColumnNameException());
			}

			else // 2342:5: -> ^( TOK_TABCOL $colName colType ( $comment)? ( colConstraint )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2342:8: ^( TOK_TABCOL $colName colType ( $comment)? ( colConstraint )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2342:39: ( $comment)?
				if ( stream_comment.hasNext() ) {
					adaptor.addChild(root_1, stream_comment.nextNode());
				}
				stream_comment.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2342:48: ( colConstraint )?
				if ( stream_colConstraint.hasNext() ) {
					adaptor.addChild(root_1, stream_colConstraint.nextTree());
				}
				stream_colConstraint.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameTypeConstraint"


	public static class colConstraint_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "colConstraint"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2345:1: colConstraint : KW_NOT KW_NULL constraintTraits -> ^( TOK_NOT_NULL constraintTraits ) ;
	public final HiveASTParser.colConstraint_return colConstraint() throws RecognitionException {
		HiveASTParser.colConstraint_return retval = new HiveASTParser.colConstraint_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_NOT883=null;
		Token KW_NULL884=null;
		ParserRuleReturnScope constraintTraits885 =null;

		HiveParserASTNode KW_NOT883_tree=null;
		HiveParserASTNode KW_NULL884_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
		RewriteRuleSubtreeStream stream_constraintTraits=new RewriteRuleSubtreeStream(adaptor,"rule constraintTraits");

		 pushMsg("column constraint", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2348:5: ( KW_NOT KW_NULL constraintTraits -> ^( TOK_NOT_NULL constraintTraits ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2348:7: KW_NOT KW_NULL constraintTraits
			{
			KW_NOT883=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_colConstraint14706); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT883);

			KW_NULL884=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_colConstraint14708); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_NULL.add(KW_NULL884);

			pushFollow(FOLLOW_constraintTraits_in_colConstraint14710);
			constraintTraits885=constraintTraits();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_constraintTraits.add(constraintTraits885.getTree());
			// AST REWRITE
			// elements: constraintTraits
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2349:5: -> ^( TOK_NOT_NULL constraintTraits )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2349:8: ^( TOK_NOT_NULL constraintTraits )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NOT_NULL, "TOK_NOT_NULL"), root_1);
				adaptor.addChild(root_1, stream_constraintTraits.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colConstraint"


	public static class constraintTraits_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "constraintTraits"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2352:1: constraintTraits : ( enableSpecification )? ( validateSpecification )? relySpecification ;
	public final HiveASTParser.constraintTraits_return constraintTraits() throws RecognitionException {
		HiveASTParser.constraintTraits_return retval = new HiveASTParser.constraintTraits_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope enableSpecification886 =null;
		ParserRuleReturnScope validateSpecification887 =null;
		ParserRuleReturnScope relySpecification888 =null;


		 pushMsg("constraint traits", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2355:5: ( ( enableSpecification )? ( validateSpecification )? relySpecification )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2355:7: ( enableSpecification )? ( validateSpecification )? relySpecification
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2355:7: ( enableSpecification )?
			int alt268=2;
			int LA268_0 = input.LA(1);
			if ( (LA268_0==KW_DISABLE||LA268_0==KW_ENABLE) ) {
				alt268=1;
			}
			switch (alt268) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2355:7: enableSpecification
					{
					pushFollow(FOLLOW_enableSpecification_in_constraintTraits14749);
					enableSpecification886=enableSpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enableSpecification886.getTree());

					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2355:28: ( validateSpecification )?
			int alt269=2;
			int LA269_0 = input.LA(1);
			if ( (LA269_0==KW_NOVALIDATE||LA269_0==KW_VALIDATE) ) {
				alt269=1;
			}
			switch (alt269) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2355:28: validateSpecification
					{
					pushFollow(FOLLOW_validateSpecification_in_constraintTraits14752);
					validateSpecification887=validateSpecification();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, validateSpecification887.getTree());

					}
					break;

			}

			pushFollow(FOLLOW_relySpecification_in_constraintTraits14755);
			relySpecification888=relySpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, relySpecification888.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraintTraits"


	public static class alterColumnConstraint_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterColumnConstraint"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2358:1: alterColumnConstraint[CommonTree fkColName] : ( ( alterForeignKeyConstraint[$fkColName] ) | ( alterColConstraint ) );
	public final HiveASTParser.alterColumnConstraint_return alterColumnConstraint(CommonTree fkColName) throws RecognitionException {
		HiveASTParser.alterColumnConstraint_return retval = new HiveASTParser.alterColumnConstraint_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope alterForeignKeyConstraint889 =null;
		ParserRuleReturnScope alterColConstraint890 =null;


		 pushMsg("alter column constraint", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2361:5: ( ( alterForeignKeyConstraint[$fkColName] ) | ( alterColConstraint ) )
			int alt270=2;
			switch ( input.LA(1) ) {
			case KW_CONSTRAINT:
				{
				int LA270_1 = input.LA(2);
				if ( (LA270_1==Identifier) ) {
					int LA270_6 = input.LA(3);
					if ( (LA270_6==KW_REFERENCES) ) {
						alt270=1;
					}
					else if ( (LA270_6==KW_NOT||LA270_6==KW_PRIMARY||LA270_6==KW_UNIQUE) ) {
						alt270=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 270, 6, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}
				else if ( ((LA270_1 >= KW_ABORT && LA270_1 <= KW_AFTER)||LA270_1==KW_ANALYZE||LA270_1==KW_ARCHIVE||LA270_1==KW_ASC||(LA270_1 >= KW_AUTOCOMMIT && LA270_1 <= KW_BEFORE)||(LA270_1 >= KW_BUCKET && LA270_1 <= KW_BUCKETS)||(LA270_1 >= KW_CACHE && LA270_1 <= KW_CASCADE)||LA270_1==KW_CHANGE||(LA270_1 >= KW_CLUSTER && LA270_1 <= KW_COLLECTION)||(LA270_1 >= KW_COLUMNS && LA270_1 <= KW_COMMENT)||(LA270_1 >= KW_COMPACT && LA270_1 <= KW_CONCATENATE)||LA270_1==KW_CONTINUE||LA270_1==KW_DATA||LA270_1==KW_DATABASES||(LA270_1 >= KW_DATETIME && LA270_1 <= KW_DBPROPERTIES)||(LA270_1 >= KW_DEFERRED && LA270_1 <= KW_DEFINED)||(LA270_1 >= KW_DELIMITED && LA270_1 <= KW_DESC)||(LA270_1 >= KW_DETAIL && LA270_1 <= KW_DISABLE)||LA270_1==KW_DISTRIBUTE||LA270_1==KW_DOW||(LA270_1 >= KW_DUMP && LA270_1 <= KW_ELEM_TYPE)||LA270_1==KW_ENABLE||LA270_1==KW_ESCAPED||LA270_1==KW_EXCLUSIVE||(LA270_1 >= KW_EXPLAIN && LA270_1 <= KW_EXPRESSION)||(LA270_1 >= KW_FIELDS && LA270_1 <= KW_FIRST)||(LA270_1 >= KW_FORMAT && LA270_1 <= KW_FORMATTED)||LA270_1==KW_FUNCTIONS||(LA270_1 >= KW_HOUR && LA270_1 <= KW_IDXPROPERTIES)||(LA270_1 >= KW_INDEX && LA270_1 <= KW_INDEXES)||(LA270_1 >= KW_INPATH && LA270_1 <= KW_INPUTFORMAT)||(LA270_1 >= KW_ISOLATION && LA270_1 <= KW_JAR)||(LA270_1 >= KW_KEY && LA270_1 <= KW_LAST)||LA270_1==KW_LEVEL||(LA270_1 >= KW_LIMIT && LA270_1 <= KW_LOAD)||(LA270_1 >= KW_LOCATION && LA270_1 <= KW_LONG)||(LA270_1 >= KW_MAPJOIN && LA270_1 <= KW_MATERIALIZED)||LA270_1==KW_METADATA||(LA270_1 >= KW_MINUTE && LA270_1 <= KW_MONTH)||LA270_1==KW_MSCK||(LA270_1 >= KW_NORELY && LA270_1 <= KW_NOSCAN)||LA270_1==KW_NOVALIDATE||LA270_1==KW_NULLS||LA270_1==KW_OFFSET||(LA270_1 >= KW_OPERATOR && LA270_1 <= KW_OPTION)||(LA270_1 >= KW_OUTPUTDRIVER && LA270_1 <= KW_OUTPUTFORMAT)||(LA270_1 >= KW_OVERWRITE && LA270_1 <= KW_OWNER)||(LA270_1 >= KW_PARTITIONED && LA270_1 <= KW_PARTITIONS)||LA270_1==KW_PLUS||LA270_1==KW_PRETTY||LA270_1==KW_PRINCIPALS||(LA270_1 >= KW_PURGE && LA270_1 <= KW_QUARTER)||LA270_1==KW_READ||(LA270_1 >= KW_REBUILD && LA270_1 <= KW_RECORDWRITER)||(LA270_1 >= KW_RELOAD && LA270_1 <= KW_RESTRICT)||LA270_1==KW_REWRITE||(LA270_1 >= KW_ROLE && LA270_1 <= KW_ROLES)||(LA270_1 >= KW_SCHEMA && LA270_1 <= KW_SECOND)||(LA270_1 >= KW_SEMI && LA270_1 <= KW_SERVER)||(LA270_1 >= KW_SETS && LA270_1 <= KW_SKEWED)||(LA270_1 >= KW_SNAPSHOT && LA270_1 <= KW_SSL)||(LA270_1 >= KW_STATISTICS && LA270_1 <= KW_SUMMARY)||LA270_1==KW_TABLES||(LA270_1 >= KW_TBLPROPERTIES && LA270_1 <= KW_TERMINATED)||LA270_1==KW_TINYINT||(LA270_1 >= KW_TOUCH && LA270_1 <= KW_TRANSACTIONS)||LA270_1==KW_UNARCHIVE||LA270_1==KW_UNDO||LA270_1==KW_UNIONTYPE||(LA270_1 >= KW_UNLOCK && LA270_1 <= KW_UNSIGNED)||(LA270_1 >= KW_URI && LA270_1 <= KW_USE)||(LA270_1 >= KW_UTC && LA270_1 <= KW_VALIDATE)||LA270_1==KW_VALUE_TYPE||(LA270_1 >= KW_VECTORIZATION && LA270_1 <= KW_WEEK)||LA270_1==KW_WHILE||(LA270_1 >= KW_WORK && LA270_1 <= KW_YEAR)||LA270_1==KW_BATCH||LA270_1==KW_DAYOFWEEK||LA270_1==KW_HOLD_DDLTIME||LA270_1==KW_IGNORE||LA270_1==KW_NO_DROP||LA270_1==KW_OFFLINE||LA270_1==KW_PROTECTION||LA270_1==KW_READONLY) ) {
					int LA270_7 = input.LA(3);
					if ( (LA270_7==KW_REFERENCES) ) {
						alt270=1;
					}
					else if ( (LA270_7==KW_NOT||LA270_7==KW_PRIMARY||LA270_7==KW_UNIQUE) ) {
						alt270=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 270, 7, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 270, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_REFERENCES:
				{
				alt270=1;
				}
				break;
			case KW_NOT:
			case KW_PRIMARY:
			case KW_UNIQUE:
				{
				alt270=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 270, 0, input);
				throw nvae;
			}
			switch (alt270) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2361:7: ( alterForeignKeyConstraint[$fkColName] )
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2361:7: ( alterForeignKeyConstraint[$fkColName] )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2361:9: alterForeignKeyConstraint[$fkColName]
					{
					pushFollow(FOLLOW_alterForeignKeyConstraint_in_alterColumnConstraint14785);
					alterForeignKeyConstraint889=alterForeignKeyConstraint(fkColName);
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterForeignKeyConstraint889.getTree());

					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2362:7: ( alterColConstraint )
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2362:7: ( alterColConstraint )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2362:9: alterColConstraint
					{
					pushFollow(FOLLOW_alterColConstraint_in_alterColumnConstraint14798);
					alterColConstraint890=alterColConstraint();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, alterColConstraint890.getTree());

					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterColumnConstraint"


	public static class alterForeignKeyConstraint_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterForeignKeyConstraint"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2365:1: alterForeignKeyConstraint[CommonTree fkColName] : ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) ;
	public final HiveASTParser.alterForeignKeyConstraint_return alterForeignKeyConstraint(CommonTree fkColName) throws RecognitionException {
		HiveASTParser.alterForeignKeyConstraint_return retval = new HiveASTParser.alterForeignKeyConstraint_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_CONSTRAINT891=null;
		Token KW_REFERENCES892=null;
		Token LPAREN893=null;
		Token RPAREN894=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope tabName =null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope constraintOptsAlter895 =null;

		HiveParserASTNode KW_CONSTRAINT891_tree=null;
		HiveParserASTNode KW_REFERENCES892_tree=null;
		HiveParserASTNode LPAREN893_tree=null;
		HiveParserASTNode RPAREN894_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_REFERENCES=new RewriteRuleTokenStream(adaptor,"token KW_REFERENCES");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");

		 pushMsg("alter column constraint", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2368:5: ( ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2368:7: ( KW_CONSTRAINT constraintName= identifier )? KW_REFERENCES tabName= tableName LPAREN colName= columnName RPAREN ( constraintOptsAlter )?
			{
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2368:7: ( KW_CONSTRAINT constraintName= identifier )?
			int alt271=2;
			int LA271_0 = input.LA(1);
			if ( (LA271_0==KW_CONSTRAINT) ) {
				alt271=1;
			}
			switch (alt271) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2368:8: KW_CONSTRAINT constraintName= identifier
					{
					KW_CONSTRAINT891=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterForeignKeyConstraint14829); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT891);

					pushFollow(FOLLOW_identifier_in_alterForeignKeyConstraint14833);
					constraintName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
					}
					break;

			}

			KW_REFERENCES892=(Token)match(input,KW_REFERENCES,FOLLOW_KW_REFERENCES_in_alterForeignKeyConstraint14837); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_REFERENCES.add(KW_REFERENCES892);

			pushFollow(FOLLOW_tableName_in_alterForeignKeyConstraint14841);
			tabName=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tabName.getTree());
			LPAREN893=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alterForeignKeyConstraint14843); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN893);

			pushFollow(FOLLOW_columnName_in_alterForeignKeyConstraint14847);
			colName=columnName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnName.add(colName.getTree());
			RPAREN894=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alterForeignKeyConstraint14849); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN894);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2368:115: ( constraintOptsAlter )?
			int alt272=2;
			int LA272_0 = input.LA(1);
			if ( (LA272_0==KW_DISABLE||LA272_0==KW_ENABLE) ) {
				alt272=1;
			}
			switch (alt272) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2368:115: constraintOptsAlter
					{
					pushFollow(FOLLOW_constraintOptsAlter_in_alterForeignKeyConstraint14851);
					constraintOptsAlter895=constraintOptsAlter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter895.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: colName, tabName, constraintOptsAlter, tabName, constraintOptsAlter, constraintName, colName
			// token labels: 
			// rule labels: colName, tabName, constraintName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"rule tabName",tabName!=null?tabName.getTree():null);
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2369:5: -> {$constraintName.tree != null}? ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
			if ((constraintName!=null?((HiveParserASTNode)constraintName.getTree()):null) != null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2370:13: ^( TOK_FOREIGN_KEY ^( TOK_CONSTRAINT_NAME $constraintName) ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2370:31: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2370:70: ^( TOK_TABCOLNAME )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, fkColName);
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_tabName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2370:110: ^( TOK_TABCOLNAME $colName)
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, stream_colName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2370:137: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2371:5: -> ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2371:8: ^( TOK_FOREIGN_KEY ^( TOK_TABCOLNAME ) $tabName ^( TOK_TABCOLNAME $colName) ( constraintOptsAlter )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FOREIGN_KEY, "TOK_FOREIGN_KEY"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2371:26: ^( TOK_TABCOLNAME )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, fkColName);
				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_tabName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2371:66: ^( TOK_TABCOLNAME $colName)
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_2);
				adaptor.addChild(root_2, stream_colName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2371:93: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterForeignKeyConstraint"


	public static class alterColConstraint_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "alterColConstraint"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2374:1: alterColConstraint : ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( columnConstraintType ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) -> ^( columnConstraintType ( constraintOptsAlter )? ) ;
	public final HiveASTParser.alterColConstraint_return alterColConstraint() throws RecognitionException {
		HiveASTParser.alterColConstraint_return retval = new HiveASTParser.alterColConstraint_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_CONSTRAINT896=null;
		ParserRuleReturnScope constraintName =null;
		ParserRuleReturnScope columnConstraintType897 =null;
		ParserRuleReturnScope constraintOptsAlter898 =null;

		HiveParserASTNode KW_CONSTRAINT896_tree=null;
		RewriteRuleTokenStream stream_KW_CONSTRAINT=new RewriteRuleTokenStream(adaptor,"token KW_CONSTRAINT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_columnConstraintType=new RewriteRuleSubtreeStream(adaptor,"rule columnConstraintType");
		RewriteRuleSubtreeStream stream_constraintOptsAlter=new RewriteRuleSubtreeStream(adaptor,"rule constraintOptsAlter");

		 pushMsg("alter column constraint", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2377:5: ( ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsAlter )? -> {$constraintName.tree != null}? ^( columnConstraintType ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? ) -> ^( columnConstraintType ( constraintOptsAlter )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2377:7: ( KW_CONSTRAINT constraintName= identifier )? columnConstraintType ( constraintOptsAlter )?
			{
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2377:7: ( KW_CONSTRAINT constraintName= identifier )?
			int alt273=2;
			int LA273_0 = input.LA(1);
			if ( (LA273_0==KW_CONSTRAINT) ) {
				alt273=1;
			}
			switch (alt273) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2377:8: KW_CONSTRAINT constraintName= identifier
					{
					KW_CONSTRAINT896=(Token)match(input,KW_CONSTRAINT,FOLLOW_KW_CONSTRAINT_in_alterColConstraint14959); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CONSTRAINT.add(KW_CONSTRAINT896);

					pushFollow(FOLLOW_identifier_in_alterColConstraint14963);
					constraintName=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(constraintName.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_columnConstraintType_in_alterColConstraint14967);
			columnConstraintType897=columnConstraintType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnConstraintType.add(columnConstraintType897.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2377:71: ( constraintOptsAlter )?
			int alt274=2;
			int LA274_0 = input.LA(1);
			if ( (LA274_0==KW_DISABLE||LA274_0==KW_ENABLE) ) {
				alt274=1;
			}
			switch (alt274) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2377:71: constraintOptsAlter
					{
					pushFollow(FOLLOW_constraintOptsAlter_in_alterColConstraint14969);
					constraintOptsAlter898=constraintOptsAlter();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_constraintOptsAlter.add(constraintOptsAlter898.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: constraintName, columnConstraintType, columnConstraintType, constraintOptsAlter, constraintOptsAlter
			// token labels: 
			// rule labels: constraintName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_constraintName=new RewriteRuleSubtreeStream(adaptor,"rule constraintName",constraintName!=null?constraintName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2378:5: -> {$constraintName.tree != null}? ^( columnConstraintType ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
			if ((constraintName!=null?((HiveParserASTNode)constraintName.getTree()):null) != null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2379:13: ^( columnConstraintType ^( TOK_CONSTRAINT_NAME $constraintName) ( constraintOptsAlter )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot(stream_columnConstraintType.nextNode(), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2379:36: ^( TOK_CONSTRAINT_NAME $constraintName)
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CONSTRAINT_NAME, "TOK_CONSTRAINT_NAME"), root_2);
				adaptor.addChild(root_2, stream_constraintName.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2379:75: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2380:5: -> ^( columnConstraintType ( constraintOptsAlter )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2380:8: ^( columnConstraintType ( constraintOptsAlter )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot(stream_columnConstraintType.nextNode(), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2380:31: ( constraintOptsAlter )?
				if ( stream_constraintOptsAlter.hasNext() ) {
					adaptor.addChild(root_1, stream_constraintOptsAlter.nextTree());
				}
				stream_constraintOptsAlter.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "alterColConstraint"


	public static class columnConstraintType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnConstraintType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2383:1: columnConstraintType : ( KW_NOT KW_NULL -> TOK_NOT_NULL | tableConstraintType );
	public final HiveASTParser.columnConstraintType_return columnConstraintType() throws RecognitionException {
		HiveASTParser.columnConstraintType_return retval = new HiveASTParser.columnConstraintType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_NOT899=null;
		Token KW_NULL900=null;
		ParserRuleReturnScope tableConstraintType901 =null;

		HiveParserASTNode KW_NOT899_tree=null;
		HiveParserASTNode KW_NULL900_tree=null;
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2384:5: ( KW_NOT KW_NULL -> TOK_NOT_NULL | tableConstraintType )
			int alt275=2;
			int LA275_0 = input.LA(1);
			if ( (LA275_0==KW_NOT) ) {
				alt275=1;
			}
			else if ( (LA275_0==KW_PRIMARY||LA275_0==KW_UNIQUE) ) {
				alt275=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 275, 0, input);
				throw nvae;
			}

			switch (alt275) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2384:7: KW_NOT KW_NULL
					{
					KW_NOT899=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_columnConstraintType15034); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT899);

					KW_NULL900=(Token)match(input,KW_NULL,FOLLOW_KW_NULL_in_columnConstraintType15036); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_NULL.add(KW_NULL900);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2384:28: -> TOK_NOT_NULL
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_NOT_NULL, "TOK_NOT_NULL"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2385:7: tableConstraintType
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_tableConstraintType_in_columnConstraintType15057);
					tableConstraintType901=tableConstraintType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, tableConstraintType901.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnConstraintType"


	public static class tableConstraintType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "tableConstraintType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2388:1: tableConstraintType : ( KW_PRIMARY KW_KEY -> TOK_PRIMARY_KEY | KW_UNIQUE -> TOK_UNIQUE );
	public final HiveASTParser.tableConstraintType_return tableConstraintType() throws RecognitionException {
		HiveASTParser.tableConstraintType_return retval = new HiveASTParser.tableConstraintType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_PRIMARY902=null;
		Token KW_KEY903=null;
		Token KW_UNIQUE904=null;

		HiveParserASTNode KW_PRIMARY902_tree=null;
		HiveParserASTNode KW_KEY903_tree=null;
		HiveParserASTNode KW_UNIQUE904_tree=null;
		RewriteRuleTokenStream stream_KW_PRIMARY=new RewriteRuleTokenStream(adaptor,"token KW_PRIMARY");
		RewriteRuleTokenStream stream_KW_UNIQUE=new RewriteRuleTokenStream(adaptor,"token KW_UNIQUE");
		RewriteRuleTokenStream stream_KW_KEY=new RewriteRuleTokenStream(adaptor,"token KW_KEY");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2389:5: ( KW_PRIMARY KW_KEY -> TOK_PRIMARY_KEY | KW_UNIQUE -> TOK_UNIQUE )
			int alt276=2;
			int LA276_0 = input.LA(1);
			if ( (LA276_0==KW_PRIMARY) ) {
				alt276=1;
			}
			else if ( (LA276_0==KW_UNIQUE) ) {
				alt276=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 276, 0, input);
				throw nvae;
			}

			switch (alt276) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2389:7: KW_PRIMARY KW_KEY
					{
					KW_PRIMARY902=(Token)match(input,KW_PRIMARY,FOLLOW_KW_PRIMARY_in_tableConstraintType15074); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_PRIMARY.add(KW_PRIMARY902);

					KW_KEY903=(Token)match(input,KW_KEY,FOLLOW_KW_KEY_in_tableConstraintType15076); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_KEY.add(KW_KEY903);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2389:28: -> TOK_PRIMARY_KEY
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_PRIMARY_KEY, "TOK_PRIMARY_KEY"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2390:7: KW_UNIQUE
					{
					KW_UNIQUE904=(Token)match(input,KW_UNIQUE,FOLLOW_KW_UNIQUE_in_tableConstraintType15094); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNIQUE.add(KW_UNIQUE904);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2390:28: -> TOK_UNIQUE
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_UNIQUE, "TOK_UNIQUE"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "tableConstraintType"


	public static class constraintOptsCreate_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "constraintOptsCreate"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2393:1: constraintOptsCreate : enableValidateSpecification relySpecification ;
	public final HiveASTParser.constraintOptsCreate_return constraintOptsCreate() throws RecognitionException {
		HiveASTParser.constraintOptsCreate_return retval = new HiveASTParser.constraintOptsCreate_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope enableValidateSpecification905 =null;
		ParserRuleReturnScope relySpecification906 =null;


		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2394:5: ( enableValidateSpecification relySpecification )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2394:7: enableValidateSpecification relySpecification
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			pushFollow(FOLLOW_enableValidateSpecification_in_constraintOptsCreate15129);
			enableValidateSpecification905=enableValidateSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, enableValidateSpecification905.getTree());

			pushFollow(FOLLOW_relySpecification_in_constraintOptsCreate15131);
			relySpecification906=relySpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, relySpecification906.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraintOptsCreate"


	public static class constraintOptsAlter_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "constraintOptsAlter"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2397:1: constraintOptsAlter : enableValidateSpecification relySpecification ;
	public final HiveASTParser.constraintOptsAlter_return constraintOptsAlter() throws RecognitionException {
		HiveASTParser.constraintOptsAlter_return retval = new HiveASTParser.constraintOptsAlter_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope enableValidateSpecification907 =null;
		ParserRuleReturnScope relySpecification908 =null;


		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2398:5: ( enableValidateSpecification relySpecification )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2398:7: enableValidateSpecification relySpecification
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			pushFollow(FOLLOW_enableValidateSpecification_in_constraintOptsAlter15148);
			enableValidateSpecification907=enableValidateSpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, enableValidateSpecification907.getTree());

			pushFollow(FOLLOW_relySpecification_in_constraintOptsAlter15150);
			relySpecification908=relySpecification();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, relySpecification908.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "constraintOptsAlter"


	public static class columnNameColonType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnNameColonType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2401:1: columnNameColonType : colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
	public final HiveASTParser.columnNameColonType_return columnNameColonType() throws RecognitionException {
		HiveASTParser.columnNameColonType_return retval = new HiveASTParser.columnNameColonType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token comment=null;
		Token COLON909=null;
		Token KW_COMMENT911=null;
		ParserRuleReturnScope colName =null;
		ParserRuleReturnScope colType910 =null;

		HiveParserASTNode comment_tree=null;
		HiveParserASTNode COLON909_tree=null;
		HiveParserASTNode KW_COMMENT911_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 pushMsg("column specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2404:5: (colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2404:7: colName= identifier COLON colType ( KW_COMMENT comment= StringLiteral )?
			{
			pushFollow(FOLLOW_identifier_in_columnNameColonType15179);
			colName=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(colName.getTree());
			COLON909=(Token)match(input,COLON,FOLLOW_COLON_in_columnNameColonType15181); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COLON.add(COLON909);

			pushFollow(FOLLOW_colType_in_columnNameColonType15183);
			colType910=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType910.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2404:40: ( KW_COMMENT comment= StringLiteral )?
			int alt277=2;
			int LA277_0 = input.LA(1);
			if ( (LA277_0==KW_COMMENT) ) {
				alt277=1;
			}
			switch (alt277) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2404:41: KW_COMMENT comment= StringLiteral
					{
					KW_COMMENT911=(Token)match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameColonType15186); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_COMMENT.add(KW_COMMENT911);

					comment=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameColonType15190); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(comment);

					}
					break;

			}

			// AST REWRITE
			// elements: colName, colType, colName, comment, colType
			// token labels: comment
			// rule labels: colName, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
			RewriteRuleSubtreeStream stream_colName=new RewriteRuleSubtreeStream(adaptor,"rule colName",colName!=null?colName.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2405:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
			if (comment == null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2405:28: ^( TOK_TABCOL $colName colType )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2406:5: -> ^( TOK_TABCOL $colName colType $comment)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2406:28: ^( TOK_TABCOL $colName colType $comment)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);
				adaptor.addChild(root_1, stream_colName.nextTree());
				adaptor.addChild(root_1, stream_colType.nextTree());
				adaptor.addChild(root_1, stream_comment.nextNode());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnNameColonType"


	public static class colType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "colType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2409:1: colType : type ;
	public final HiveASTParser.colType_return colType() throws RecognitionException {
		HiveASTParser.colType_return retval = new HiveASTParser.colType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope type912 =null;


		 pushMsg("column type", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2412:5: ( type )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2412:7: type
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			pushFollow(FOLLOW_type_in_colType15274);
			type912=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, type912.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colType"


	public static class colTypeList_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "colTypeList"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2415:1: colTypeList : colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) ;
	public final HiveASTParser.colTypeList_return colTypeList() throws RecognitionException {
		HiveASTParser.colTypeList_return retval = new HiveASTParser.colTypeList_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token COMMA914=null;
		ParserRuleReturnScope colType913 =null;
		ParserRuleReturnScope colType915 =null;

		HiveParserASTNode COMMA914_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");

		 pushMsg("column type list", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2418:5: ( colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2418:7: colType ( COMMA colType )*
			{
			pushFollow(FOLLOW_colType_in_colTypeList15301);
			colType913=colType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colType.add(colType913.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2418:15: ( COMMA colType )*
			loop278:
			while (true) {
				int alt278=2;
				int LA278_0 = input.LA(1);
				if ( (LA278_0==COMMA) ) {
					alt278=1;
				}

				switch (alt278) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2418:16: COMMA colType
					{
					COMMA914=(Token)match(input,COMMA,FOLLOW_COMMA_in_colTypeList15304); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA914);

					pushFollow(FOLLOW_colType_in_colTypeList15306);
					colType915=colType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_colType.add(colType915.getTree());
					}
					break;

				default :
					break loop278;
				}
			}

			// AST REWRITE
			// elements: colType
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2418:32: -> ^( TOK_COLTYPELIST ( colType )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2418:35: ^( TOK_COLTYPELIST ( colType )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_COLTYPELIST, "TOK_COLTYPELIST"), root_1);
				if ( !(stream_colType.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_colType.hasNext() ) {
					adaptor.addChild(root_1, stream_colType.nextTree());
				}
				stream_colType.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "colTypeList"


	public static class type_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "type"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2421:1: type : ( primitiveType | listType | structType | mapType | unionType );
	public final HiveASTParser.type_return type() throws RecognitionException {
		HiveASTParser.type_return retval = new HiveASTParser.type_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope primitiveType916 =null;
		ParserRuleReturnScope listType917 =null;
		ParserRuleReturnScope structType918 =null;
		ParserRuleReturnScope mapType919 =null;
		ParserRuleReturnScope unionType920 =null;


		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2422:5: ( primitiveType | listType | structType | mapType | unionType )
			int alt279=5;
			switch ( input.LA(1) ) {
			case KW_BIGINT:
			case KW_BINARY:
			case KW_BOOLEAN:
			case KW_CHAR:
			case KW_DATE:
			case KW_DATETIME:
			case KW_DECIMAL:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_INT:
			case KW_SMALLINT:
			case KW_STRING:
			case KW_TIMESTAMP:
			case KW_TINYINT:
			case KW_VARCHAR:
				{
				alt279=1;
				}
				break;
			case KW_ARRAY:
				{
				alt279=2;
				}
				break;
			case KW_STRUCT:
				{
				alt279=3;
				}
				break;
			case KW_MAP:
				{
				alt279=4;
				}
				break;
			case KW_UNIONTYPE:
				{
				alt279=5;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 279, 0, input);
				throw nvae;
			}
			switch (alt279) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2422:7: primitiveType
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_primitiveType_in_type15334);
					primitiveType916=primitiveType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, primitiveType916.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2423:7: listType
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_listType_in_type15342);
					listType917=listType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, listType917.getTree());

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2424:7: structType
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_structType_in_type15350);
					structType918=structType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, structType918.getTree());

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2425:7: mapType
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_mapType_in_type15358);
					mapType919=mapType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, mapType919.getTree());

					}
					break;
				case 5 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2426:7: unionType
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_unionType_in_type15366);
					unionType920=unionType();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, unionType920.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "type"


	public static class primitiveType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "primitiveType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2428:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE ( KW_PRECISION )? -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) );
	public final HiveASTParser.primitiveType_return primitiveType() throws RecognitionException {
		HiveASTParser.primitiveType_return retval = new HiveASTParser.primitiveType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token prec=null;
		Token scale=null;
		Token length=null;
		Token KW_TINYINT921=null;
		Token KW_SMALLINT922=null;
		Token KW_INT923=null;
		Token KW_BIGINT924=null;
		Token KW_BOOLEAN925=null;
		Token KW_FLOAT926=null;
		Token KW_DOUBLE927=null;
		Token KW_PRECISION928=null;
		Token KW_DATE929=null;
		Token KW_DATETIME930=null;
		Token KW_TIMESTAMP931=null;
		Token KW_STRING932=null;
		Token KW_BINARY933=null;
		Token KW_DECIMAL934=null;
		Token LPAREN935=null;
		Token COMMA936=null;
		Token RPAREN937=null;
		Token KW_VARCHAR938=null;
		Token LPAREN939=null;
		Token RPAREN940=null;
		Token KW_CHAR941=null;
		Token LPAREN942=null;
		Token RPAREN943=null;

		HiveParserASTNode prec_tree=null;
		HiveParserASTNode scale_tree=null;
		HiveParserASTNode length_tree=null;
		HiveParserASTNode KW_TINYINT921_tree=null;
		HiveParserASTNode KW_SMALLINT922_tree=null;
		HiveParserASTNode KW_INT923_tree=null;
		HiveParserASTNode KW_BIGINT924_tree=null;
		HiveParserASTNode KW_BOOLEAN925_tree=null;
		HiveParserASTNode KW_FLOAT926_tree=null;
		HiveParserASTNode KW_DOUBLE927_tree=null;
		HiveParserASTNode KW_PRECISION928_tree=null;
		HiveParserASTNode KW_DATE929_tree=null;
		HiveParserASTNode KW_DATETIME930_tree=null;
		HiveParserASTNode KW_TIMESTAMP931_tree=null;
		HiveParserASTNode KW_STRING932_tree=null;
		HiveParserASTNode KW_BINARY933_tree=null;
		HiveParserASTNode KW_DECIMAL934_tree=null;
		HiveParserASTNode LPAREN935_tree=null;
		HiveParserASTNode COMMA936_tree=null;
		HiveParserASTNode RPAREN937_tree=null;
		HiveParserASTNode KW_VARCHAR938_tree=null;
		HiveParserASTNode LPAREN939_tree=null;
		HiveParserASTNode RPAREN940_tree=null;
		HiveParserASTNode KW_CHAR941_tree=null;
		HiveParserASTNode LPAREN942_tree=null;
		HiveParserASTNode RPAREN943_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_SMALLINT=new RewriteRuleTokenStream(adaptor,"token KW_SMALLINT");
		RewriteRuleTokenStream stream_KW_DATE=new RewriteRuleTokenStream(adaptor,"token KW_DATE");
		RewriteRuleTokenStream stream_KW_DATETIME=new RewriteRuleTokenStream(adaptor,"token KW_DATETIME");
		RewriteRuleTokenStream stream_KW_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMP");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_BOOLEAN=new RewriteRuleTokenStream(adaptor,"token KW_BOOLEAN");
		RewriteRuleTokenStream stream_KW_DOUBLE=new RewriteRuleTokenStream(adaptor,"token KW_DOUBLE");
		RewriteRuleTokenStream stream_KW_BIGINT=new RewriteRuleTokenStream(adaptor,"token KW_BIGINT");
		RewriteRuleTokenStream stream_KW_CHAR=new RewriteRuleTokenStream(adaptor,"token KW_CHAR");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_INT=new RewriteRuleTokenStream(adaptor,"token KW_INT");
		RewriteRuleTokenStream stream_KW_STRING=new RewriteRuleTokenStream(adaptor,"token KW_STRING");
		RewriteRuleTokenStream stream_KW_DECIMAL=new RewriteRuleTokenStream(adaptor,"token KW_DECIMAL");
		RewriteRuleTokenStream stream_KW_VARCHAR=new RewriteRuleTokenStream(adaptor,"token KW_VARCHAR");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_FLOAT=new RewriteRuleTokenStream(adaptor,"token KW_FLOAT");
		RewriteRuleTokenStream stream_KW_TINYINT=new RewriteRuleTokenStream(adaptor,"token KW_TINYINT");
		RewriteRuleTokenStream stream_KW_PRECISION=new RewriteRuleTokenStream(adaptor,"token KW_PRECISION");
		RewriteRuleTokenStream stream_KW_BINARY=new RewriteRuleTokenStream(adaptor,"token KW_BINARY");

		 pushMsg("primitive type specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2431:5: ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE ( KW_PRECISION )? -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY | KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )? -> ^( TOK_DECIMAL ( $prec)? ( $scale)? ) | KW_VARCHAR LPAREN length= Number RPAREN -> ^( TOK_VARCHAR $length) | KW_CHAR LPAREN length= Number RPAREN -> ^( TOK_CHAR $length) )
			int alt283=15;
			switch ( input.LA(1) ) {
			case KW_TINYINT:
				{
				alt283=1;
				}
				break;
			case KW_SMALLINT:
				{
				alt283=2;
				}
				break;
			case KW_INT:
				{
				alt283=3;
				}
				break;
			case KW_BIGINT:
				{
				alt283=4;
				}
				break;
			case KW_BOOLEAN:
				{
				alt283=5;
				}
				break;
			case KW_FLOAT:
				{
				alt283=6;
				}
				break;
			case KW_DOUBLE:
				{
				alt283=7;
				}
				break;
			case KW_DATE:
				{
				alt283=8;
				}
				break;
			case KW_DATETIME:
				{
				alt283=9;
				}
				break;
			case KW_TIMESTAMP:
				{
				alt283=10;
				}
				break;
			case KW_STRING:
				{
				alt283=11;
				}
				break;
			case KW_BINARY:
				{
				alt283=12;
				}
				break;
			case KW_DECIMAL:
				{
				alt283=13;
				}
				break;
			case KW_VARCHAR:
				{
				alt283=14;
				}
				break;
			case KW_CHAR:
				{
				alt283=15;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 283, 0, input);
				throw nvae;
			}
			switch (alt283) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2431:7: KW_TINYINT
					{
					KW_TINYINT921=(Token)match(input,KW_TINYINT,FOLLOW_KW_TINYINT_in_primitiveType15388); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TINYINT.add(KW_TINYINT921);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2431:24: -> TOK_TINYINT
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_TINYINT, "TOK_TINYINT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2432:7: KW_SMALLINT
					{
					KW_SMALLINT922=(Token)match(input,KW_SMALLINT,FOLLOW_KW_SMALLINT_in_primitiveType15409); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_SMALLINT.add(KW_SMALLINT922);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2432:24: -> TOK_SMALLINT
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_SMALLINT, "TOK_SMALLINT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2433:7: KW_INT
					{
					KW_INT923=(Token)match(input,KW_INT,FOLLOW_KW_INT_in_primitiveType15429); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INT.add(KW_INT923);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2433:24: -> TOK_INT
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_INT, "TOK_INT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2434:7: KW_BIGINT
					{
					KW_BIGINT924=(Token)match(input,KW_BIGINT,FOLLOW_KW_BIGINT_in_primitiveType15454); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BIGINT.add(KW_BIGINT924);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2434:24: -> TOK_BIGINT
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_BIGINT, "TOK_BIGINT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2435:7: KW_BOOLEAN
					{
					KW_BOOLEAN925=(Token)match(input,KW_BOOLEAN,FOLLOW_KW_BOOLEAN_in_primitiveType15476); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BOOLEAN.add(KW_BOOLEAN925);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2435:24: -> TOK_BOOLEAN
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_BOOLEAN, "TOK_BOOLEAN"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2436:7: KW_FLOAT
					{
					KW_FLOAT926=(Token)match(input,KW_FLOAT,FOLLOW_KW_FLOAT_in_primitiveType15497); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_FLOAT.add(KW_FLOAT926);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2436:24: -> TOK_FLOAT
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_FLOAT, "TOK_FLOAT"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2437:7: KW_DOUBLE ( KW_PRECISION )?
					{
					KW_DOUBLE927=(Token)match(input,KW_DOUBLE,FOLLOW_KW_DOUBLE_in_primitiveType15520); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DOUBLE.add(KW_DOUBLE927);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2437:17: ( KW_PRECISION )?
					int alt280=2;
					int LA280_0 = input.LA(1);
					if ( (LA280_0==KW_PRECISION) ) {
						alt280=1;
					}
					switch (alt280) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2437:17: KW_PRECISION
							{
							KW_PRECISION928=(Token)match(input,KW_PRECISION,FOLLOW_KW_PRECISION_in_primitiveType15522); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_PRECISION.add(KW_PRECISION928);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2437:37: -> TOK_DOUBLE
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_DOUBLE, "TOK_DOUBLE"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2438:7: KW_DATE
					{
					KW_DATE929=(Token)match(input,KW_DATE,FOLLOW_KW_DATE_in_primitiveType15544); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATE.add(KW_DATE929);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2438:24: -> TOK_DATE
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_DATE, "TOK_DATE"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 9 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2439:7: KW_DATETIME
					{
					KW_DATETIME930=(Token)match(input,KW_DATETIME,FOLLOW_KW_DATETIME_in_primitiveType15568); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DATETIME.add(KW_DATETIME930);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2439:24: -> TOK_DATETIME
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_DATETIME, "TOK_DATETIME"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 10 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2440:7: KW_TIMESTAMP
					{
					KW_TIMESTAMP931=(Token)match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType15588); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TIMESTAMP.add(KW_TIMESTAMP931);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2440:24: -> TOK_TIMESTAMP
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_TIMESTAMP, "TOK_TIMESTAMP"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 11 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2444:7: KW_STRING
					{
					KW_STRING932=(Token)match(input,KW_STRING,FOLLOW_KW_STRING_in_primitiveType15622); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_STRING.add(KW_STRING932);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2444:24: -> TOK_STRING
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_STRING, "TOK_STRING"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 12 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2445:7: KW_BINARY
					{
					KW_BINARY933=(Token)match(input,KW_BINARY,FOLLOW_KW_BINARY_in_primitiveType15644); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_BINARY.add(KW_BINARY933);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2445:24: -> TOK_BINARY
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_BINARY, "TOK_BINARY"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 13 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2446:7: KW_DECIMAL ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
					{
					KW_DECIMAL934=(Token)match(input,KW_DECIMAL,FOLLOW_KW_DECIMAL_in_primitiveType15666); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DECIMAL.add(KW_DECIMAL934);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2446:18: ( LPAREN prec= Number ( COMMA scale= Number )? RPAREN )?
					int alt282=2;
					int LA282_0 = input.LA(1);
					if ( (LA282_0==LPAREN) ) {
						alt282=1;
					}
					switch (alt282) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2446:19: LPAREN prec= Number ( COMMA scale= Number )? RPAREN
							{
							LPAREN935=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType15669); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN935);

							prec=(Token)match(input,Number,FOLLOW_Number_in_primitiveType15673); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Number.add(prec);

							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2446:38: ( COMMA scale= Number )?
							int alt281=2;
							int LA281_0 = input.LA(1);
							if ( (LA281_0==COMMA) ) {
								alt281=1;
							}
							switch (alt281) {
								case 1 :
									// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2446:39: COMMA scale= Number
									{
									COMMA936=(Token)match(input,COMMA,FOLLOW_COMMA_in_primitiveType15676); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_COMMA.add(COMMA936);

									scale=(Token)match(input,Number,FOLLOW_Number_in_primitiveType15680); if (state.failed) return retval; 
									if ( state.backtracking==0 ) stream_Number.add(scale);

									}
									break;

							}

							RPAREN937=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType15684); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN937);

							}
							break;

					}

					// AST REWRITE
					// elements: prec, scale
					// token labels: prec, scale
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_prec=new RewriteRuleTokenStream(adaptor,"token prec",prec);
					RewriteRuleTokenStream stream_scale=new RewriteRuleTokenStream(adaptor,"token scale",scale);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2446:69: -> ^( TOK_DECIMAL ( $prec)? ( $scale)? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2446:72: ^( TOK_DECIMAL ( $prec)? ( $scale)? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DECIMAL, "TOK_DECIMAL"), root_1);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2446:87: ( $prec)?
						if ( stream_prec.hasNext() ) {
							adaptor.addChild(root_1, stream_prec.nextNode());
						}
						stream_prec.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2446:94: ( $scale)?
						if ( stream_scale.hasNext() ) {
							adaptor.addChild(root_1, stream_scale.nextNode());
						}
						stream_scale.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 14 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2447:7: KW_VARCHAR LPAREN length= Number RPAREN
					{
					KW_VARCHAR938=(Token)match(input,KW_VARCHAR,FOLLOW_KW_VARCHAR_in_primitiveType15708); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_VARCHAR.add(KW_VARCHAR938);

					LPAREN939=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType15710); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN939);

					length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType15714); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(length);

					RPAREN940=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType15716); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN940);

					// AST REWRITE
					// elements: length
					// token labels: length
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2447:51: -> ^( TOK_VARCHAR $length)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2447:57: ^( TOK_VARCHAR $length)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_VARCHAR, "TOK_VARCHAR"), root_1);
						adaptor.addChild(root_1, stream_length.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 15 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2448:7: KW_CHAR LPAREN length= Number RPAREN
					{
					KW_CHAR941=(Token)match(input,KW_CHAR,FOLLOW_KW_CHAR_in_primitiveType15741); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_CHAR.add(KW_CHAR941);

					LPAREN942=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_primitiveType15743); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN942);

					length=(Token)match(input,Number,FOLLOW_Number_in_primitiveType15747); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(length);

					RPAREN943=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_primitiveType15749); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN943);

					// AST REWRITE
					// elements: length
					// token labels: length
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_length=new RewriteRuleTokenStream(adaptor,"token length",length);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2448:48: -> ^( TOK_CHAR $length)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2448:54: ^( TOK_CHAR $length)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CHAR, "TOK_CHAR"), root_1);
						adaptor.addChild(root_1, stream_length.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "primitiveType"


	public static class listType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "listType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2451:1: listType : KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) ;
	public final HiveASTParser.listType_return listType() throws RecognitionException {
		HiveASTParser.listType_return retval = new HiveASTParser.listType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ARRAY944=null;
		Token LESSTHAN945=null;
		Token GREATERTHAN947=null;
		ParserRuleReturnScope type946 =null;

		HiveParserASTNode KW_ARRAY944_tree=null;
		HiveParserASTNode LESSTHAN945_tree=null;
		HiveParserASTNode GREATERTHAN947_tree=null;
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_KW_ARRAY=new RewriteRuleTokenStream(adaptor,"token KW_ARRAY");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");

		 pushMsg("list type", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2454:5: ( KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2454:7: KW_ARRAY LESSTHAN type GREATERTHAN
			{
			KW_ARRAY944=(Token)match(input,KW_ARRAY,FOLLOW_KW_ARRAY_in_listType15793); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ARRAY.add(KW_ARRAY944);

			LESSTHAN945=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_listType15795); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN945);

			pushFollow(FOLLOW_type_in_listType15797);
			type946=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type.add(type946.getTree());
			GREATERTHAN947=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_listType15799); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN947);

			// AST REWRITE
			// elements: type
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2454:44: -> ^( TOK_LIST type )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2454:47: ^( TOK_LIST type )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_LIST, "TOK_LIST"), root_1);
				adaptor.addChild(root_1, stream_type.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "listType"


	public static class structType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "structType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2457:1: structType : KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) ;
	public final HiveASTParser.structType_return structType() throws RecognitionException {
		HiveASTParser.structType_return retval = new HiveASTParser.structType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_STRUCT948=null;
		Token LESSTHAN949=null;
		Token GREATERTHAN951=null;
		ParserRuleReturnScope columnNameColonTypeList950 =null;

		HiveParserASTNode KW_STRUCT948_tree=null;
		HiveParserASTNode LESSTHAN949_tree=null;
		HiveParserASTNode GREATERTHAN951_tree=null;
		RewriteRuleTokenStream stream_KW_STRUCT=new RewriteRuleTokenStream(adaptor,"token KW_STRUCT");
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_columnNameColonTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonTypeList");

		 pushMsg("struct type", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2460:5: ( KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2460:7: KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN
			{
			KW_STRUCT948=(Token)match(input,KW_STRUCT,FOLLOW_KW_STRUCT_in_structType15836); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_STRUCT.add(KW_STRUCT948);

			LESSTHAN949=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_structType15838); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN949);

			pushFollow(FOLLOW_columnNameColonTypeList_in_structType15840);
			columnNameColonTypeList950=columnNameColonTypeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnNameColonTypeList.add(columnNameColonTypeList950.getTree());
			GREATERTHAN951=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_structType15842); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN951);

			// AST REWRITE
			// elements: columnNameColonTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2460:62: -> ^( TOK_STRUCT columnNameColonTypeList )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2460:65: ^( TOK_STRUCT columnNameColonTypeList )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_STRUCT, "TOK_STRUCT"), root_1);
				adaptor.addChild(root_1, stream_columnNameColonTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "structType"


	public static class mapType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "mapType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2463:1: mapType : KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) ;
	public final HiveASTParser.mapType_return mapType() throws RecognitionException {
		HiveASTParser.mapType_return retval = new HiveASTParser.mapType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_MAP952=null;
		Token LESSTHAN953=null;
		Token COMMA954=null;
		Token GREATERTHAN955=null;
		ParserRuleReturnScope left =null;
		ParserRuleReturnScope right =null;

		HiveParserASTNode KW_MAP952_tree=null;
		HiveParserASTNode LESSTHAN953_tree=null;
		HiveParserASTNode COMMA954_tree=null;
		HiveParserASTNode GREATERTHAN955_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
		RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");

		 pushMsg("map type", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2466:5: ( KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2466:7: KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN
			{
			KW_MAP952=(Token)match(input,KW_MAP,FOLLOW_KW_MAP_in_mapType15877); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MAP.add(KW_MAP952);

			LESSTHAN953=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_mapType15879); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN953);

			pushFollow(FOLLOW_primitiveType_in_mapType15883);
			left=primitiveType();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_primitiveType.add(left.getTree());
			COMMA954=(Token)match(input,COMMA,FOLLOW_COMMA_in_mapType15885); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_COMMA.add(COMMA954);

			pushFollow(FOLLOW_type_in_mapType15889);
			right=type();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_type.add(right.getTree());
			GREATERTHAN955=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_mapType15891); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN955);

			// AST REWRITE
			// elements: left, right
			// token labels: 
			// rule labels: left, right, retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.getTree():null);
			RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"rule right",right!=null?right.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2467:5: -> ^( TOK_MAP $left $right)
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2467:8: ^( TOK_MAP $left $right)
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_MAP, "TOK_MAP"), root_1);
				adaptor.addChild(root_1, stream_left.nextTree());
				adaptor.addChild(root_1, stream_right.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "mapType"


	public static class unionType_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "unionType"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2470:1: unionType : KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) ;
	public final HiveASTParser.unionType_return unionType() throws RecognitionException {
		HiveASTParser.unionType_return retval = new HiveASTParser.unionType_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_UNIONTYPE956=null;
		Token LESSTHAN957=null;
		Token GREATERTHAN959=null;
		ParserRuleReturnScope colTypeList958 =null;

		HiveParserASTNode KW_UNIONTYPE956_tree=null;
		HiveParserASTNode LESSTHAN957_tree=null;
		HiveParserASTNode GREATERTHAN959_tree=null;
		RewriteRuleTokenStream stream_KW_UNIONTYPE=new RewriteRuleTokenStream(adaptor,"token KW_UNIONTYPE");
		RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
		RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
		RewriteRuleSubtreeStream stream_colTypeList=new RewriteRuleSubtreeStream(adaptor,"rule colTypeList");

		 pushMsg("uniontype type", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2473:5: ( KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2473:7: KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN
			{
			KW_UNIONTYPE956=(Token)match(input,KW_UNIONTYPE,FOLLOW_KW_UNIONTYPE_in_unionType15934); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UNIONTYPE.add(KW_UNIONTYPE956);

			LESSTHAN957=(Token)match(input,LESSTHAN,FOLLOW_LESSTHAN_in_unionType15936); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LESSTHAN.add(LESSTHAN957);

			pushFollow(FOLLOW_colTypeList_in_unionType15938);
			colTypeList958=colTypeList();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_colTypeList.add(colTypeList958.getTree());
			GREATERTHAN959=(Token)match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_unionType15940); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_GREATERTHAN.add(GREATERTHAN959);

			// AST REWRITE
			// elements: colTypeList
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2473:53: -> ^( TOK_UNIONTYPE colTypeList )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2473:56: ^( TOK_UNIONTYPE colTypeList )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_UNIONTYPE, "TOK_UNIONTYPE"), root_1);
				adaptor.addChild(root_1, stream_colTypeList.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "unionType"


	public static class setOperator_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "setOperator"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2476:1: setOperator : ( KW_UNION KW_ALL -> ^( TOK_UNIONALL ) | KW_UNION ( KW_DISTINCT )? -> ^( TOK_UNIONDISTINCT ) | KW_INTERSECT KW_ALL -> ^( TOK_INTERSECTALL ) | KW_INTERSECT ( KW_DISTINCT )? -> ^( TOK_INTERSECTDISTINCT ) | KW_EXCEPT KW_ALL -> ^( TOK_EXCEPTALL ) | KW_EXCEPT ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) | KW_MINUS KW_ALL -> ^( TOK_EXCEPTALL ) | KW_MINUS ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) );
	public final HiveASTParser.setOperator_return setOperator() throws RecognitionException {
		HiveASTParser.setOperator_return retval = new HiveASTParser.setOperator_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_UNION960=null;
		Token KW_ALL961=null;
		Token KW_UNION962=null;
		Token KW_DISTINCT963=null;
		Token KW_INTERSECT964=null;
		Token KW_ALL965=null;
		Token KW_INTERSECT966=null;
		Token KW_DISTINCT967=null;
		Token KW_EXCEPT968=null;
		Token KW_ALL969=null;
		Token KW_EXCEPT970=null;
		Token KW_DISTINCT971=null;
		Token KW_MINUS972=null;
		Token KW_ALL973=null;
		Token KW_MINUS974=null;
		Token KW_DISTINCT975=null;

		HiveParserASTNode KW_UNION960_tree=null;
		HiveParserASTNode KW_ALL961_tree=null;
		HiveParserASTNode KW_UNION962_tree=null;
		HiveParserASTNode KW_DISTINCT963_tree=null;
		HiveParserASTNode KW_INTERSECT964_tree=null;
		HiveParserASTNode KW_ALL965_tree=null;
		HiveParserASTNode KW_INTERSECT966_tree=null;
		HiveParserASTNode KW_DISTINCT967_tree=null;
		HiveParserASTNode KW_EXCEPT968_tree=null;
		HiveParserASTNode KW_ALL969_tree=null;
		HiveParserASTNode KW_EXCEPT970_tree=null;
		HiveParserASTNode KW_DISTINCT971_tree=null;
		HiveParserASTNode KW_MINUS972_tree=null;
		HiveParserASTNode KW_ALL973_tree=null;
		HiveParserASTNode KW_MINUS974_tree=null;
		HiveParserASTNode KW_DISTINCT975_tree=null;
		RewriteRuleTokenStream stream_KW_INTERSECT=new RewriteRuleTokenStream(adaptor,"token KW_INTERSECT");
		RewriteRuleTokenStream stream_KW_EXCEPT=new RewriteRuleTokenStream(adaptor,"token KW_EXCEPT");
		RewriteRuleTokenStream stream_KW_UNION=new RewriteRuleTokenStream(adaptor,"token KW_UNION");
		RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
		RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
		RewriteRuleTokenStream stream_KW_MINUS=new RewriteRuleTokenStream(adaptor,"token KW_MINUS");

		 pushMsg("set operator", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2479:5: ( KW_UNION KW_ALL -> ^( TOK_UNIONALL ) | KW_UNION ( KW_DISTINCT )? -> ^( TOK_UNIONDISTINCT ) | KW_INTERSECT KW_ALL -> ^( TOK_INTERSECTALL ) | KW_INTERSECT ( KW_DISTINCT )? -> ^( TOK_INTERSECTDISTINCT ) | KW_EXCEPT KW_ALL -> ^( TOK_EXCEPTALL ) | KW_EXCEPT ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) | KW_MINUS KW_ALL -> ^( TOK_EXCEPTALL ) | KW_MINUS ( KW_DISTINCT )? -> ^( TOK_EXCEPTDISTINCT ) )
			int alt288=8;
			switch ( input.LA(1) ) {
			case KW_UNION:
				{
				int LA288_1 = input.LA(2);
				if ( (LA288_1==KW_ALL) ) {
					alt288=1;
				}
				else if ( (LA288_1==KW_DISTINCT||LA288_1==KW_FROM||LA288_1==KW_MAP||LA288_1==KW_REDUCE||LA288_1==KW_SELECT||LA288_1==LPAREN) ) {
					alt288=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 288, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_INTERSECT:
				{
				int LA288_2 = input.LA(2);
				if ( (LA288_2==KW_ALL) ) {
					alt288=3;
				}
				else if ( (LA288_2==KW_DISTINCT||LA288_2==KW_FROM||LA288_2==KW_MAP||LA288_2==KW_REDUCE||LA288_2==KW_SELECT||LA288_2==LPAREN) ) {
					alt288=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 288, 2, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_EXCEPT:
				{
				int LA288_3 = input.LA(2);
				if ( (LA288_3==KW_ALL) ) {
					alt288=5;
				}
				else if ( (LA288_3==KW_DISTINCT||LA288_3==KW_FROM||LA288_3==KW_MAP||LA288_3==KW_REDUCE||LA288_3==KW_SELECT||LA288_3==LPAREN) ) {
					alt288=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 288, 3, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case KW_MINUS:
				{
				int LA288_4 = input.LA(2);
				if ( (LA288_4==KW_ALL) ) {
					alt288=7;
				}
				else if ( (LA288_4==KW_DISTINCT||LA288_4==KW_FROM||LA288_4==KW_MAP||LA288_4==KW_REDUCE||LA288_4==KW_SELECT||LA288_4==LPAREN) ) {
					alt288=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 288, 4, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 288, 0, input);
				throw nvae;
			}
			switch (alt288) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2479:7: KW_UNION KW_ALL
					{
					KW_UNION960=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_setOperator15975); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNION.add(KW_UNION960);

					KW_ALL961=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator15977); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL961);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2479:23: -> ^( TOK_UNIONALL )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2479:26: ^( TOK_UNIONALL )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2480:7: KW_UNION ( KW_DISTINCT )?
					{
					KW_UNION962=(Token)match(input,KW_UNION,FOLLOW_KW_UNION_in_setOperator15991); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UNION.add(KW_UNION962);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2480:16: ( KW_DISTINCT )?
					int alt284=2;
					int LA284_0 = input.LA(1);
					if ( (LA284_0==KW_DISTINCT) ) {
						alt284=1;
					}
					switch (alt284) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2480:16: KW_DISTINCT
							{
							KW_DISTINCT963=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator15993); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT963);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2480:29: -> ^( TOK_UNIONDISTINCT )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2480:32: ^( TOK_UNIONDISTINCT )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_UNIONDISTINCT, "TOK_UNIONDISTINCT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2481:7: KW_INTERSECT KW_ALL
					{
					KW_INTERSECT964=(Token)match(input,KW_INTERSECT,FOLLOW_KW_INTERSECT_in_setOperator16008); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INTERSECT.add(KW_INTERSECT964);

					KW_ALL965=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator16010); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL965);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2481:27: -> ^( TOK_INTERSECTALL )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2481:30: ^( TOK_INTERSECTALL )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INTERSECTALL, "TOK_INTERSECTALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2482:7: KW_INTERSECT ( KW_DISTINCT )?
					{
					KW_INTERSECT966=(Token)match(input,KW_INTERSECT,FOLLOW_KW_INTERSECT_in_setOperator16024); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INTERSECT.add(KW_INTERSECT966);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2482:20: ( KW_DISTINCT )?
					int alt285=2;
					int LA285_0 = input.LA(1);
					if ( (LA285_0==KW_DISTINCT) ) {
						alt285=1;
					}
					switch (alt285) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2482:20: KW_DISTINCT
							{
							KW_DISTINCT967=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator16026); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT967);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2482:33: -> ^( TOK_INTERSECTDISTINCT )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2482:36: ^( TOK_INTERSECTDISTINCT )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INTERSECTDISTINCT, "TOK_INTERSECTDISTINCT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 5 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2483:7: KW_EXCEPT KW_ALL
					{
					KW_EXCEPT968=(Token)match(input,KW_EXCEPT,FOLLOW_KW_EXCEPT_in_setOperator16041); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXCEPT.add(KW_EXCEPT968);

					KW_ALL969=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator16043); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL969);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2483:24: -> ^( TOK_EXCEPTALL )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2483:27: ^( TOK_EXCEPTALL )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_EXCEPTALL, "TOK_EXCEPTALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 6 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2484:7: KW_EXCEPT ( KW_DISTINCT )?
					{
					KW_EXCEPT970=(Token)match(input,KW_EXCEPT,FOLLOW_KW_EXCEPT_in_setOperator16057); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_EXCEPT.add(KW_EXCEPT970);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2484:17: ( KW_DISTINCT )?
					int alt286=2;
					int LA286_0 = input.LA(1);
					if ( (LA286_0==KW_DISTINCT) ) {
						alt286=1;
					}
					switch (alt286) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2484:17: KW_DISTINCT
							{
							KW_DISTINCT971=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator16059); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT971);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2484:30: -> ^( TOK_EXCEPTDISTINCT )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2484:33: ^( TOK_EXCEPTDISTINCT )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_EXCEPTDISTINCT, "TOK_EXCEPTDISTINCT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 7 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2485:7: KW_MINUS KW_ALL
					{
					KW_MINUS972=(Token)match(input,KW_MINUS,FOLLOW_KW_MINUS_in_setOperator16074); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_MINUS.add(KW_MINUS972);

					KW_ALL973=(Token)match(input,KW_ALL,FOLLOW_KW_ALL_in_setOperator16076); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ALL.add(KW_ALL973);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2485:23: -> ^( TOK_EXCEPTALL )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2485:26: ^( TOK_EXCEPTALL )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_EXCEPTALL, "TOK_EXCEPTALL"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 8 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2486:7: KW_MINUS ( KW_DISTINCT )?
					{
					KW_MINUS974=(Token)match(input,KW_MINUS,FOLLOW_KW_MINUS_in_setOperator16090); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_MINUS.add(KW_MINUS974);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2486:16: ( KW_DISTINCT )?
					int alt287=2;
					int LA287_0 = input.LA(1);
					if ( (LA287_0==KW_DISTINCT) ) {
						alt287=1;
					}
					switch (alt287) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2486:16: KW_DISTINCT
							{
							KW_DISTINCT975=(Token)match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_setOperator16092); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_DISTINCT.add(KW_DISTINCT975);

							}
							break;

					}

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2486:29: -> ^( TOK_EXCEPTDISTINCT )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2486:32: ^( TOK_EXCEPTDISTINCT )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_EXCEPTDISTINCT, "TOK_EXCEPTDISTINCT"), root_1);
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setOperator"


	public static class queryStatementExpression_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "queryStatementExpression"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2489:1: queryStatementExpression : (w= withClause )? queryStatementExpressionBody -> queryStatementExpressionBody ;
	public final HiveASTParser.queryStatementExpression_return queryStatementExpression() throws RecognitionException {
		HiveASTParser.queryStatementExpression_return retval = new HiveASTParser.queryStatementExpression_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope w =null;
		ParserRuleReturnScope queryStatementExpressionBody976 =null;

		RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");
		RewriteRuleSubtreeStream stream_queryStatementExpressionBody=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpressionBody");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2490:5: ( (w= withClause )? queryStatementExpressionBody -> queryStatementExpressionBody )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2495:5: (w= withClause )? queryStatementExpressionBody
			{
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2495:5: (w= withClause )?
			int alt289=2;
			int LA289_0 = input.LA(1);
			if ( (LA289_0==KW_WITH) ) {
				alt289=1;
			}
			switch (alt289) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2495:6: w= withClause
					{
					pushFollow(FOLLOW_withClause_in_queryStatementExpression16129);
					w=withClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withClause.add(w.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_queryStatementExpressionBody_in_queryStatementExpression16137);
			queryStatementExpressionBody976=queryStatementExpressionBody();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_queryStatementExpressionBody.add(queryStatementExpressionBody976.getTree());
			if ( state.backtracking==0 ) {
			      if ((w!=null?((HiveParserASTNode)w.getTree()):null) != null) {
			      (queryStatementExpressionBody976!=null?((HiveParserASTNode)queryStatementExpressionBody976.getTree()):null).insertChild(0, (w!=null?((HiveParserASTNode)w.getTree()):null));
			      }
			    }
			// AST REWRITE
			// elements: queryStatementExpressionBody
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2501:5: -> queryStatementExpressionBody
			{
				adaptor.addChild(root_0, stream_queryStatementExpressionBody.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "queryStatementExpression"


	public static class queryStatementExpressionBody_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "queryStatementExpressionBody"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2504:1: queryStatementExpressionBody : ( fromStatement | regularBody );
	public final HiveASTParser.queryStatementExpressionBody_return queryStatementExpressionBody() throws RecognitionException {
		HiveASTParser.queryStatementExpressionBody_return retval = new HiveASTParser.queryStatementExpressionBody_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope fromStatement977 =null;
		ParserRuleReturnScope regularBody978 =null;


		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2505:5: ( fromStatement | regularBody )
			int alt290=2;
			int LA290_0 = input.LA(1);
			if ( (LA290_0==KW_FROM) ) {
				alt290=1;
			}
			else if ( (LA290_0==KW_INSERT||LA290_0==KW_MAP||LA290_0==KW_REDUCE||LA290_0==KW_SELECT||LA290_0==LPAREN) ) {
				alt290=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 290, 0, input);
				throw nvae;
			}

			switch (alt290) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2506:5: fromStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_fromStatement_in_queryStatementExpressionBody16169);
					fromStatement977=fromStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, fromStatement977.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2507:7: regularBody
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_regularBody_in_queryStatementExpressionBody16177);
					regularBody978=regularBody();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, regularBody978.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "queryStatementExpressionBody"


	public static class withClause_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "withClause"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2510:1: withClause : KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) ;
	public final HiveASTParser.withClause_return withClause() throws RecognitionException {
		HiveASTParser.withClause_return retval = new HiveASTParser.withClause_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_WITH979=null;
		Token COMMA981=null;
		ParserRuleReturnScope cteStatement980 =null;
		ParserRuleReturnScope cteStatement982 =null;

		HiveParserASTNode KW_WITH979_tree=null;
		HiveParserASTNode COMMA981_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
		RewriteRuleSubtreeStream stream_cteStatement=new RewriteRuleSubtreeStream(adaptor,"rule cteStatement");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2511:3: ( KW_WITH cteStatement ( COMMA cteStatement )* -> ^( TOK_CTE ( cteStatement )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2512:3: KW_WITH cteStatement ( COMMA cteStatement )*
			{
			KW_WITH979=(Token)match(input,KW_WITH,FOLLOW_KW_WITH_in_withClause16194); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WITH.add(KW_WITH979);

			pushFollow(FOLLOW_cteStatement_in_withClause16196);
			cteStatement980=cteStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_cteStatement.add(cteStatement980.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2512:24: ( COMMA cteStatement )*
			loop291:
			while (true) {
				int alt291=2;
				int LA291_0 = input.LA(1);
				if ( (LA291_0==COMMA) ) {
					alt291=1;
				}

				switch (alt291) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2512:25: COMMA cteStatement
					{
					COMMA981=(Token)match(input,COMMA,FOLLOW_COMMA_in_withClause16199); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA981);

					pushFollow(FOLLOW_cteStatement_in_withClause16201);
					cteStatement982=cteStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_cteStatement.add(cteStatement982.getTree());
					}
					break;

				default :
					break loop291;
				}
			}

			// AST REWRITE
			// elements: cteStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2512:46: -> ^( TOK_CTE ( cteStatement )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2512:49: ^( TOK_CTE ( cteStatement )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_CTE, "TOK_CTE"), root_1);
				if ( !(stream_cteStatement.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_cteStatement.hasNext() ) {
					adaptor.addChild(root_1, stream_cteStatement.nextTree());
				}
				stream_cteStatement.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "withClause"


	public static class cteStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "cteStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2515:1: cteStatement : identifier KW_AS LPAREN queryStatementExpression RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ) ;
	public final HiveASTParser.cteStatement_return cteStatement() throws RecognitionException {
		HiveASTParser.cteStatement_return retval = new HiveASTParser.cteStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_AS984=null;
		Token LPAREN985=null;
		Token RPAREN987=null;
		ParserRuleReturnScope identifier983 =null;
		ParserRuleReturnScope queryStatementExpression986 =null;

		HiveParserASTNode KW_AS984_tree=null;
		HiveParserASTNode LPAREN985_tree=null;
		HiveParserASTNode RPAREN987_tree=null;
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2516:4: ( identifier KW_AS LPAREN queryStatementExpression RPAREN -> ^( TOK_SUBQUERY queryStatementExpression identifier ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2517:4: identifier KW_AS LPAREN queryStatementExpression RPAREN
			{
			pushFollow(FOLLOW_identifier_in_cteStatement16227);
			identifier983=identifier();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_identifier.add(identifier983.getTree());
			KW_AS984=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_cteStatement16229); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS984);

			LPAREN985=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_cteStatement16231); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN985);

			pushFollow(FOLLOW_queryStatementExpression_in_cteStatement16233);
			queryStatementExpression986=queryStatementExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_queryStatementExpression.add(queryStatementExpression986.getTree());
			RPAREN987=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_cteStatement16235); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN987);

			// AST REWRITE
			// elements: identifier, queryStatementExpression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2518:4: -> ^( TOK_SUBQUERY queryStatementExpression identifier )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2518:7: ^( TOK_SUBQUERY queryStatementExpression identifier )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_1);
				adaptor.addChild(root_1, stream_queryStatementExpression.nextTree());
				adaptor.addChild(root_1, stream_identifier.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "cteStatement"


	public static class fromStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "fromStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2521:1: fromStatement : ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->;
	public final HiveASTParser.fromStatement_return fromStatement() throws RecognitionException {
		HiveASTParser.fromStatement_return retval = new HiveASTParser.fromStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope u =null;
		ParserRuleReturnScope r =null;
		ParserRuleReturnScope singleFromStatement988 =null;

		RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");
		RewriteRuleSubtreeStream stream_singleFromStatement=new RewriteRuleSubtreeStream(adaptor,"rule singleFromStatement");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2522:3: ( ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )* -> {u != null}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->)
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2522:3: ( singleFromStatement -> singleFromStatement ) (u= setOperator r= singleFromStatement -> ^( $u $r) )*
			{
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2522:3: ( singleFromStatement -> singleFromStatement )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2522:4: singleFromStatement
			{
			pushFollow(FOLLOW_singleFromStatement_in_fromStatement16258);
			singleFromStatement988=singleFromStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_singleFromStatement.add(singleFromStatement988.getTree());
			// AST REWRITE
			// elements: singleFromStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2522:25: -> singleFromStatement
			{
				adaptor.addChild(root_0, stream_singleFromStatement.nextTree());
			}


			retval.tree = root_0;
			}

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2523:2: (u= setOperator r= singleFromStatement -> ^( $u $r) )*
			loop292:
			while (true) {
				int alt292=2;
				int LA292_0 = input.LA(1);
				if ( (LA292_0==KW_EXCEPT||LA292_0==KW_INTERSECT||LA292_0==KW_MINUS||LA292_0==KW_UNION) ) {
					alt292=1;
				}

				switch (alt292) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2523:3: u= setOperator r= singleFromStatement
					{
					pushFollow(FOLLOW_setOperator_in_fromStatement16270);
					u=setOperator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_setOperator.add(u.getTree());
					pushFollow(FOLLOW_singleFromStatement_in_fromStatement16274);
					r=singleFromStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_singleFromStatement.add(r.getTree());
					// AST REWRITE
					// elements: u, r
					// token labels: 
					// rule labels: r, u, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_r=new RewriteRuleSubtreeStream(adaptor,"rule r",r!=null?r.getTree():null);
					RewriteRuleSubtreeStream stream_u=new RewriteRuleSubtreeStream(adaptor,"rule u",u!=null?u.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2524:4: -> ^( $u $r)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2524:7: ^( $u $r)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot(stream_u.nextNode(), root_1);
						adaptor.addChild(root_1, retval.tree);
						adaptor.addChild(root_1, stream_r.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

				default :
					break loop292;
				}
			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2526:3: -> {u != null}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
			if (u != null) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2526:19: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2527:9: ^( TOK_FROM ^( TOK_SUBQUERY ) )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2528:11: ^( TOK_SUBQUERY )
				{
				HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
				root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
				adaptor.addChild(root_3, retval.tree);
				adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2533:9: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2534:12: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
				root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2534:30: ^( TOK_DIR TOK_TMP_FILE )
				{
				HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
				root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2535:12: ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) )
				{
				HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
				root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2535:25: ^( TOK_SELEXPR TOK_SETCOLREF )
				{
				HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
				root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
				adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2538:5: ->
			{
				adaptor.addChild(root_0, retval.tree);
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "fromStatement"


	public static class singleFromStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "singleFromStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2542:1: singleFromStatement : fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) ;
	public final HiveASTParser.singleFromStatement_return singleFromStatement() throws RecognitionException {
		HiveASTParser.singleFromStatement_return retval = new HiveASTParser.singleFromStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		List<Object> list_b=null;
		ParserRuleReturnScope fromClause989 =null;
		RuleReturnScope b = null;
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2543:5: ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2544:5: fromClause (b+= body )+
			{
			pushFollow(FOLLOW_fromClause_in_singleFromStatement16481);
			fromClause989=fromClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_fromClause.add(fromClause989.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2545:5: (b+= body )+
			int cnt293=0;
			loop293:
			while (true) {
				int alt293=2;
				int LA293_0 = input.LA(1);
				if ( (LA293_0==KW_INSERT||LA293_0==KW_MAP||LA293_0==KW_REDUCE||LA293_0==KW_SELECT) ) {
					alt293=1;
				}

				switch (alt293) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2545:7: b+= body
					{
					pushFollow(FOLLOW_body_in_singleFromStatement16491);
					b=body();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_body.add(b.getTree());
					if (list_b==null) list_b=new ArrayList<Object>();
					list_b.add(b.getTree());
					}
					break;

				default :
					if ( cnt293 >= 1 ) break loop293;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(293, input);
					throw eee;
				}
				cnt293++;
			}

			// AST REWRITE
			// elements: body, fromClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2545:18: -> ^( TOK_QUERY fromClause ( body )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2545:21: ^( TOK_QUERY fromClause ( body )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				adaptor.addChild(root_1, stream_fromClause.nextTree());
				if ( !(stream_body.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_body.hasNext() ) {
					adaptor.addChild(root_1, stream_body.nextTree());
				}
				stream_body.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "singleFromStatement"


	public static class regularBody_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "regularBody"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2555:1: regularBody : (i= insertClause (s= selectStatement ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ) | selectStatement );
	public final HiveASTParser.regularBody_return regularBody() throws RecognitionException {
		HiveASTParser.regularBody_return retval = new HiveASTParser.regularBody_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope i =null;
		ParserRuleReturnScope s =null;
		ParserRuleReturnScope valuesClause990 =null;
		ParserRuleReturnScope selectStatement991 =null;

		RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
		RewriteRuleSubtreeStream stream_valuesClause=new RewriteRuleSubtreeStream(adaptor,"rule valuesClause");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2556:4: (i= insertClause (s= selectStatement ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) ) | selectStatement )
			int alt295=2;
			int LA295_0 = input.LA(1);
			if ( (LA295_0==KW_INSERT) ) {
				alt295=1;
			}
			else if ( (LA295_0==KW_MAP||LA295_0==KW_REDUCE||LA295_0==KW_SELECT||LA295_0==LPAREN) ) {
				alt295=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 295, 0, input);
				throw nvae;
			}

			switch (alt295) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2557:4: i= insertClause (s= selectStatement ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) )
					{
					pushFollow(FOLLOW_insertClause_in_regularBody16528);
					i=insertClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_insertClause.add(i.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2558:4: (s= selectStatement ->| valuesClause -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) ) )
					int alt294=2;
					int LA294_0 = input.LA(1);
					if ( (LA294_0==KW_MAP||LA294_0==KW_REDUCE||LA294_0==KW_SELECT||LA294_0==LPAREN) ) {
						alt294=1;
					}
					else if ( (LA294_0==KW_VALUES) ) {
						alt294=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae =
							new NoViableAltException("", 294, 0, input);
						throw nvae;
					}

					switch (alt294) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2559:4: s= selectStatement
							{
							pushFollow(FOLLOW_selectStatement_in_regularBody16540);
							s=selectStatement();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_selectStatement.add(s.getTree());
							if ( state.backtracking==0 ) {(s!=null?((HiveParserASTNode)s.getTree()):null).getFirstChildWithType(TOK_INSERT).replaceChildren(0, 0, (i!=null?((HiveParserASTNode)i.getTree()):null));}
							// AST REWRITE
							// elements: 
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (HiveParserASTNode)adaptor.nil();
							// 2560:82: ->
							{
								adaptor.addChild(root_0, (s!=null?((HiveParserASTNode)s.getTree()):null));
							}


							retval.tree = root_0;
							}

							}
							break;
						case 2 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2562:6: valuesClause
							{
							pushFollow(FOLLOW_valuesClause_in_regularBody16565);
							valuesClause990=valuesClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_valuesClause.add(valuesClause990.getTree());
							// AST REWRITE
							// elements: valuesClause
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							if ( state.backtracking==0 ) {
							retval.tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

							root_0 = (HiveParserASTNode)adaptor.nil();
							// 2563:7: -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
							{
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2563:10: ^( TOK_QUERY ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) ) ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) ) )
								{
								HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
								root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2564:13: ^( TOK_FROM ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause ) )
								{
								HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
								root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2565:15: ^( TOK_VIRTUAL_TABLE ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) ) valuesClause )
								{
								HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
								root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_VIRTUAL_TABLE, "TOK_VIRTUAL_TABLE"), root_3);
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2565:35: ^( TOK_VIRTUAL_TABREF ^( TOK_ANONYMOUS ) )
								{
								HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
								root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_VIRTUAL_TABREF, "TOK_VIRTUAL_TABREF"), root_4);
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2565:56: ^( TOK_ANONYMOUS )
								{
								HiveParserASTNode root_5 = (HiveParserASTNode)adaptor.nil();
								root_5 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ANONYMOUS, "TOK_ANONYMOUS"), root_5);
								adaptor.addChild(root_4, root_5);
								}

								adaptor.addChild(root_3, root_4);
								}

								adaptor.addChild(root_3, stream_valuesClause.nextTree());
								adaptor.addChild(root_2, root_3);
								}

								adaptor.addChild(root_1, root_2);
								}

								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2567:13: ^( TOK_INSERT ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) ) )
								{
								HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
								root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
								adaptor.addChild(root_2, (i!=null?((HiveParserASTNode)i.getTree()):null));
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2567:36: ^( TOK_SELECT ^( TOK_SELEXPR TOK_ALLCOLREF ) )
								{
								HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
								root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
								// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2567:49: ^( TOK_SELEXPR TOK_ALLCOLREF )
								{
								HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
								root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
								adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"));
								adaptor.addChild(root_3, root_4);
								}

								adaptor.addChild(root_2, root_3);
								}

								adaptor.addChild(root_1, root_2);
								}

								adaptor.addChild(root_0, root_1);
								}

							}


							retval.tree = root_0;
							}

							}
							break;

					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2571:4: selectStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_selectStatement_in_regularBody16689);
					selectStatement991=selectStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatement991.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "regularBody"


	public static class atomSelectStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "atomSelectStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2574:1: atomSelectStatement : (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (win= window_clause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ) ) | LPAREN ! selectStatement RPAREN !);
	public final HiveASTParser.atomSelectStatement_return atomSelectStatement() throws RecognitionException {
		HiveASTParser.atomSelectStatement_return retval = new HiveASTParser.atomSelectStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token LPAREN992=null;
		Token RPAREN994=null;
		ParserRuleReturnScope s =null;
		ParserRuleReturnScope f =null;
		ParserRuleReturnScope w =null;
		ParserRuleReturnScope g =null;
		ParserRuleReturnScope h =null;
		ParserRuleReturnScope win =null;
		ParserRuleReturnScope selectStatement993 =null;

		HiveParserASTNode LPAREN992_tree=null;
		HiveParserASTNode RPAREN994_tree=null;
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2575:4: (s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (win= window_clause )? -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ) ) | LPAREN ! selectStatement RPAREN !)
			int alt301=2;
			int LA301_0 = input.LA(1);
			if ( (LA301_0==KW_MAP||LA301_0==KW_REDUCE||LA301_0==KW_SELECT) ) {
				alt301=1;
			}
			else if ( (LA301_0==LPAREN) ) {
				alt301=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 301, 0, input);
				throw nvae;
			}

			switch (alt301) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2576:4: s= selectClause (f= fromClause )? (w= whereClause )? (g= groupByClause )? (h= havingClause )? (win= window_clause )?
					{
					pushFollow(FOLLOW_selectClause_in_atomSelectStatement16709);
					s=selectClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_selectClause.add(s.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2577:5: (f= fromClause )?
					int alt296=2;
					int LA296_0 = input.LA(1);
					if ( (LA296_0==KW_FROM) ) {
						alt296=1;
					}
					switch (alt296) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2577:5: f= fromClause
							{
							pushFollow(FOLLOW_fromClause_in_atomSelectStatement16716);
							f=fromClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_fromClause.add(f.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2578:5: (w= whereClause )?
					int alt297=2;
					int LA297_0 = input.LA(1);
					if ( (LA297_0==KW_WHERE) ) {
						alt297=1;
					}
					switch (alt297) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2578:5: w= whereClause
							{
							pushFollow(FOLLOW_whereClause_in_atomSelectStatement16724);
							w=whereClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_whereClause.add(w.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2579:5: (g= groupByClause )?
					int alt298=2;
					int LA298_0 = input.LA(1);
					if ( (LA298_0==KW_GROUP) ) {
						alt298=1;
					}
					switch (alt298) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2579:5: g= groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_atomSelectStatement16732);
							g=groupByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_groupByClause.add(g.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2580:5: (h= havingClause )?
					int alt299=2;
					int LA299_0 = input.LA(1);
					if ( (LA299_0==KW_HAVING) ) {
						alt299=1;
					}
					switch (alt299) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2580:5: h= havingClause
							{
							pushFollow(FOLLOW_havingClause_in_atomSelectStatement16740);
							h=havingClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_havingClause.add(h.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2581:7: (win= window_clause )?
					int alt300=2;
					int LA300_0 = input.LA(1);
					if ( (LA300_0==KW_WINDOW) ) {
						alt300=1;
					}
					switch (alt300) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2581:7: win= window_clause
							{
							pushFollow(FOLLOW_window_clause_in_atomSelectStatement16748);
							win=window_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_window_clause.add(win.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: f, w, g, h, win, s
					// token labels: 
					// rule labels: s, f, w, g, h, win, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"rule s",s!=null?s.getTree():null);
					RewriteRuleSubtreeStream stream_f=new RewriteRuleSubtreeStream(adaptor,"rule f",f!=null?f.getTree():null);
					RewriteRuleSubtreeStream stream_w=new RewriteRuleSubtreeStream(adaptor,"rule w",w!=null?w.getTree():null);
					RewriteRuleSubtreeStream stream_g=new RewriteRuleSubtreeStream(adaptor,"rule g",g!=null?g.getTree():null);
					RewriteRuleSubtreeStream stream_h=new RewriteRuleSubtreeStream(adaptor,"rule h",h!=null?h.getTree():null);
					RewriteRuleSubtreeStream stream_win=new RewriteRuleSubtreeStream(adaptor,"rule win",win!=null?win.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2582:4: -> ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ) )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2582:7: ^( TOK_QUERY ( $f)? ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? ) )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2582:20: ( $f)?
						if ( stream_f.hasNext() ) {
							adaptor.addChild(root_1, stream_f.nextTree());
						}
						stream_f.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2582:23: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) $s ( $w)? ( $g)? ( $h)? ( $win)? )
						{
						HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
						root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2582:36: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
						root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2582:54: ^( TOK_DIR TOK_TMP_FILE )
						{
						HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
						root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
						adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_2, stream_s.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2583:26: ( $w)?
						if ( stream_w.hasNext() ) {
							adaptor.addChild(root_2, stream_w.nextTree());
						}
						stream_w.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2583:30: ( $g)?
						if ( stream_g.hasNext() ) {
							adaptor.addChild(root_2, stream_g.nextTree());
						}
						stream_g.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2583:34: ( $h)?
						if ( stream_h.hasNext() ) {
							adaptor.addChild(root_2, stream_h.nextTree());
						}
						stream_h.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2583:38: ( $win)?
						if ( stream_win.hasNext() ) {
							adaptor.addChild(root_2, stream_win.nextTree());
						}
						stream_win.reset();

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2585:4: LPAREN ! selectStatement RPAREN !
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					LPAREN992=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_atomSelectStatement16826); if (state.failed) return retval;
					pushFollow(FOLLOW_selectStatement_in_atomSelectStatement16829);
					selectStatement993=selectStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, selectStatement993.getTree());

					RPAREN994=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_atomSelectStatement16831); if (state.failed) return retval;
					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "atomSelectStatement"


	public static class selectStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "selectStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2588:1: selectStatement : a= atomSelectStatement (set= setOpSelectStatement[$atomSelectStatement.tree] )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (l= limitClause )? -> {set == null}? -> {o==null && c==null && d==null && sort==null && l==null}? -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) ) ;
	public final HiveASTParser.selectStatement_return selectStatement() throws RecognitionException {
		HiveASTParser.selectStatement_return retval = new HiveASTParser.selectStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope a =null;
		ParserRuleReturnScope set =null;
		ParserRuleReturnScope o =null;
		ParserRuleReturnScope c =null;
		ParserRuleReturnScope d =null;
		ParserRuleReturnScope sort =null;
		ParserRuleReturnScope l =null;

		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_setOpSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule setOpSelectStatement");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_atomSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule atomSelectStatement");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2589:4: (a= atomSelectStatement (set= setOpSelectStatement[$atomSelectStatement.tree] )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (l= limitClause )? -> {set == null}? -> {o==null && c==null && d==null && sort==null && l==null}? -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2590:4: a= atomSelectStatement (set= setOpSelectStatement[$atomSelectStatement.tree] )? (o= orderByClause )? (c= clusterByClause )? (d= distributeByClause )? (sort= sortByClause )? (l= limitClause )?
			{
			pushFollow(FOLLOW_atomSelectStatement_in_selectStatement16852);
			a=atomSelectStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_atomSelectStatement.add(a.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2591:7: (set= setOpSelectStatement[$atomSelectStatement.tree] )?
			int alt302=2;
			int LA302_0 = input.LA(1);
			if ( (LA302_0==KW_EXCEPT||LA302_0==KW_INTERSECT||LA302_0==KW_MINUS||LA302_0==KW_UNION) ) {
				alt302=1;
			}
			switch (alt302) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2591:7: set= setOpSelectStatement[$atomSelectStatement.tree]
					{
					pushFollow(FOLLOW_setOpSelectStatement_in_selectStatement16859);
					set=setOpSelectStatement((a!=null?((HiveParserASTNode)a.getTree()):null));
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_setOpSelectStatement.add(set.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2592:5: (o= orderByClause )?
			int alt303=2;
			int LA303_0 = input.LA(1);
			if ( (LA303_0==KW_ORDER) ) {
				alt303=1;
			}
			switch (alt303) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2592:5: o= orderByClause
					{
					pushFollow(FOLLOW_orderByClause_in_selectStatement16868);
					o=orderByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_orderByClause.add(o.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2593:5: (c= clusterByClause )?
			int alt304=2;
			int LA304_0 = input.LA(1);
			if ( (LA304_0==KW_CLUSTER) ) {
				alt304=1;
			}
			switch (alt304) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2593:5: c= clusterByClause
					{
					pushFollow(FOLLOW_clusterByClause_in_selectStatement16876);
					c=clusterByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_clusterByClause.add(c.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2594:5: (d= distributeByClause )?
			int alt305=2;
			int LA305_0 = input.LA(1);
			if ( (LA305_0==KW_DISTRIBUTE) ) {
				alt305=1;
			}
			switch (alt305) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2594:5: d= distributeByClause
					{
					pushFollow(FOLLOW_distributeByClause_in_selectStatement16884);
					d=distributeByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_distributeByClause.add(d.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2595:8: (sort= sortByClause )?
			int alt306=2;
			int LA306_0 = input.LA(1);
			if ( (LA306_0==KW_SORT) ) {
				alt306=1;
			}
			switch (alt306) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2595:8: sort= sortByClause
					{
					pushFollow(FOLLOW_sortByClause_in_selectStatement16892);
					sort=sortByClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_sortByClause.add(sort.getTree());
					}
					break;

			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2596:5: (l= limitClause )?
			int alt307=2;
			int LA307_0 = input.LA(1);
			if ( (LA307_0==KW_LIMIT) ) {
				alt307=1;
			}
			switch (alt307) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2596:5: l= limitClause
					{
					pushFollow(FOLLOW_limitClause_in_selectStatement16900);
					l=limitClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_limitClause.add(l.getTree());
					}
					break;

			}

			if ( state.backtracking==0 ) {
			   if(set == null){
			   (a!=null?((HiveParserASTNode)a.getTree()):null).getFirstChildWithType(TOK_INSERT).addChild((o!=null?((HiveParserASTNode)o.getTree()):null));
			   (a!=null?((HiveParserASTNode)a.getTree()):null).getFirstChildWithType(TOK_INSERT).addChild((c!=null?((HiveParserASTNode)c.getTree()):null));
			   (a!=null?((HiveParserASTNode)a.getTree()):null).getFirstChildWithType(TOK_INSERT).addChild((d!=null?((HiveParserASTNode)d.getTree()):null));
			   (a!=null?((HiveParserASTNode)a.getTree()):null).getFirstChildWithType(TOK_INSERT).addChild((sort!=null?((HiveParserASTNode)sort.getTree()):null));
			   (a!=null?((HiveParserASTNode)a.getTree()):null).getFirstChildWithType(TOK_INSERT).addChild((l!=null?((HiveParserASTNode)l.getTree()):null));
			   }
			   }
			// AST REWRITE
			// elements: o, c, sort, d, l
			// token labels: 
			// rule labels: c, d, sort, l, retval, o
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_c=new RewriteRuleSubtreeStream(adaptor,"rule c",c!=null?c.getTree():null);
			RewriteRuleSubtreeStream stream_d=new RewriteRuleSubtreeStream(adaptor,"rule d",d!=null?d.getTree():null);
			RewriteRuleSubtreeStream stream_sort=new RewriteRuleSubtreeStream(adaptor,"rule sort",sort!=null?sort.getTree():null);
			RewriteRuleSubtreeStream stream_l=new RewriteRuleSubtreeStream(adaptor,"rule l",l!=null?l.getTree():null);
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);
			RewriteRuleSubtreeStream stream_o=new RewriteRuleSubtreeStream(adaptor,"rule o",o!=null?o.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2606:4: -> {set == null}?
			if (set == null) {
				adaptor.addChild(root_0, (a!=null?((HiveParserASTNode)a.getTree()):null));
			}

			else // 2608:4: -> {o==null && c==null && d==null && sort==null && l==null}?
			if (o==null && c==null && d==null && sort==null && l==null) {
				adaptor.addChild(root_0, (set!=null?((HiveParserASTNode)set.getTree()):null));
			}

			else // 2610:4: -> ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2610:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2611:11: ^( TOK_FROM ^( TOK_SUBQUERY ) )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2612:13: ^( TOK_SUBQUERY )
				{
				HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
				root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
				adaptor.addChild(root_3, (set!=null?((HiveParserASTNode)set.getTree()):null));
				adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2617:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ( $o)? ( $c)? ( $d)? ( $sort)? ( $l)? )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2618:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
				root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2618:32: ^( TOK_DIR TOK_TMP_FILE )
				{
				HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
				root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2619:14: ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) )
				{
				HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
				root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2619:27: ^( TOK_SELEXPR TOK_SETCOLREF )
				{
				HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
				root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
				adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2620:15: ( $o)?
				if ( stream_o.hasNext() ) {
					adaptor.addChild(root_2, stream_o.nextTree());
				}
				stream_o.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2620:19: ( $c)?
				if ( stream_c.hasNext() ) {
					adaptor.addChild(root_2, stream_c.nextTree());
				}
				stream_c.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2620:23: ( $d)?
				if ( stream_d.hasNext() ) {
					adaptor.addChild(root_2, stream_d.nextTree());
				}
				stream_d.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2620:27: ( $sort)?
				if ( stream_sort.hasNext() ) {
					adaptor.addChild(root_2, stream_sort.nextTree());
				}
				stream_sort.reset();

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2620:34: ( $l)?
				if ( stream_l.hasNext() ) {
					adaptor.addChild(root_2, stream_l.nextTree());
				}
				stream_l.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectStatement"


	public static class setOpSelectStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "setOpSelectStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2625:1: setOpSelectStatement[CommonTree t] : (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveASTParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+ -> {$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_UNIONALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_INTERSECTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_INTERSECTALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_EXCEPTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_EXCEPTALL}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->;
	public final HiveASTParser.setOpSelectStatement_return setOpSelectStatement(CommonTree t) throws RecognitionException {
		HiveASTParser.setOpSelectStatement_return retval = new HiveASTParser.setOpSelectStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope u =null;
		ParserRuleReturnScope b =null;

		RewriteRuleSubtreeStream stream_setOperator=new RewriteRuleSubtreeStream(adaptor,"rule setOperator");
		RewriteRuleSubtreeStream stream_atomSelectStatement=new RewriteRuleSubtreeStream(adaptor,"rule atomSelectStatement");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2626:4: ( (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveASTParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+ -> {$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_UNIONALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_INTERSECTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_INTERSECTALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_EXCEPTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_EXCEPTALL}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) ->)
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2627:4: (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveASTParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+
			{
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2627:4: (u= setOperator b= atomSelectStatement -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveASTParser.TOK_UNIONDISTINCT}? ^( $u $b) -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) ) -> ^( $u $b) )+
			int cnt308=0;
			loop308:
			while (true) {
				int alt308=2;
				int LA308_0 = input.LA(1);
				if ( (LA308_0==KW_EXCEPT||LA308_0==KW_INTERSECT||LA308_0==KW_MINUS||LA308_0==KW_UNION) ) {
					alt308=1;
				}

				switch (alt308) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2627:5: u= setOperator b= atomSelectStatement
					{
					pushFollow(FOLLOW_setOperator_in_setOpSelectStatement17165);
					u=setOperator();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_setOperator.add(u.getTree());
					pushFollow(FOLLOW_atomSelectStatement_in_setOpSelectStatement17169);
					b=atomSelectStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_atomSelectStatement.add(b.getTree());
					// AST REWRITE
					// elements: b, b, u, u, b, b
					// token labels: 
					// rule labels: b, u, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.getTree():null);
					RewriteRuleSubtreeStream stream_u=new RewriteRuleSubtreeStream(adaptor,"rule u",u!=null?u.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2628:4: -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
					if (retval.tree != null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT) {
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2629:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2630:11: ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) )
						{
						HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
						root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2631:13: ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) )
						{
						HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
						root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2632:15: ^( TOK_UNIONALL $b)
						{
						HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
						root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL"), root_4);
						adaptor.addChild(root_4, retval.tree);
						adaptor.addChild(root_4, stream_b.nextTree());
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2636:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
						{
						HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
						root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2637:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
						root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2637:32: ^( TOK_DIR TOK_TMP_FILE )
						{
						HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
						root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
						adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2638:14: ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) )
						{
						HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
						root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI"), root_3);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2638:29: ^( TOK_SELEXPR TOK_SETCOLREF )
						{
						HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
						root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
						adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}

					else // 2641:4: -> {$setOpSelectStatement.tree != null && ((CommonTree)u.getTree()).getType()!=HiveASTParser.TOK_UNIONDISTINCT}? ^( $u $b)
					if (retval.tree != null && ((CommonTree)u.getTree()).getType()!=HiveASTParser.TOK_UNIONDISTINCT) {
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2642:7: ^( $u $b)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot(stream_u.nextNode(), root_1);
						adaptor.addChild(root_1, retval.tree);
						adaptor.addChild(root_1, stream_b.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}

					else // 2643:4: -> {$setOpSelectStatement.tree == null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
					if (retval.tree == null && ((CommonTree)u.getTree()).getType()==HiveASTParser.TOK_UNIONDISTINCT) {
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2644:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2645:11: ^( TOK_FROM ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) ) )
						{
						HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
						root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2646:13: ^( TOK_SUBQUERY ^( TOK_UNIONALL $b) )
						{
						HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
						root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2647:15: ^( TOK_UNIONALL $b)
						{
						HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
						root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_UNIONALL, "TOK_UNIONALL"), root_4);
						adaptor.addChild(root_4, t);
						adaptor.addChild(root_4, stream_b.nextTree());
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2651:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
						{
						HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
						root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2652:13: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
						root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2652:31: ^( TOK_DIR TOK_TMP_FILE )
						{
						HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
						root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
						adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2653:13: ^( TOK_SELECTDI ^( TOK_SELEXPR TOK_SETCOLREF ) )
						{
						HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
						root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELECTDI, "TOK_SELECTDI"), root_3);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2653:28: ^( TOK_SELEXPR TOK_SETCOLREF )
						{
						HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
						root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
						adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF"));
						adaptor.addChild(root_3, root_4);
						}

						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_0, root_1);
						}

					}

					else // 2656:4: -> ^( $u $b)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2656:7: ^( $u $b)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot(stream_u.nextNode(), root_1);
						adaptor.addChild(root_1, t);
						adaptor.addChild(root_1, stream_b.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

				default :
					if ( cnt308 >= 1 ) break loop308;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(308, input);
					throw eee;
				}
				cnt308++;
			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2658:4: -> {$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_UNIONALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_INTERSECTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_INTERSECTALL\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_EXCEPTDISTINCT\n ||$setOpSelectStatement.tree.getChild(0).getType()==HiveASTParser.TOK_EXCEPTALL}? ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
			if (retval.tree.getChild(0).getType()==HiveASTParser.TOK_UNIONALL
			   ||retval.tree.getChild(0).getType()==HiveASTParser.TOK_INTERSECTDISTINCT
			   ||retval.tree.getChild(0).getType()==HiveASTParser.TOK_INTERSECTALL
			   ||retval.tree.getChild(0).getType()==HiveASTParser.TOK_EXCEPTDISTINCT
			   ||retval.tree.getChild(0).getType()==HiveASTParser.TOK_EXCEPTALL) {
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2663:7: ^( TOK_QUERY ^( TOK_FROM ^( TOK_SUBQUERY ) ) ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) ) )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2664:11: ^( TOK_FROM ^( TOK_SUBQUERY ) )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_FROM, "TOK_FROM"), root_2);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2665:13: ^( TOK_SUBQUERY )
				{
				HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
				root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_3);
				adaptor.addChild(root_3, retval.tree);
				adaptor.addChild(root_3, adaptor.create(Identifier, generateUnionAlias()));
				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2670:11: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) ) )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2671:14: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
				{
				HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
				root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2671:32: ^( TOK_DIR TOK_TMP_FILE )
				{
				HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
				root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_4);
				adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2672:14: ^( TOK_SELECT ^( TOK_SELEXPR TOK_SETCOLREF ) )
				{
				HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
				root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELECT, "TOK_SELECT"), root_3);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2672:27: ^( TOK_SELEXPR TOK_SETCOLREF )
				{
				HiveParserASTNode root_4 = (HiveParserASTNode)adaptor.nil();
				root_4 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_4);
				adaptor.addChild(root_4, (HiveParserASTNode)adaptor.create(TOK_SETCOLREF, "TOK_SETCOLREF"));
				adaptor.addChild(root_3, root_4);
				}

				adaptor.addChild(root_2, root_3);
				}

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_0, root_1);
				}

			}

			else // 2675:4: ->
			{
				adaptor.addChild(root_0, retval.tree);
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setOpSelectStatement"


	public static class selectStatementWithCTE_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "selectStatementWithCTE"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2678:1: selectStatementWithCTE : (w= withClause )? selectStatement -> selectStatement ;
	public final HiveASTParser.selectStatementWithCTE_return selectStatementWithCTE() throws RecognitionException {
		HiveASTParser.selectStatementWithCTE_return retval = new HiveASTParser.selectStatementWithCTE_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope w =null;
		ParserRuleReturnScope selectStatement995 =null;

		RewriteRuleSubtreeStream stream_withClause=new RewriteRuleSubtreeStream(adaptor,"rule withClause");
		RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2679:5: ( (w= withClause )? selectStatement -> selectStatement )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2680:5: (w= withClause )? selectStatement
			{
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2680:5: (w= withClause )?
			int alt309=2;
			int LA309_0 = input.LA(1);
			if ( (LA309_0==KW_WITH) ) {
				alt309=1;
			}
			switch (alt309) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2680:6: w= withClause
					{
					pushFollow(FOLLOW_withClause_in_selectStatementWithCTE17804);
					w=withClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_withClause.add(w.getTree());
					}
					break;

			}

			pushFollow(FOLLOW_selectStatement_in_selectStatementWithCTE17812);
			selectStatement995=selectStatement();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_selectStatement.add(selectStatement995.getTree());
			if ( state.backtracking==0 ) {
			      if ((w!=null?((HiveParserASTNode)w.getTree()):null) != null) {
			      (selectStatement995!=null?((HiveParserASTNode)selectStatement995.getTree()):null).insertChild(0, (w!=null?((HiveParserASTNode)w.getTree()):null));
			      }
			    }
			// AST REWRITE
			// elements: selectStatement
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2686:5: -> selectStatement
			{
				adaptor.addChild(root_0, stream_selectStatement.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "selectStatementWithCTE"


	public static class body_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "body"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2689:1: body : ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) );
	public final HiveASTParser.body_return body() throws RecognitionException {
		HiveASTParser.body_return retval = new HiveASTParser.body_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope insertClause996 =null;
		ParserRuleReturnScope selectClause997 =null;
		ParserRuleReturnScope lateralView998 =null;
		ParserRuleReturnScope whereClause999 =null;
		ParserRuleReturnScope groupByClause1000 =null;
		ParserRuleReturnScope havingClause1001 =null;
		ParserRuleReturnScope window_clause1002 =null;
		ParserRuleReturnScope orderByClause1003 =null;
		ParserRuleReturnScope clusterByClause1004 =null;
		ParserRuleReturnScope distributeByClause1005 =null;
		ParserRuleReturnScope sortByClause1006 =null;
		ParserRuleReturnScope limitClause1007 =null;
		ParserRuleReturnScope selectClause1008 =null;
		ParserRuleReturnScope lateralView1009 =null;
		ParserRuleReturnScope whereClause1010 =null;
		ParserRuleReturnScope groupByClause1011 =null;
		ParserRuleReturnScope havingClause1012 =null;
		ParserRuleReturnScope window_clause1013 =null;
		ParserRuleReturnScope orderByClause1014 =null;
		ParserRuleReturnScope clusterByClause1015 =null;
		ParserRuleReturnScope distributeByClause1016 =null;
		ParserRuleReturnScope sortByClause1017 =null;
		ParserRuleReturnScope limitClause1018 =null;

		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
		RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
		RewriteRuleSubtreeStream stream_lateralView=new RewriteRuleSubtreeStream(adaptor,"rule lateralView");
		RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
		RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
		RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
		RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
		RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
		RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
		RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
		RewriteRuleSubtreeStream stream_window_clause=new RewriteRuleSubtreeStream(adaptor,"rule window_clause");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2690:4: ( insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) | selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? ) )
			int alt330=2;
			int LA330_0 = input.LA(1);
			if ( (LA330_0==KW_INSERT) ) {
				alt330=1;
			}
			else if ( (LA330_0==KW_MAP||LA330_0==KW_REDUCE||LA330_0==KW_SELECT) ) {
				alt330=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 330, 0, input);
				throw nvae;
			}

			switch (alt330) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2691:4: insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
					{
					pushFollow(FOLLOW_insertClause_in_body17842);
					insertClause996=insertClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_insertClause.add(insertClause996.getTree());
					pushFollow(FOLLOW_selectClause_in_body17847);
					selectClause997=selectClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_selectClause.add(selectClause997.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2693:4: ( lateralView )?
					int alt310=2;
					int LA310_0 = input.LA(1);
					if ( (LA310_0==KW_LATERAL) ) {
						alt310=1;
					}
					switch (alt310) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2693:4: lateralView
							{
							pushFollow(FOLLOW_lateralView_in_body17852);
							lateralView998=lateralView();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_lateralView.add(lateralView998.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2694:4: ( whereClause )?
					int alt311=2;
					int LA311_0 = input.LA(1);
					if ( (LA311_0==KW_WHERE) ) {
						alt311=1;
					}
					switch (alt311) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2694:4: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_body17858);
							whereClause999=whereClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_whereClause.add(whereClause999.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2695:4: ( groupByClause )?
					int alt312=2;
					int LA312_0 = input.LA(1);
					if ( (LA312_0==KW_GROUP) ) {
						alt312=1;
					}
					switch (alt312) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2695:4: groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_body17864);
							groupByClause1000=groupByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause1000.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2696:4: ( havingClause )?
					int alt313=2;
					int LA313_0 = input.LA(1);
					if ( (LA313_0==KW_HAVING) ) {
						alt313=1;
					}
					switch (alt313) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2696:4: havingClause
							{
							pushFollow(FOLLOW_havingClause_in_body17870);
							havingClause1001=havingClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_havingClause.add(havingClause1001.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2697:4: ( window_clause )?
					int alt314=2;
					int LA314_0 = input.LA(1);
					if ( (LA314_0==KW_WINDOW) ) {
						alt314=1;
					}
					switch (alt314) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2697:4: window_clause
							{
							pushFollow(FOLLOW_window_clause_in_body17876);
							window_clause1002=window_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_window_clause.add(window_clause1002.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2698:4: ( orderByClause )?
					int alt315=2;
					int LA315_0 = input.LA(1);
					if ( (LA315_0==KW_ORDER) ) {
						alt315=1;
					}
					switch (alt315) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2698:4: orderByClause
							{
							pushFollow(FOLLOW_orderByClause_in_body17882);
							orderByClause1003=orderByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause1003.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2699:4: ( clusterByClause )?
					int alt316=2;
					int LA316_0 = input.LA(1);
					if ( (LA316_0==KW_CLUSTER) ) {
						alt316=1;
					}
					switch (alt316) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2699:4: clusterByClause
							{
							pushFollow(FOLLOW_clusterByClause_in_body17888);
							clusterByClause1004=clusterByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_clusterByClause.add(clusterByClause1004.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2700:4: ( distributeByClause )?
					int alt317=2;
					int LA317_0 = input.LA(1);
					if ( (LA317_0==KW_DISTRIBUTE) ) {
						alt317=1;
					}
					switch (alt317) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2700:4: distributeByClause
							{
							pushFollow(FOLLOW_distributeByClause_in_body17894);
							distributeByClause1005=distributeByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_distributeByClause.add(distributeByClause1005.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2701:4: ( sortByClause )?
					int alt318=2;
					int LA318_0 = input.LA(1);
					if ( (LA318_0==KW_SORT) ) {
						alt318=1;
					}
					switch (alt318) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2701:4: sortByClause
							{
							pushFollow(FOLLOW_sortByClause_in_body17900);
							sortByClause1006=sortByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_sortByClause.add(sortByClause1006.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2702:4: ( limitClause )?
					int alt319=2;
					int LA319_0 = input.LA(1);
					if ( (LA319_0==KW_LIMIT) ) {
						alt319=1;
					}
					switch (alt319) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2702:4: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_body17906);
							limitClause1007=limitClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_limitClause.add(limitClause1007.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: selectClause, window_clause, whereClause, groupByClause, distributeByClause, orderByClause, insertClause, clusterByClause, limitClause, lateralView, havingClause, sortByClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2702:17: -> ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2702:20: ^( TOK_INSERT insertClause selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);
						adaptor.addChild(root_1, stream_insertClause.nextTree());
						adaptor.addChild(root_1, stream_selectClause.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2703:35: ( lateralView )?
						if ( stream_lateralView.hasNext() ) {
							adaptor.addChild(root_1, stream_lateralView.nextTree());
						}
						stream_lateralView.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2703:48: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2703:61: ( groupByClause )?
						if ( stream_groupByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_groupByClause.nextTree());
						}
						stream_groupByClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2703:76: ( havingClause )?
						if ( stream_havingClause.hasNext() ) {
							adaptor.addChild(root_1, stream_havingClause.nextTree());
						}
						stream_havingClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2703:90: ( orderByClause )?
						if ( stream_orderByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_orderByClause.nextTree());
						}
						stream_orderByClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2703:105: ( clusterByClause )?
						if ( stream_clusterByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_clusterByClause.nextTree());
						}
						stream_clusterByClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2704:22: ( distributeByClause )?
						if ( stream_distributeByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_distributeByClause.nextTree());
						}
						stream_distributeByClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2704:42: ( sortByClause )?
						if ( stream_sortByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_sortByClause.nextTree());
						}
						stream_sortByClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2704:56: ( window_clause )?
						if ( stream_window_clause.hasNext() ) {
							adaptor.addChild(root_1, stream_window_clause.nextTree());
						}
						stream_window_clause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2704:71: ( limitClause )?
						if ( stream_limitClause.hasNext() ) {
							adaptor.addChild(root_1, stream_limitClause.nextTree());
						}
						stream_limitClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2706:4: selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( window_clause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
					{
					pushFollow(FOLLOW_selectClause_in_body17999);
					selectClause1008=selectClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_selectClause.add(selectClause1008.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2707:4: ( lateralView )?
					int alt320=2;
					int LA320_0 = input.LA(1);
					if ( (LA320_0==KW_LATERAL) ) {
						alt320=1;
					}
					switch (alt320) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2707:4: lateralView
							{
							pushFollow(FOLLOW_lateralView_in_body18004);
							lateralView1009=lateralView();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_lateralView.add(lateralView1009.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2708:4: ( whereClause )?
					int alt321=2;
					int LA321_0 = input.LA(1);
					if ( (LA321_0==KW_WHERE) ) {
						alt321=1;
					}
					switch (alt321) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2708:4: whereClause
							{
							pushFollow(FOLLOW_whereClause_in_body18010);
							whereClause1010=whereClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_whereClause.add(whereClause1010.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2709:4: ( groupByClause )?
					int alt322=2;
					int LA322_0 = input.LA(1);
					if ( (LA322_0==KW_GROUP) ) {
						alt322=1;
					}
					switch (alt322) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2709:4: groupByClause
							{
							pushFollow(FOLLOW_groupByClause_in_body18016);
							groupByClause1011=groupByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_groupByClause.add(groupByClause1011.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2710:4: ( havingClause )?
					int alt323=2;
					int LA323_0 = input.LA(1);
					if ( (LA323_0==KW_HAVING) ) {
						alt323=1;
					}
					switch (alt323) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2710:4: havingClause
							{
							pushFollow(FOLLOW_havingClause_in_body18022);
							havingClause1012=havingClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_havingClause.add(havingClause1012.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2711:4: ( window_clause )?
					int alt324=2;
					int LA324_0 = input.LA(1);
					if ( (LA324_0==KW_WINDOW) ) {
						alt324=1;
					}
					switch (alt324) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2711:4: window_clause
							{
							pushFollow(FOLLOW_window_clause_in_body18028);
							window_clause1013=window_clause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_window_clause.add(window_clause1013.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2712:4: ( orderByClause )?
					int alt325=2;
					int LA325_0 = input.LA(1);
					if ( (LA325_0==KW_ORDER) ) {
						alt325=1;
					}
					switch (alt325) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2712:4: orderByClause
							{
							pushFollow(FOLLOW_orderByClause_in_body18034);
							orderByClause1014=orderByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_orderByClause.add(orderByClause1014.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2713:4: ( clusterByClause )?
					int alt326=2;
					int LA326_0 = input.LA(1);
					if ( (LA326_0==KW_CLUSTER) ) {
						alt326=1;
					}
					switch (alt326) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2713:4: clusterByClause
							{
							pushFollow(FOLLOW_clusterByClause_in_body18040);
							clusterByClause1015=clusterByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_clusterByClause.add(clusterByClause1015.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2714:4: ( distributeByClause )?
					int alt327=2;
					int LA327_0 = input.LA(1);
					if ( (LA327_0==KW_DISTRIBUTE) ) {
						alt327=1;
					}
					switch (alt327) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2714:4: distributeByClause
							{
							pushFollow(FOLLOW_distributeByClause_in_body18046);
							distributeByClause1016=distributeByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_distributeByClause.add(distributeByClause1016.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2715:4: ( sortByClause )?
					int alt328=2;
					int LA328_0 = input.LA(1);
					if ( (LA328_0==KW_SORT) ) {
						alt328=1;
					}
					switch (alt328) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2715:4: sortByClause
							{
							pushFollow(FOLLOW_sortByClause_in_body18052);
							sortByClause1017=sortByClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_sortByClause.add(sortByClause1017.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2716:4: ( limitClause )?
					int alt329=2;
					int LA329_0 = input.LA(1);
					if ( (LA329_0==KW_LIMIT) ) {
						alt329=1;
					}
					switch (alt329) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2716:4: limitClause
							{
							pushFollow(FOLLOW_limitClause_in_body18058);
							limitClause1018=limitClause();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_limitClause.add(limitClause1018.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: whereClause, orderByClause, window_clause, havingClause, lateralView, distributeByClause, limitClause, selectClause, sortByClause, clusterByClause, groupByClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2716:17: -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2716:20: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( lateralView )? ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( window_clause )? ( limitClause )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2716:33: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
						{
						HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
						root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_2);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2716:51: ^( TOK_DIR TOK_TMP_FILE )
						{
						HiveParserASTNode root_3 = (HiveParserASTNode)adaptor.nil();
						root_3 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_3);
						adaptor.addChild(root_3, (HiveParserASTNode)adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));
						adaptor.addChild(root_2, root_3);
						}

						adaptor.addChild(root_1, root_2);
						}

						adaptor.addChild(root_1, stream_selectClause.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2717:35: ( lateralView )?
						if ( stream_lateralView.hasNext() ) {
							adaptor.addChild(root_1, stream_lateralView.nextTree());
						}
						stream_lateralView.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2717:48: ( whereClause )?
						if ( stream_whereClause.hasNext() ) {
							adaptor.addChild(root_1, stream_whereClause.nextTree());
						}
						stream_whereClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2717:61: ( groupByClause )?
						if ( stream_groupByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_groupByClause.nextTree());
						}
						stream_groupByClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2717:76: ( havingClause )?
						if ( stream_havingClause.hasNext() ) {
							adaptor.addChild(root_1, stream_havingClause.nextTree());
						}
						stream_havingClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2717:90: ( orderByClause )?
						if ( stream_orderByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_orderByClause.nextTree());
						}
						stream_orderByClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2717:105: ( clusterByClause )?
						if ( stream_clusterByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_clusterByClause.nextTree());
						}
						stream_clusterByClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2718:22: ( distributeByClause )?
						if ( stream_distributeByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_distributeByClause.nextTree());
						}
						stream_distributeByClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2718:42: ( sortByClause )?
						if ( stream_sortByClause.hasNext() ) {
							adaptor.addChild(root_1, stream_sortByClause.nextTree());
						}
						stream_sortByClause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2718:56: ( window_clause )?
						if ( stream_window_clause.hasNext() ) {
							adaptor.addChild(root_1, stream_window_clause.nextTree());
						}
						stream_window_clause.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2718:71: ( limitClause )?
						if ( stream_limitClause.hasNext() ) {
							adaptor.addChild(root_1, stream_limitClause.nextTree());
						}
						stream_limitClause.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "body"


	public static class insertClause_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "insertClause"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2721:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )? -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? ) );
	public final HiveASTParser.insertClause_return insertClause() throws RecognitionException {
		HiveASTParser.insertClause_return retval = new HiveASTParser.insertClause_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_INSERT1019=null;
		Token KW_OVERWRITE1020=null;
		Token KW_INSERT1023=null;
		Token KW_INTO1024=null;
		Token KW_TABLE1025=null;
		Token LPAREN1027=null;
		Token RPAREN1028=null;
		ParserRuleReturnScope targetCols =null;
		ParserRuleReturnScope destination1021 =null;
		ParserRuleReturnScope ifNotExists1022 =null;
		ParserRuleReturnScope tableOrPartition1026 =null;

		HiveParserASTNode KW_INSERT1019_tree=null;
		HiveParserASTNode KW_OVERWRITE1020_tree=null;
		HiveParserASTNode KW_INSERT1023_tree=null;
		HiveParserASTNode KW_INTO1024_tree=null;
		HiveParserASTNode KW_TABLE1025_tree=null;
		HiveParserASTNode LPAREN1027_tree=null;
		HiveParserASTNode RPAREN1028_tree=null;
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
		RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
		RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
		RewriteRuleSubtreeStream stream_destination=new RewriteRuleSubtreeStream(adaptor,"rule destination");
		RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
		RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");

		 pushMsg("insert clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2724:4: ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )? -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? ) )
			int alt334=2;
			int LA334_0 = input.LA(1);
			if ( (LA334_0==KW_INSERT) ) {
				int LA334_1 = input.LA(2);
				if ( (LA334_1==KW_OVERWRITE) ) {
					alt334=1;
				}
				else if ( (LA334_1==KW_INTO) ) {
					alt334=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 334, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 334, 0, input);
				throw nvae;
			}

			switch (alt334) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2725:6: KW_INSERT KW_OVERWRITE destination ( ifNotExists )?
					{
					KW_INSERT1019=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause18179); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT1019);

					KW_OVERWRITE1020=(Token)match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_insertClause18181); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OVERWRITE.add(KW_OVERWRITE1020);

					pushFollow(FOLLOW_destination_in_insertClause18183);
					destination1021=destination();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_destination.add(destination1021.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2725:41: ( ifNotExists )?
					int alt331=2;
					int LA331_0 = input.LA(1);
					if ( (LA331_0==KW_IF) ) {
						alt331=1;
					}
					switch (alt331) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2725:41: ifNotExists
							{
							pushFollow(FOLLOW_ifNotExists_in_insertClause18185);
							ifNotExists1022=ifNotExists();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_ifNotExists.add(ifNotExists1022.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: destination, ifNotExists
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2725:54: -> ^( TOK_DESTINATION destination ( ifNotExists )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2725:57: ^( TOK_DESTINATION destination ( ifNotExists )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_1);
						adaptor.addChild(root_1, stream_destination.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2725:87: ( ifNotExists )?
						if ( stream_ifNotExists.hasNext() ) {
							adaptor.addChild(root_1, stream_ifNotExists.nextTree());
						}
						stream_ifNotExists.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2726:6: KW_INSERT KW_INTO ( KW_TABLE )? tableOrPartition ( LPAREN targetCols= columnNameList RPAREN )?
					{
					KW_INSERT1023=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause18204); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT1023);

					KW_INTO1024=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_insertClause18206); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO1024);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2726:24: ( KW_TABLE )?
					int alt332=2;
					int LA332_0 = input.LA(1);
					if ( (LA332_0==KW_TABLE) ) {
						alt332=1;
					}
					switch (alt332) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2726:24: KW_TABLE
							{
							KW_TABLE1025=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_insertClause18208); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE1025);

							}
							break;

					}

					pushFollow(FOLLOW_tableOrPartition_in_insertClause18211);
					tableOrPartition1026=tableOrPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableOrPartition.add(tableOrPartition1026.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2726:51: ( LPAREN targetCols= columnNameList RPAREN )?
					int alt333=2;
					int LA333_0 = input.LA(1);
					if ( (LA333_0==LPAREN) ) {
						int LA333_1 = input.LA(2);
						if ( (LA333_1==Identifier||(LA333_1 >= KW_ABORT && LA333_1 <= KW_AFTER)||LA333_1==KW_ANALYZE||LA333_1==KW_ARCHIVE||LA333_1==KW_ASC||(LA333_1 >= KW_AUTOCOMMIT && LA333_1 <= KW_BEFORE)||(LA333_1 >= KW_BUCKET && LA333_1 <= KW_BUCKETS)||(LA333_1 >= KW_CACHE && LA333_1 <= KW_CASCADE)||LA333_1==KW_CHANGE||(LA333_1 >= KW_CLUSTER && LA333_1 <= KW_COLLECTION)||(LA333_1 >= KW_COLUMNS && LA333_1 <= KW_COMMENT)||(LA333_1 >= KW_COMPACT && LA333_1 <= KW_CONCATENATE)||LA333_1==KW_CONTINUE||LA333_1==KW_DATA||LA333_1==KW_DATABASES||(LA333_1 >= KW_DATETIME && LA333_1 <= KW_DBPROPERTIES)||(LA333_1 >= KW_DEFERRED && LA333_1 <= KW_DEFINED)||(LA333_1 >= KW_DELIMITED && LA333_1 <= KW_DESC)||(LA333_1 >= KW_DETAIL && LA333_1 <= KW_DISABLE)||LA333_1==KW_DISTRIBUTE||LA333_1==KW_DOW||(LA333_1 >= KW_DUMP && LA333_1 <= KW_ELEM_TYPE)||LA333_1==KW_ENABLE||LA333_1==KW_ESCAPED||LA333_1==KW_EXCLUSIVE||(LA333_1 >= KW_EXPLAIN && LA333_1 <= KW_EXPRESSION)||(LA333_1 >= KW_FIELDS && LA333_1 <= KW_FIRST)||(LA333_1 >= KW_FORMAT && LA333_1 <= KW_FORMATTED)||LA333_1==KW_FUNCTIONS||(LA333_1 >= KW_HOUR && LA333_1 <= KW_IDXPROPERTIES)||(LA333_1 >= KW_INDEX && LA333_1 <= KW_INDEXES)||(LA333_1 >= KW_INPATH && LA333_1 <= KW_INPUTFORMAT)||(LA333_1 >= KW_ISOLATION && LA333_1 <= KW_JAR)||(LA333_1 >= KW_KEY && LA333_1 <= KW_LAST)||LA333_1==KW_LEVEL||(LA333_1 >= KW_LIMIT && LA333_1 <= KW_LOAD)||(LA333_1 >= KW_LOCATION && LA333_1 <= KW_LONG)||(LA333_1 >= KW_MAPJOIN && LA333_1 <= KW_MATERIALIZED)||LA333_1==KW_METADATA||(LA333_1 >= KW_MINUTE && LA333_1 <= KW_MONTH)||LA333_1==KW_MSCK||(LA333_1 >= KW_NORELY && LA333_1 <= KW_NOSCAN)||LA333_1==KW_NOVALIDATE||LA333_1==KW_NULLS||LA333_1==KW_OFFSET||(LA333_1 >= KW_OPERATOR && LA333_1 <= KW_OPTION)||(LA333_1 >= KW_OUTPUTDRIVER && LA333_1 <= KW_OUTPUTFORMAT)||(LA333_1 >= KW_OVERWRITE && LA333_1 <= KW_OWNER)||(LA333_1 >= KW_PARTITIONED && LA333_1 <= KW_PARTITIONS)||LA333_1==KW_PLUS||LA333_1==KW_PRETTY||LA333_1==KW_PRINCIPALS||(LA333_1 >= KW_PURGE && LA333_1 <= KW_QUARTER)||LA333_1==KW_READ||(LA333_1 >= KW_REBUILD && LA333_1 <= KW_RECORDWRITER)||(LA333_1 >= KW_RELOAD && LA333_1 <= KW_RESTRICT)||LA333_1==KW_REWRITE||(LA333_1 >= KW_ROLE && LA333_1 <= KW_ROLES)||(LA333_1 >= KW_SCHEMA && LA333_1 <= KW_SECOND)||(LA333_1 >= KW_SEMI && LA333_1 <= KW_SERVER)||(LA333_1 >= KW_SETS && LA333_1 <= KW_SKEWED)||(LA333_1 >= KW_SNAPSHOT && LA333_1 <= KW_SSL)||(LA333_1 >= KW_STATISTICS && LA333_1 <= KW_SUMMARY)||LA333_1==KW_TABLES||(LA333_1 >= KW_TBLPROPERTIES && LA333_1 <= KW_TERMINATED)||LA333_1==KW_TINYINT||(LA333_1 >= KW_TOUCH && LA333_1 <= KW_TRANSACTIONS)||LA333_1==KW_UNARCHIVE||LA333_1==KW_UNDO||LA333_1==KW_UNIONTYPE||(LA333_1 >= KW_UNLOCK && LA333_1 <= KW_UNSIGNED)||(LA333_1 >= KW_URI && LA333_1 <= KW_USE)||(LA333_1 >= KW_UTC && LA333_1 <= KW_VALIDATE)||LA333_1==KW_VALUE_TYPE||(LA333_1 >= KW_VECTORIZATION && LA333_1 <= KW_WEEK)||LA333_1==KW_WHILE||(LA333_1 >= KW_WORK && LA333_1 <= KW_YEAR)||LA333_1==KW_BATCH||LA333_1==KW_DAYOFWEEK||LA333_1==KW_HOLD_DDLTIME||LA333_1==KW_IGNORE||LA333_1==KW_NO_DROP||LA333_1==KW_OFFLINE||LA333_1==KW_PROTECTION||LA333_1==KW_READONLY) ) {
							alt333=1;
						}
					}
					switch (alt333) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2726:52: LPAREN targetCols= columnNameList RPAREN
							{
							LPAREN1027=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertClause18214); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN1027);

							pushFollow(FOLLOW_columnNameList_in_insertClause18218);
							targetCols=columnNameList();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_columnNameList.add(targetCols.getTree());
							RPAREN1028=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertClause18220); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN1028);

							}
							break;

					}

					// AST REWRITE
					// elements: tableOrPartition, targetCols
					// token labels: 
					// rule labels: targetCols, retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_targetCols=new RewriteRuleSubtreeStream(adaptor,"rule targetCols",targetCols!=null?targetCols.getTree():null);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2727:8: -> ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2727:11: ^( TOK_INSERT_INTO tableOrPartition ( $targetCols)? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INSERT_INTO, "TOK_INSERT_INTO"), root_1);
						adaptor.addChild(root_1, stream_tableOrPartition.nextTree());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2727:47: ( $targetCols)?
						if ( stream_targetCols.hasNext() ) {
							adaptor.addChild(root_1, stream_targetCols.nextTree());
						}
						stream_targetCols.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "insertClause"


	public static class destination_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "destination"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2730:1: destination : ( (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? ) | KW_TABLE tableOrPartition -> tableOrPartition );
	public final HiveASTParser.destination_return destination() throws RecognitionException {
		HiveASTParser.destination_return retval = new HiveASTParser.destination_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token local=null;
		Token KW_DIRECTORY1029=null;
		Token StringLiteral1030=null;
		Token KW_TABLE1033=null;
		ParserRuleReturnScope tableRowFormat1031 =null;
		ParserRuleReturnScope tableFileFormat1032 =null;
		ParserRuleReturnScope tableOrPartition1034 =null;

		HiveParserASTNode local_tree=null;
		HiveParserASTNode KW_DIRECTORY1029_tree=null;
		HiveParserASTNode StringLiteral1030_tree=null;
		HiveParserASTNode KW_TABLE1033_tree=null;
		RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
		RewriteRuleTokenStream stream_KW_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORY");
		RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
		RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
		RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
		RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
		RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");

		 pushMsg("destination specification", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2733:4: ( (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )? -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? ) | KW_TABLE tableOrPartition -> tableOrPartition )
			int alt338=2;
			int LA338_0 = input.LA(1);
			if ( (LA338_0==KW_DIRECTORY||LA338_0==KW_LOCAL) ) {
				alt338=1;
			}
			else if ( (LA338_0==KW_TABLE) ) {
				alt338=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 338, 0, input);
				throw nvae;
			}

			switch (alt338) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2734:6: (local= KW_LOCAL )? KW_DIRECTORY StringLiteral ( tableRowFormat )? ( tableFileFormat )?
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2734:6: (local= KW_LOCAL )?
					int alt335=2;
					int LA335_0 = input.LA(1);
					if ( (LA335_0==KW_LOCAL) ) {
						alt335=1;
					}
					switch (alt335) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2734:7: local= KW_LOCAL
							{
							local=(Token)match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_destination18276); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_LOCAL.add(local);

							}
							break;

					}

					KW_DIRECTORY1029=(Token)match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination18280); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DIRECTORY.add(KW_DIRECTORY1029);

					StringLiteral1030=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_destination18282); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral1030);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2734:53: ( tableRowFormat )?
					int alt336=2;
					int LA336_0 = input.LA(1);
					if ( (LA336_0==KW_ROW) ) {
						alt336=1;
					}
					switch (alt336) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2734:53: tableRowFormat
							{
							pushFollow(FOLLOW_tableRowFormat_in_destination18284);
							tableRowFormat1031=tableRowFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableRowFormat.add(tableRowFormat1031.getTree());
							}
							break;

					}

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2734:69: ( tableFileFormat )?
					int alt337=2;
					int LA337_0 = input.LA(1);
					if ( (LA337_0==KW_STORED) ) {
						alt337=1;
					}
					switch (alt337) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2734:69: tableFileFormat
							{
							pushFollow(FOLLOW_tableFileFormat_in_destination18287);
							tableFileFormat1032=tableFileFormat();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_tableFileFormat.add(tableFileFormat1032.getTree());
							}
							break;

					}

					// AST REWRITE
					// elements: StringLiteral, tableRowFormat, local, tableFileFormat
					// token labels: local
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_local=new RewriteRuleTokenStream(adaptor,"token local",local);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2735:8: -> ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2735:11: ^( TOK_DIR StringLiteral ( $local)? ( tableRowFormat )? ( tableFileFormat )? )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DIR, "TOK_DIR"), root_1);
						adaptor.addChild(root_1, stream_StringLiteral.nextNode());
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2735:36: ( $local)?
						if ( stream_local.hasNext() ) {
							adaptor.addChild(root_1, stream_local.nextNode());
						}
						stream_local.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2735:43: ( tableRowFormat )?
						if ( stream_tableRowFormat.hasNext() ) {
							adaptor.addChild(root_1, stream_tableRowFormat.nextTree());
						}
						stream_tableRowFormat.reset();

						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2735:59: ( tableFileFormat )?
						if ( stream_tableFileFormat.hasNext() ) {
							adaptor.addChild(root_1, stream_tableFileFormat.nextTree());
						}
						stream_tableFileFormat.reset();

						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2736:6: KW_TABLE tableOrPartition
					{
					KW_TABLE1033=(Token)match(input,KW_TABLE,FOLLOW_KW_TABLE_in_destination18320); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_TABLE.add(KW_TABLE1033);

					pushFollow(FOLLOW_tableOrPartition_in_destination18322);
					tableOrPartition1034=tableOrPartition();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_tableOrPartition.add(tableOrPartition1034.getTree());
					// AST REWRITE
					// elements: tableOrPartition
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2736:32: -> tableOrPartition
					{
						adaptor.addChild(root_0, stream_tableOrPartition.nextTree());
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "destination"


	public static class limitClause_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "limitClause"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2739:1: limitClause : ( KW_LIMIT ( (offset= Number COMMA )? num= Number ) -> ^( TOK_LIMIT ( $offset)? $num) | KW_LIMIT num= Number KW_OFFSET offset= Number -> ^( TOK_LIMIT ( $offset)? $num) );
	public final HiveASTParser.limitClause_return limitClause() throws RecognitionException {
		HiveASTParser.limitClause_return retval = new HiveASTParser.limitClause_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token offset=null;
		Token num=null;
		Token KW_LIMIT1035=null;
		Token COMMA1036=null;
		Token KW_LIMIT1037=null;
		Token KW_OFFSET1038=null;

		HiveParserASTNode offset_tree=null;
		HiveParserASTNode num_tree=null;
		HiveParserASTNode KW_LIMIT1035_tree=null;
		HiveParserASTNode COMMA1036_tree=null;
		HiveParserASTNode KW_LIMIT1037_tree=null;
		HiveParserASTNode KW_OFFSET1038_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");
		RewriteRuleTokenStream stream_KW_OFFSET=new RewriteRuleTokenStream(adaptor,"token KW_OFFSET");

		 pushMsg("limit clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2742:4: ( KW_LIMIT ( (offset= Number COMMA )? num= Number ) -> ^( TOK_LIMIT ( $offset)? $num) | KW_LIMIT num= Number KW_OFFSET offset= Number -> ^( TOK_LIMIT ( $offset)? $num) )
			int alt340=2;
			int LA340_0 = input.LA(1);
			if ( (LA340_0==KW_LIMIT) ) {
				int LA340_1 = input.LA(2);
				if ( (LA340_1==Number) ) {
					int LA340_2 = input.LA(3);
					if ( (LA340_2==KW_OFFSET) ) {
						alt340=2;
					}
					else if ( (LA340_2==EOF||LA340_2==COMMA||LA340_2==KW_EXCEPT||LA340_2==KW_INSERT||LA340_2==KW_INTERSECT||LA340_2==KW_MAP||LA340_2==KW_MINUS||LA340_2==KW_REDUCE||LA340_2==KW_SELECT||LA340_2==KW_UNION||LA340_2==RPAREN) ) {
						alt340=1;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return retval;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 340, 2, input);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 340, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 340, 0, input);
				throw nvae;
			}

			switch (alt340) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2743:4: KW_LIMIT ( (offset= Number COMMA )? num= Number )
					{
					KW_LIMIT1035=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause18354); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIMIT.add(KW_LIMIT1035);

					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2743:13: ( (offset= Number COMMA )? num= Number )
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2743:14: (offset= Number COMMA )? num= Number
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2743:14: (offset= Number COMMA )?
					int alt339=2;
					int LA339_0 = input.LA(1);
					if ( (LA339_0==Number) ) {
						int LA339_1 = input.LA(2);
						if ( (LA339_1==COMMA) ) {
							alt339=1;
						}
					}
					switch (alt339) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2743:15: offset= Number COMMA
							{
							offset=(Token)match(input,Number,FOLLOW_Number_in_limitClause18360); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_Number.add(offset);

							COMMA1036=(Token)match(input,COMMA,FOLLOW_COMMA_in_limitClause18362); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA1036);

							}
							break;

					}

					num=(Token)match(input,Number,FOLLOW_Number_in_limitClause18368); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(num);

					}

					// AST REWRITE
					// elements: num, offset
					// token labels: offset, num
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_offset=new RewriteRuleTokenStream(adaptor,"token offset",offset);
					RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2743:49: -> ^( TOK_LIMIT ( $offset)? $num)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2743:52: ^( TOK_LIMIT ( $offset)? $num)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_LIMIT, "TOK_LIMIT"), root_1);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2743:64: ( $offset)?
						if ( stream_offset.hasNext() ) {
							adaptor.addChild(root_1, stream_offset.nextNode());
						}
						stream_offset.reset();

						adaptor.addChild(root_1, stream_num.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2744:6: KW_LIMIT num= Number KW_OFFSET offset= Number
					{
					KW_LIMIT1037=(Token)match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause18391); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_LIMIT.add(KW_LIMIT1037);

					num=(Token)match(input,Number,FOLLOW_Number_in_limitClause18395); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(num);

					KW_OFFSET1038=(Token)match(input,KW_OFFSET,FOLLOW_KW_OFFSET_in_limitClause18397); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_OFFSET.add(KW_OFFSET1038);

					offset=(Token)match(input,Number,FOLLOW_Number_in_limitClause18401); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(offset);

					// AST REWRITE
					// elements: offset, num
					// token labels: offset, num
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleTokenStream stream_offset=new RewriteRuleTokenStream(adaptor,"token offset",offset);
					RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2744:50: -> ^( TOK_LIMIT ( $offset)? $num)
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2744:53: ^( TOK_LIMIT ( $offset)? $num)
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_LIMIT, "TOK_LIMIT"), root_1);
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2744:65: ( $offset)?
						if ( stream_offset.hasNext() ) {
							adaptor.addChild(root_1, stream_offset.nextNode());
						}
						stream_offset.reset();

						adaptor.addChild(root_1, stream_num.nextNode());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "limitClause"


	public static class deleteStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "deleteStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2748:1: deleteStatement : KW_DELETE KW_FROM tableName ( whereClause )? -> ^( TOK_DELETE_FROM tableName ( whereClause )? ) ;
	public final HiveASTParser.deleteStatement_return deleteStatement() throws RecognitionException {
		HiveASTParser.deleteStatement_return retval = new HiveASTParser.deleteStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_DELETE1039=null;
		Token KW_FROM1040=null;
		ParserRuleReturnScope tableName1041 =null;
		ParserRuleReturnScope whereClause1042 =null;

		HiveParserASTNode KW_DELETE1039_tree=null;
		HiveParserASTNode KW_FROM1040_tree=null;
		RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
		RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("delete statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2751:4: ( KW_DELETE KW_FROM tableName ( whereClause )? -> ^( TOK_DELETE_FROM tableName ( whereClause )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2752:4: KW_DELETE KW_FROM tableName ( whereClause )?
			{
			KW_DELETE1039=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_deleteStatement18445); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE1039);

			KW_FROM1040=(Token)match(input,KW_FROM,FOLLOW_KW_FROM_in_deleteStatement18447); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_FROM.add(KW_FROM1040);

			pushFollow(FOLLOW_tableName_in_deleteStatement18449);
			tableName1041=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName1041.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2752:32: ( whereClause )?
			int alt341=2;
			int LA341_0 = input.LA(1);
			if ( (LA341_0==KW_WHERE) ) {
				alt341=1;
			}
			switch (alt341) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2752:33: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_deleteStatement18452);
					whereClause1042=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_whereClause.add(whereClause1042.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: whereClause, tableName
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2752:47: -> ^( TOK_DELETE_FROM tableName ( whereClause )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2752:50: ^( TOK_DELETE_FROM tableName ( whereClause )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_DELETE_FROM, "TOK_DELETE_FROM"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2752:78: ( whereClause )?
				if ( stream_whereClause.hasNext() ) {
					adaptor.addChild(root_1, stream_whereClause.nextTree());
				}
				stream_whereClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "deleteStatement"


	public static class columnAssignmentClause_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "columnAssignmentClause"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2756:1: columnAssignmentClause : tableOrColumn EQUAL ^ precedencePlusExpression ;
	public final HiveASTParser.columnAssignmentClause_return columnAssignmentClause() throws RecognitionException {
		HiveASTParser.columnAssignmentClause_return retval = new HiveASTParser.columnAssignmentClause_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token EQUAL1044=null;
		ParserRuleReturnScope tableOrColumn1043 =null;
		ParserRuleReturnScope precedencePlusExpression1045 =null;

		HiveParserASTNode EQUAL1044_tree=null;

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2757:4: ( tableOrColumn EQUAL ^ precedencePlusExpression )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2758:4: tableOrColumn EQUAL ^ precedencePlusExpression
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			pushFollow(FOLLOW_tableOrColumn_in_columnAssignmentClause18485);
			tableOrColumn1043=tableOrColumn();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, tableOrColumn1043.getTree());

			EQUAL1044=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_columnAssignmentClause18487); if (state.failed) return retval;
			if ( state.backtracking==0 ) {
			EQUAL1044_tree = (HiveParserASTNode)adaptor.create(EQUAL1044);
			root_0 = (HiveParserASTNode)adaptor.becomeRoot(EQUAL1044_tree, root_0);
			}

			pushFollow(FOLLOW_precedencePlusExpression_in_columnAssignmentClause18490);
			precedencePlusExpression1045=precedencePlusExpression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) adaptor.addChild(root_0, precedencePlusExpression1045.getTree());

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "columnAssignmentClause"


	public static class setColumnsClause_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "setColumnsClause"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2762:1: setColumnsClause : KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )* -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* ) ;
	public final HiveASTParser.setColumnsClause_return setColumnsClause() throws RecognitionException {
		HiveASTParser.setColumnsClause_return retval = new HiveASTParser.setColumnsClause_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SET1046=null;
		Token COMMA1048=null;
		ParserRuleReturnScope columnAssignmentClause1047 =null;
		ParserRuleReturnScope columnAssignmentClause1049 =null;

		HiveParserASTNode KW_SET1046_tree=null;
		HiveParserASTNode COMMA1048_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_columnAssignmentClause=new RewriteRuleSubtreeStream(adaptor,"rule columnAssignmentClause");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2763:4: ( KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )* -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2764:4: KW_SET columnAssignmentClause ( COMMA columnAssignmentClause )*
			{
			KW_SET1046=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setColumnsClause18510); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET1046);

			pushFollow(FOLLOW_columnAssignmentClause_in_setColumnsClause18512);
			columnAssignmentClause1047=columnAssignmentClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_columnAssignmentClause.add(columnAssignmentClause1047.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2764:34: ( COMMA columnAssignmentClause )*
			loop342:
			while (true) {
				int alt342=2;
				int LA342_0 = input.LA(1);
				if ( (LA342_0==COMMA) ) {
					alt342=1;
				}

				switch (alt342) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2764:35: COMMA columnAssignmentClause
					{
					COMMA1048=(Token)match(input,COMMA,FOLLOW_COMMA_in_setColumnsClause18515); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COMMA.add(COMMA1048);

					pushFollow(FOLLOW_columnAssignmentClause_in_setColumnsClause18517);
					columnAssignmentClause1049=columnAssignmentClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_columnAssignmentClause.add(columnAssignmentClause1049.getTree());
					}
					break;

				default :
					break loop342;
				}
			}

			// AST REWRITE
			// elements: columnAssignmentClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2764:66: -> ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2764:69: ^( TOK_SET_COLUMNS_CLAUSE ( columnAssignmentClause )* )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SET_COLUMNS_CLAUSE, "TOK_SET_COLUMNS_CLAUSE"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2764:94: ( columnAssignmentClause )*
				while ( stream_columnAssignmentClause.hasNext() ) {
					adaptor.addChild(root_1, stream_columnAssignmentClause.nextTree());
				}
				stream_columnAssignmentClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setColumnsClause"


	public static class updateStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "updateStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2771:1: updateStatement : KW_UPDATE tableName setColumnsClause ( whereClause )? -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? ) ;
	public final HiveASTParser.updateStatement_return updateStatement() throws RecognitionException {
		HiveASTParser.updateStatement_return retval = new HiveASTParser.updateStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_UPDATE1050=null;
		ParserRuleReturnScope tableName1051 =null;
		ParserRuleReturnScope setColumnsClause1052 =null;
		ParserRuleReturnScope whereClause1053 =null;

		HiveParserASTNode KW_UPDATE1050_tree=null;
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleSubtreeStream stream_setColumnsClause=new RewriteRuleSubtreeStream(adaptor,"rule setColumnsClause");
		RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");

		 pushMsg("update statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2774:4: ( KW_UPDATE tableName setColumnsClause ( whereClause )? -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2775:4: KW_UPDATE tableName setColumnsClause ( whereClause )?
			{
			KW_UPDATE1050=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_updateStatement18559); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE1050);

			pushFollow(FOLLOW_tableName_in_updateStatement18561);
			tableName1051=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName1051.getTree());
			pushFollow(FOLLOW_setColumnsClause_in_updateStatement18563);
			setColumnsClause1052=setColumnsClause();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_setColumnsClause.add(setColumnsClause1052.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2775:41: ( whereClause )?
			int alt343=2;
			int LA343_0 = input.LA(1);
			if ( (LA343_0==KW_WHERE) ) {
				alt343=1;
			}
			switch (alt343) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2775:41: whereClause
					{
					pushFollow(FOLLOW_whereClause_in_updateStatement18565);
					whereClause1053=whereClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_whereClause.add(whereClause1053.getTree());
					}
					break;

			}

			// AST REWRITE
			// elements: tableName, setColumnsClause, whereClause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2775:54: -> ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2775:57: ^( TOK_UPDATE_TABLE tableName setColumnsClause ( whereClause )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_UPDATE_TABLE, "TOK_UPDATE_TABLE"), root_1);
				adaptor.addChild(root_1, stream_tableName.nextTree());
				adaptor.addChild(root_1, stream_setColumnsClause.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2775:103: ( whereClause )?
				if ( stream_whereClause.hasNext() ) {
					adaptor.addChild(root_1, stream_whereClause.nextTree());
				}
				stream_whereClause.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "updateStatement"


	public static class sqlTransactionStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "sqlTransactionStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2782:1: sqlTransactionStatement : ( startTransactionStatement | commitStatement | rollbackStatement | setAutoCommitStatement );
	public final HiveASTParser.sqlTransactionStatement_return sqlTransactionStatement() throws RecognitionException {
		HiveASTParser.sqlTransactionStatement_return retval = new HiveASTParser.sqlTransactionStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope startTransactionStatement1054 =null;
		ParserRuleReturnScope commitStatement1055 =null;
		ParserRuleReturnScope rollbackStatement1056 =null;
		ParserRuleReturnScope setAutoCommitStatement1057 =null;


		 pushMsg("transaction statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2785:3: ( startTransactionStatement | commitStatement | rollbackStatement | setAutoCommitStatement )
			int alt344=4;
			switch ( input.LA(1) ) {
			case KW_START:
				{
				alt344=1;
				}
				break;
			case KW_COMMIT:
				{
				alt344=2;
				}
				break;
			case KW_ROLLBACK:
				{
				alt344=3;
				}
				break;
			case KW_SET:
				{
				alt344=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 344, 0, input);
				throw nvae;
			}
			switch (alt344) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2786:3: startTransactionStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_startTransactionStatement_in_sqlTransactionStatement18607);
					startTransactionStatement1054=startTransactionStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, startTransactionStatement1054.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2787:4: commitStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_commitStatement_in_sqlTransactionStatement18612);
					commitStatement1055=commitStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, commitStatement1055.getTree());

					}
					break;
				case 3 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2788:4: rollbackStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_rollbackStatement_in_sqlTransactionStatement18617);
					rollbackStatement1056=rollbackStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, rollbackStatement1056.getTree());

					}
					break;
				case 4 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2789:4: setAutoCommitStatement
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_setAutoCommitStatement_in_sqlTransactionStatement18622);
					setAutoCommitStatement1057=setAutoCommitStatement();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, setAutoCommitStatement1057.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "sqlTransactionStatement"


	public static class startTransactionStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "startTransactionStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2792:1: startTransactionStatement : KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )? -> ^( TOK_START_TRANSACTION ( transactionMode )* ) ;
	public final HiveASTParser.startTransactionStatement_return startTransactionStatement() throws RecognitionException {
		HiveASTParser.startTransactionStatement_return retval = new HiveASTParser.startTransactionStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_START1058=null;
		Token KW_TRANSACTION1059=null;
		Token COMMA1061=null;
		ParserRuleReturnScope transactionMode1060 =null;
		ParserRuleReturnScope transactionMode1062 =null;

		HiveParserASTNode KW_START1058_tree=null;
		HiveParserASTNode KW_TRANSACTION1059_tree=null;
		HiveParserASTNode COMMA1061_tree=null;
		RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
		RewriteRuleTokenStream stream_KW_START=new RewriteRuleTokenStream(adaptor,"token KW_START");
		RewriteRuleTokenStream stream_KW_TRANSACTION=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTION");
		RewriteRuleSubtreeStream stream_transactionMode=new RewriteRuleSubtreeStream(adaptor,"rule transactionMode");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2793:3: ( KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )? -> ^( TOK_START_TRANSACTION ( transactionMode )* ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2794:3: KW_START KW_TRANSACTION ( transactionMode ( COMMA transactionMode )* )?
			{
			KW_START1058=(Token)match(input,KW_START,FOLLOW_KW_START_in_startTransactionStatement18636); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_START.add(KW_START1058);

			KW_TRANSACTION1059=(Token)match(input,KW_TRANSACTION,FOLLOW_KW_TRANSACTION_in_startTransactionStatement18638); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TRANSACTION.add(KW_TRANSACTION1059);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2794:27: ( transactionMode ( COMMA transactionMode )* )?
			int alt346=2;
			int LA346_0 = input.LA(1);
			if ( (LA346_0==KW_ISOLATION||LA346_0==KW_READ) ) {
				alt346=1;
			}
			switch (alt346) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2794:29: transactionMode ( COMMA transactionMode )*
					{
					pushFollow(FOLLOW_transactionMode_in_startTransactionStatement18642);
					transactionMode1060=transactionMode();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_transactionMode.add(transactionMode1060.getTree());
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2794:46: ( COMMA transactionMode )*
					loop345:
					while (true) {
						int alt345=2;
						int LA345_0 = input.LA(1);
						if ( (LA345_0==COMMA) ) {
							alt345=1;
						}

						switch (alt345) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2794:48: COMMA transactionMode
							{
							COMMA1061=(Token)match(input,COMMA,FOLLOW_COMMA_in_startTransactionStatement18647); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_COMMA.add(COMMA1061);

							pushFollow(FOLLOW_transactionMode_in_startTransactionStatement18649);
							transactionMode1062=transactionMode();
							state._fsp--;
							if (state.failed) return retval;
							if ( state.backtracking==0 ) stream_transactionMode.add(transactionMode1062.getTree());
							}
							break;

						default :
							break loop345;
						}
					}

					}
					break;

			}

			// AST REWRITE
			// elements: transactionMode
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2794:77: -> ^( TOK_START_TRANSACTION ( transactionMode )* )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2794:80: ^( TOK_START_TRANSACTION ( transactionMode )* )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_START_TRANSACTION, "TOK_START_TRANSACTION"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2794:104: ( transactionMode )*
				while ( stream_transactionMode.hasNext() ) {
					adaptor.addChild(root_1, stream_transactionMode.nextTree());
				}
				stream_transactionMode.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "startTransactionStatement"


	public static class transactionMode_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "transactionMode"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2797:1: transactionMode : ( isolationLevel | transactionAccessMode -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode ) );
	public final HiveASTParser.transactionMode_return transactionMode() throws RecognitionException {
		HiveASTParser.transactionMode_return retval = new HiveASTParser.transactionMode_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope isolationLevel1063 =null;
		ParserRuleReturnScope transactionAccessMode1064 =null;

		RewriteRuleSubtreeStream stream_transactionAccessMode=new RewriteRuleSubtreeStream(adaptor,"rule transactionAccessMode");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2798:3: ( isolationLevel | transactionAccessMode -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode ) )
			int alt347=2;
			int LA347_0 = input.LA(1);
			if ( (LA347_0==KW_ISOLATION) ) {
				alt347=1;
			}
			else if ( (LA347_0==KW_READ) ) {
				alt347=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 347, 0, input);
				throw nvae;
			}

			switch (alt347) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2799:3: isolationLevel
					{
					root_0 = (HiveParserASTNode)adaptor.nil();


					pushFollow(FOLLOW_isolationLevel_in_transactionMode18680);
					isolationLevel1063=isolationLevel();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, isolationLevel1063.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2800:5: transactionAccessMode
					{
					pushFollow(FOLLOW_transactionAccessMode_in_transactionMode18686);
					transactionAccessMode1064=transactionAccessMode();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_transactionAccessMode.add(transactionAccessMode1064.getTree());
					// AST REWRITE
					// elements: transactionAccessMode
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2800:27: -> ^( TOK_TXN_ACCESS_MODE transactionAccessMode )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2800:30: ^( TOK_TXN_ACCESS_MODE transactionAccessMode )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TXN_ACCESS_MODE, "TOK_TXN_ACCESS_MODE"), root_1);
						adaptor.addChild(root_1, stream_transactionAccessMode.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transactionMode"


	public static class transactionAccessMode_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "transactionAccessMode"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2803:1: transactionAccessMode : ( KW_READ KW_ONLY -> TOK_TXN_READ_ONLY | KW_READ KW_WRITE -> TOK_TXN_READ_WRITE );
	public final HiveASTParser.transactionAccessMode_return transactionAccessMode() throws RecognitionException {
		HiveASTParser.transactionAccessMode_return retval = new HiveASTParser.transactionAccessMode_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_READ1065=null;
		Token KW_ONLY1066=null;
		Token KW_READ1067=null;
		Token KW_WRITE1068=null;

		HiveParserASTNode KW_READ1065_tree=null;
		HiveParserASTNode KW_ONLY1066_tree=null;
		HiveParserASTNode KW_READ1067_tree=null;
		HiveParserASTNode KW_WRITE1068_tree=null;
		RewriteRuleTokenStream stream_KW_READ=new RewriteRuleTokenStream(adaptor,"token KW_READ");
		RewriteRuleTokenStream stream_KW_ONLY=new RewriteRuleTokenStream(adaptor,"token KW_ONLY");
		RewriteRuleTokenStream stream_KW_WRITE=new RewriteRuleTokenStream(adaptor,"token KW_WRITE");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2804:3: ( KW_READ KW_ONLY -> TOK_TXN_READ_ONLY | KW_READ KW_WRITE -> TOK_TXN_READ_WRITE )
			int alt348=2;
			int LA348_0 = input.LA(1);
			if ( (LA348_0==KW_READ) ) {
				int LA348_1 = input.LA(2);
				if ( (LA348_1==KW_ONLY) ) {
					alt348=1;
				}
				else if ( (LA348_1==KW_WRITE) ) {
					alt348=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return retval;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 348, 1, input);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 348, 0, input);
				throw nvae;
			}

			switch (alt348) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2805:3: KW_READ KW_ONLY
					{
					KW_READ1065=(Token)match(input,KW_READ,FOLLOW_KW_READ_in_transactionAccessMode18709); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_READ.add(KW_READ1065);

					KW_ONLY1066=(Token)match(input,KW_ONLY,FOLLOW_KW_ONLY_in_transactionAccessMode18711); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_ONLY.add(KW_ONLY1066);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2805:19: -> TOK_TXN_READ_ONLY
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_TXN_READ_ONLY, "TOK_TXN_READ_ONLY"));
					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2806:5: KW_READ KW_WRITE
					{
					KW_READ1067=(Token)match(input,KW_READ,FOLLOW_KW_READ_in_transactionAccessMode18721); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_READ.add(KW_READ1067);

					KW_WRITE1068=(Token)match(input,KW_WRITE,FOLLOW_KW_WRITE_in_transactionAccessMode18723); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WRITE.add(KW_WRITE1068);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2806:22: -> TOK_TXN_READ_WRITE
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_TXN_READ_WRITE, "TOK_TXN_READ_WRITE"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "transactionAccessMode"


	public static class isolationLevel_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "isolationLevel"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2809:1: isolationLevel : KW_ISOLATION KW_LEVEL levelOfIsolation -> ^( TOK_ISOLATION_LEVEL levelOfIsolation ) ;
	public final HiveASTParser.isolationLevel_return isolationLevel() throws RecognitionException {
		HiveASTParser.isolationLevel_return retval = new HiveASTParser.isolationLevel_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ISOLATION1069=null;
		Token KW_LEVEL1070=null;
		ParserRuleReturnScope levelOfIsolation1071 =null;

		HiveParserASTNode KW_ISOLATION1069_tree=null;
		HiveParserASTNode KW_LEVEL1070_tree=null;
		RewriteRuleTokenStream stream_KW_LEVEL=new RewriteRuleTokenStream(adaptor,"token KW_LEVEL");
		RewriteRuleTokenStream stream_KW_ISOLATION=new RewriteRuleTokenStream(adaptor,"token KW_ISOLATION");
		RewriteRuleSubtreeStream stream_levelOfIsolation=new RewriteRuleSubtreeStream(adaptor,"rule levelOfIsolation");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2810:3: ( KW_ISOLATION KW_LEVEL levelOfIsolation -> ^( TOK_ISOLATION_LEVEL levelOfIsolation ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2811:3: KW_ISOLATION KW_LEVEL levelOfIsolation
			{
			KW_ISOLATION1069=(Token)match(input,KW_ISOLATION,FOLLOW_KW_ISOLATION_in_isolationLevel18742); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ISOLATION.add(KW_ISOLATION1069);

			KW_LEVEL1070=(Token)match(input,KW_LEVEL,FOLLOW_KW_LEVEL_in_isolationLevel18744); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_LEVEL.add(KW_LEVEL1070);

			pushFollow(FOLLOW_levelOfIsolation_in_isolationLevel18746);
			levelOfIsolation1071=levelOfIsolation();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_levelOfIsolation.add(levelOfIsolation1071.getTree());
			// AST REWRITE
			// elements: levelOfIsolation
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2811:42: -> ^( TOK_ISOLATION_LEVEL levelOfIsolation )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2811:45: ^( TOK_ISOLATION_LEVEL levelOfIsolation )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ISOLATION_LEVEL, "TOK_ISOLATION_LEVEL"), root_1);
				adaptor.addChild(root_1, stream_levelOfIsolation.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "isolationLevel"


	public static class levelOfIsolation_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "levelOfIsolation"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2815:1: levelOfIsolation : KW_SNAPSHOT -> TOK_ISOLATION_SNAPSHOT ;
	public final HiveASTParser.levelOfIsolation_return levelOfIsolation() throws RecognitionException {
		HiveASTParser.levelOfIsolation_return retval = new HiveASTParser.levelOfIsolation_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SNAPSHOT1072=null;

		HiveParserASTNode KW_SNAPSHOT1072_tree=null;
		RewriteRuleTokenStream stream_KW_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token KW_SNAPSHOT");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2816:3: ( KW_SNAPSHOT -> TOK_ISOLATION_SNAPSHOT )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2817:3: KW_SNAPSHOT
			{
			KW_SNAPSHOT1072=(Token)match(input,KW_SNAPSHOT,FOLLOW_KW_SNAPSHOT_in_levelOfIsolation18771); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SNAPSHOT.add(KW_SNAPSHOT1072);

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2817:15: -> TOK_ISOLATION_SNAPSHOT
			{
				adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_ISOLATION_SNAPSHOT, "TOK_ISOLATION_SNAPSHOT"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "levelOfIsolation"


	public static class commitStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "commitStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2820:1: commitStatement : KW_COMMIT ( KW_WORK )? -> TOK_COMMIT ;
	public final HiveASTParser.commitStatement_return commitStatement() throws RecognitionException {
		HiveASTParser.commitStatement_return retval = new HiveASTParser.commitStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_COMMIT1073=null;
		Token KW_WORK1074=null;

		HiveParserASTNode KW_COMMIT1073_tree=null;
		HiveParserASTNode KW_WORK1074_tree=null;
		RewriteRuleTokenStream stream_KW_WORK=new RewriteRuleTokenStream(adaptor,"token KW_WORK");
		RewriteRuleTokenStream stream_KW_COMMIT=new RewriteRuleTokenStream(adaptor,"token KW_COMMIT");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2821:3: ( KW_COMMIT ( KW_WORK )? -> TOK_COMMIT )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2822:3: KW_COMMIT ( KW_WORK )?
			{
			KW_COMMIT1073=(Token)match(input,KW_COMMIT,FOLLOW_KW_COMMIT_in_commitStatement18790); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_COMMIT.add(KW_COMMIT1073);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2822:13: ( KW_WORK )?
			int alt349=2;
			int LA349_0 = input.LA(1);
			if ( (LA349_0==KW_WORK) ) {
				alt349=1;
			}
			switch (alt349) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2822:15: KW_WORK
					{
					KW_WORK1074=(Token)match(input,KW_WORK,FOLLOW_KW_WORK_in_commitStatement18794); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WORK.add(KW_WORK1074);

					}
					break;

			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2822:26: -> TOK_COMMIT
			{
				adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_COMMIT, "TOK_COMMIT"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "commitStatement"


	public static class rollbackStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "rollbackStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2825:1: rollbackStatement : KW_ROLLBACK ( KW_WORK )? -> TOK_ROLLBACK ;
	public final HiveASTParser.rollbackStatement_return rollbackStatement() throws RecognitionException {
		HiveASTParser.rollbackStatement_return retval = new HiveASTParser.rollbackStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ROLLBACK1075=null;
		Token KW_WORK1076=null;

		HiveParserASTNode KW_ROLLBACK1075_tree=null;
		HiveParserASTNode KW_WORK1076_tree=null;
		RewriteRuleTokenStream stream_KW_ROLLBACK=new RewriteRuleTokenStream(adaptor,"token KW_ROLLBACK");
		RewriteRuleTokenStream stream_KW_WORK=new RewriteRuleTokenStream(adaptor,"token KW_WORK");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2826:3: ( KW_ROLLBACK ( KW_WORK )? -> TOK_ROLLBACK )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2827:3: KW_ROLLBACK ( KW_WORK )?
			{
			KW_ROLLBACK1075=(Token)match(input,KW_ROLLBACK,FOLLOW_KW_ROLLBACK_in_rollbackStatement18816); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ROLLBACK.add(KW_ROLLBACK1075);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2827:15: ( KW_WORK )?
			int alt350=2;
			int LA350_0 = input.LA(1);
			if ( (LA350_0==KW_WORK) ) {
				alt350=1;
			}
			switch (alt350) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2827:17: KW_WORK
					{
					KW_WORK1076=(Token)match(input,KW_WORK,FOLLOW_KW_WORK_in_rollbackStatement18820); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_WORK.add(KW_WORK1076);

					}
					break;

			}

			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2827:28: -> TOK_ROLLBACK
			{
				adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_ROLLBACK, "TOK_ROLLBACK"));
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "rollbackStatement"


	public static class setAutoCommitStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "setAutoCommitStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2829:1: setAutoCommitStatement : KW_SET KW_AUTOCOMMIT booleanValueTok -> ^( TOK_SET_AUTOCOMMIT booleanValueTok ) ;
	public final HiveASTParser.setAutoCommitStatement_return setAutoCommitStatement() throws RecognitionException {
		HiveASTParser.setAutoCommitStatement_return retval = new HiveASTParser.setAutoCommitStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_SET1077=null;
		Token KW_AUTOCOMMIT1078=null;
		ParserRuleReturnScope booleanValueTok1079 =null;

		HiveParserASTNode KW_SET1077_tree=null;
		HiveParserASTNode KW_AUTOCOMMIT1078_tree=null;
		RewriteRuleTokenStream stream_KW_AUTOCOMMIT=new RewriteRuleTokenStream(adaptor,"token KW_AUTOCOMMIT");
		RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
		RewriteRuleSubtreeStream stream_booleanValueTok=new RewriteRuleSubtreeStream(adaptor,"rule booleanValueTok");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2830:3: ( KW_SET KW_AUTOCOMMIT booleanValueTok -> ^( TOK_SET_AUTOCOMMIT booleanValueTok ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2831:3: KW_SET KW_AUTOCOMMIT booleanValueTok
			{
			KW_SET1077=(Token)match(input,KW_SET,FOLLOW_KW_SET_in_setAutoCommitStatement18841); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_SET.add(KW_SET1077);

			KW_AUTOCOMMIT1078=(Token)match(input,KW_AUTOCOMMIT,FOLLOW_KW_AUTOCOMMIT_in_setAutoCommitStatement18843); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AUTOCOMMIT.add(KW_AUTOCOMMIT1078);

			pushFollow(FOLLOW_booleanValueTok_in_setAutoCommitStatement18845);
			booleanValueTok1079=booleanValueTok();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_booleanValueTok.add(booleanValueTok1079.getTree());
			// AST REWRITE
			// elements: booleanValueTok
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2831:40: -> ^( TOK_SET_AUTOCOMMIT booleanValueTok )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2831:43: ^( TOK_SET_AUTOCOMMIT booleanValueTok )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_SET_AUTOCOMMIT, "TOK_SET_AUTOCOMMIT"), root_1);
				adaptor.addChild(root_1, stream_booleanValueTok.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "setAutoCommitStatement"


	public static class abortTransactionStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "abortTransactionStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2837:1: abortTransactionStatement : KW_ABORT KW_TRANSACTIONS ( Number )+ -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ ) ;
	public final HiveASTParser.abortTransactionStatement_return abortTransactionStatement() throws RecognitionException {
		HiveASTParser.abortTransactionStatement_return retval = new HiveASTParser.abortTransactionStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_ABORT1080=null;
		Token KW_TRANSACTIONS1081=null;
		Token Number1082=null;

		HiveParserASTNode KW_ABORT1080_tree=null;
		HiveParserASTNode KW_TRANSACTIONS1081_tree=null;
		HiveParserASTNode Number1082_tree=null;
		RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
		RewriteRuleTokenStream stream_KW_TRANSACTIONS=new RewriteRuleTokenStream(adaptor,"token KW_TRANSACTIONS");
		RewriteRuleTokenStream stream_KW_ABORT=new RewriteRuleTokenStream(adaptor,"token KW_ABORT");

		 pushMsg("abort transactions statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2840:3: ( KW_ABORT KW_TRANSACTIONS ( Number )+ -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2841:3: KW_ABORT KW_TRANSACTIONS ( Number )+
			{
			KW_ABORT1080=(Token)match(input,KW_ABORT,FOLLOW_KW_ABORT_in_abortTransactionStatement18880); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ABORT.add(KW_ABORT1080);

			KW_TRANSACTIONS1081=(Token)match(input,KW_TRANSACTIONS,FOLLOW_KW_TRANSACTIONS_in_abortTransactionStatement18882); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_TRANSACTIONS.add(KW_TRANSACTIONS1081);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2841:28: ( Number )+
			int cnt351=0;
			loop351:
			while (true) {
				int alt351=2;
				int LA351_0 = input.LA(1);
				if ( (LA351_0==Number) ) {
					alt351=1;
				}

				switch (alt351) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2841:30: Number
					{
					Number1082=(Token)match(input,Number,FOLLOW_Number_in_abortTransactionStatement18886); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_Number.add(Number1082);

					}
					break;

				default :
					if ( cnt351 >= 1 ) break loop351;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(351, input);
					throw eee;
				}
				cnt351++;
			}

			// AST REWRITE
			// elements: Number
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2841:40: -> ^( TOK_ABORT_TRANSACTIONS ( Number )+ )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2841:43: ^( TOK_ABORT_TRANSACTIONS ( Number )+ )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_ABORT_TRANSACTIONS, "TOK_ABORT_TRANSACTIONS"), root_1);
				if ( !(stream_Number.hasNext()) ) {
					throw new RewriteEarlyExitException();
				}
				while ( stream_Number.hasNext() ) {
					adaptor.addChild(root_1, stream_Number.nextNode());
				}
				stream_Number.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "abortTransactionStatement"


	public static class mergeStatement_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "mergeStatement"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2848:1: mergeStatement : KW_MERGE KW_INTO tableName ( ( KW_AS )? identifier )? KW_USING joinSourcePart KW_ON expression whenClauses -> ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression whenClauses ) ;
	public final HiveASTParser.mergeStatement_return mergeStatement() throws RecognitionException {
		HiveASTParser.mergeStatement_return retval = new HiveASTParser.mergeStatement_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_MERGE1083=null;
		Token KW_INTO1084=null;
		Token KW_AS1086=null;
		Token KW_USING1088=null;
		Token KW_ON1090=null;
		ParserRuleReturnScope tableName1085 =null;
		ParserRuleReturnScope identifier1087 =null;
		ParserRuleReturnScope joinSourcePart1089 =null;
		ParserRuleReturnScope expression1091 =null;
		ParserRuleReturnScope whenClauses1092 =null;

		HiveParserASTNode KW_MERGE1083_tree=null;
		HiveParserASTNode KW_INTO1084_tree=null;
		HiveParserASTNode KW_AS1086_tree=null;
		HiveParserASTNode KW_USING1088_tree=null;
		HiveParserASTNode KW_ON1090_tree=null;
		RewriteRuleTokenStream stream_KW_MERGE=new RewriteRuleTokenStream(adaptor,"token KW_MERGE");
		RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
		RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
		RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
		RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_whenClauses=new RewriteRuleSubtreeStream(adaptor,"rule whenClauses");
		RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
		RewriteRuleSubtreeStream stream_joinSourcePart=new RewriteRuleSubtreeStream(adaptor,"rule joinSourcePart");

		 pushMsg("MERGE statement", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2851:4: ( KW_MERGE KW_INTO tableName ( ( KW_AS )? identifier )? KW_USING joinSourcePart KW_ON expression whenClauses -> ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression whenClauses ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2852:4: KW_MERGE KW_INTO tableName ( ( KW_AS )? identifier )? KW_USING joinSourcePart KW_ON expression whenClauses
			{
			KW_MERGE1083=(Token)match(input,KW_MERGE,FOLLOW_KW_MERGE_in_mergeStatement18932); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MERGE.add(KW_MERGE1083);

			KW_INTO1084=(Token)match(input,KW_INTO,FOLLOW_KW_INTO_in_mergeStatement18934); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INTO.add(KW_INTO1084);

			pushFollow(FOLLOW_tableName_in_mergeStatement18936);
			tableName1085=tableName();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_tableName.add(tableName1085.getTree());
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2852:31: ( ( KW_AS )? identifier )?
			int alt353=2;
			int LA353_0 = input.LA(1);
			if ( (LA353_0==Identifier||(LA353_0 >= KW_ABORT && LA353_0 <= KW_AFTER)||LA353_0==KW_ANALYZE||LA353_0==KW_ARCHIVE||(LA353_0 >= KW_AS && LA353_0 <= KW_ASC)||(LA353_0 >= KW_AUTOCOMMIT && LA353_0 <= KW_BEFORE)||(LA353_0 >= KW_BUCKET && LA353_0 <= KW_BUCKETS)||(LA353_0 >= KW_CACHE && LA353_0 <= KW_CASCADE)||LA353_0==KW_CHANGE||(LA353_0 >= KW_CLUSTER && LA353_0 <= KW_COLLECTION)||(LA353_0 >= KW_COLUMNS && LA353_0 <= KW_COMMENT)||(LA353_0 >= KW_COMPACT && LA353_0 <= KW_CONCATENATE)||LA353_0==KW_CONTINUE||LA353_0==KW_DATA||LA353_0==KW_DATABASES||(LA353_0 >= KW_DATETIME && LA353_0 <= KW_DBPROPERTIES)||(LA353_0 >= KW_DEFERRED && LA353_0 <= KW_DEFINED)||(LA353_0 >= KW_DELIMITED && LA353_0 <= KW_DESC)||(LA353_0 >= KW_DETAIL && LA353_0 <= KW_DISABLE)||LA353_0==KW_DISTRIBUTE||LA353_0==KW_DOW||(LA353_0 >= KW_DUMP && LA353_0 <= KW_ELEM_TYPE)||LA353_0==KW_ENABLE||LA353_0==KW_ESCAPED||LA353_0==KW_EXCLUSIVE||(LA353_0 >= KW_EXPLAIN && LA353_0 <= KW_EXPRESSION)||(LA353_0 >= KW_FIELDS && LA353_0 <= KW_FIRST)||(LA353_0 >= KW_FORMAT && LA353_0 <= KW_FORMATTED)||LA353_0==KW_FUNCTIONS||(LA353_0 >= KW_HOUR && LA353_0 <= KW_IDXPROPERTIES)||(LA353_0 >= KW_INDEX && LA353_0 <= KW_INDEXES)||(LA353_0 >= KW_INPATH && LA353_0 <= KW_INPUTFORMAT)||(LA353_0 >= KW_ISOLATION && LA353_0 <= KW_JAR)||(LA353_0 >= KW_KEY && LA353_0 <= KW_LAST)||LA353_0==KW_LEVEL||(LA353_0 >= KW_LIMIT && LA353_0 <= KW_LOAD)||(LA353_0 >= KW_LOCATION && LA353_0 <= KW_LONG)||(LA353_0 >= KW_MAPJOIN && LA353_0 <= KW_MATERIALIZED)||LA353_0==KW_METADATA||(LA353_0 >= KW_MINUTE && LA353_0 <= KW_MONTH)||LA353_0==KW_MSCK||(LA353_0 >= KW_NORELY && LA353_0 <= KW_NOSCAN)||LA353_0==KW_NOVALIDATE||LA353_0==KW_NULLS||LA353_0==KW_OFFSET||(LA353_0 >= KW_OPERATOR && LA353_0 <= KW_OPTION)||(LA353_0 >= KW_OUTPUTDRIVER && LA353_0 <= KW_OUTPUTFORMAT)||(LA353_0 >= KW_OVERWRITE && LA353_0 <= KW_OWNER)||(LA353_0 >= KW_PARTITIONED && LA353_0 <= KW_PARTITIONS)||LA353_0==KW_PLUS||LA353_0==KW_PRETTY||LA353_0==KW_PRINCIPALS||(LA353_0 >= KW_PURGE && LA353_0 <= KW_QUARTER)||LA353_0==KW_READ||(LA353_0 >= KW_REBUILD && LA353_0 <= KW_RECORDWRITER)||(LA353_0 >= KW_RELOAD && LA353_0 <= KW_RESTRICT)||LA353_0==KW_REWRITE||(LA353_0 >= KW_ROLE && LA353_0 <= KW_ROLES)||(LA353_0 >= KW_SCHEMA && LA353_0 <= KW_SECOND)||(LA353_0 >= KW_SEMI && LA353_0 <= KW_SERVER)||(LA353_0 >= KW_SETS && LA353_0 <= KW_SKEWED)||(LA353_0 >= KW_SNAPSHOT && LA353_0 <= KW_SSL)||(LA353_0 >= KW_STATISTICS && LA353_0 <= KW_SUMMARY)||LA353_0==KW_TABLES||(LA353_0 >= KW_TBLPROPERTIES && LA353_0 <= KW_TERMINATED)||LA353_0==KW_TINYINT||(LA353_0 >= KW_TOUCH && LA353_0 <= KW_TRANSACTIONS)||LA353_0==KW_UNARCHIVE||LA353_0==KW_UNDO||LA353_0==KW_UNIONTYPE||(LA353_0 >= KW_UNLOCK && LA353_0 <= KW_UNSIGNED)||(LA353_0 >= KW_URI && LA353_0 <= KW_USE)||(LA353_0 >= KW_UTC && LA353_0 <= KW_VALIDATE)||LA353_0==KW_VALUE_TYPE||(LA353_0 >= KW_VECTORIZATION && LA353_0 <= KW_WEEK)||LA353_0==KW_WHILE||(LA353_0 >= KW_WORK && LA353_0 <= KW_YEAR)||LA353_0==KW_BATCH||LA353_0==KW_DAYOFWEEK||LA353_0==KW_HOLD_DDLTIME||LA353_0==KW_IGNORE||LA353_0==KW_NO_DROP||LA353_0==KW_OFFLINE||LA353_0==KW_PROTECTION||LA353_0==KW_READONLY) ) {
				alt353=1;
			}
			switch (alt353) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2852:32: ( KW_AS )? identifier
					{
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2852:32: ( KW_AS )?
					int alt352=2;
					int LA352_0 = input.LA(1);
					if ( (LA352_0==KW_AS) ) {
						alt352=1;
					}
					switch (alt352) {
						case 1 :
							// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2852:32: KW_AS
							{
							KW_AS1086=(Token)match(input,KW_AS,FOLLOW_KW_AS_in_mergeStatement18939); if (state.failed) return retval; 
							if ( state.backtracking==0 ) stream_KW_AS.add(KW_AS1086);

							}
							break;

					}

					pushFollow(FOLLOW_identifier_in_mergeStatement18942);
					identifier1087=identifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_identifier.add(identifier1087.getTree());
					}
					break;

			}

			KW_USING1088=(Token)match(input,KW_USING,FOLLOW_KW_USING_in_mergeStatement18946); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_USING.add(KW_USING1088);

			pushFollow(FOLLOW_joinSourcePart_in_mergeStatement18948);
			joinSourcePart1089=joinSourcePart();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_joinSourcePart.add(joinSourcePart1089.getTree());
			KW_ON1090=(Token)match(input,KW_ON,FOLLOW_KW_ON_in_mergeStatement18950); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_ON.add(KW_ON1090);

			pushFollow(FOLLOW_expression_in_mergeStatement18952);
			expression1091=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression1091.getTree());
			pushFollow(FOLLOW_whenClauses_in_mergeStatement18954);
			whenClauses1092=whenClauses();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_whenClauses.add(whenClauses1092.getTree());
			// AST REWRITE
			// elements: identifier, expression, whenClauses, tableName, joinSourcePart
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2852:105: -> ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression whenClauses )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2853:5: ^( TOK_MERGE ^( TOK_TABREF tableName ( identifier )? ) joinSourcePart expression whenClauses )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_MERGE, "TOK_MERGE"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2853:17: ^( TOK_TABREF tableName ( identifier )? )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_TABREF, "TOK_TABREF"), root_2);
				adaptor.addChild(root_2, stream_tableName.nextTree());
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2853:40: ( identifier )?
				if ( stream_identifier.hasNext() ) {
					adaptor.addChild(root_2, stream_identifier.nextTree());
				}
				stream_identifier.reset();

				adaptor.addChild(root_1, root_2);
				}

				adaptor.addChild(root_1, stream_joinSourcePart.nextTree());
				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_1, stream_whenClauses.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "mergeStatement"


	public static class whenClauses_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "whenClauses"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2861:1: whenClauses : ( whenMatchedAndClause | whenMatchedThenClause )* ( whenNotMatchedClause )? ;
	public final HiveASTParser.whenClauses_return whenClauses() throws RecognitionException {
		HiveASTParser.whenClauses_return retval = new HiveASTParser.whenClauses_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		ParserRuleReturnScope whenMatchedAndClause1093 =null;
		ParserRuleReturnScope whenMatchedThenClause1094 =null;
		ParserRuleReturnScope whenNotMatchedClause1095 =null;


		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2862:4: ( ( whenMatchedAndClause | whenMatchedThenClause )* ( whenNotMatchedClause )? )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2863:4: ( whenMatchedAndClause | whenMatchedThenClause )* ( whenNotMatchedClause )?
			{
			root_0 = (HiveParserASTNode)adaptor.nil();


			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2863:4: ( whenMatchedAndClause | whenMatchedThenClause )*
			loop354:
			while (true) {
				int alt354=3;
				int LA354_0 = input.LA(1);
				if ( (LA354_0==KW_WHEN) ) {
					int LA354_1 = input.LA(2);
					if ( (LA354_1==KW_MATCHED) ) {
						int LA354_4 = input.LA(3);
						if ( (LA354_4==KW_AND) ) {
							alt354=1;
						}
						else if ( (LA354_4==KW_THEN) ) {
							alt354=2;
						}

					}

				}

				switch (alt354) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2863:5: whenMatchedAndClause
					{
					pushFollow(FOLLOW_whenMatchedAndClause_in_whenClauses18999);
					whenMatchedAndClause1093=whenMatchedAndClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whenMatchedAndClause1093.getTree());

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2863:26: whenMatchedThenClause
					{
					pushFollow(FOLLOW_whenMatchedThenClause_in_whenClauses19001);
					whenMatchedThenClause1094=whenMatchedThenClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whenMatchedThenClause1094.getTree());

					}
					break;

				default :
					break loop354;
				}
			}

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2863:50: ( whenNotMatchedClause )?
			int alt355=2;
			int LA355_0 = input.LA(1);
			if ( (LA355_0==KW_WHEN) ) {
				alt355=1;
			}
			switch (alt355) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2863:50: whenNotMatchedClause
					{
					pushFollow(FOLLOW_whenNotMatchedClause_in_whenClauses19005);
					whenNotMatchedClause1095=whenNotMatchedClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, whenNotMatchedClause1095.getTree());

					}
					break;

			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whenClauses"


	public static class whenNotMatchedClause_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "whenNotMatchedClause"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2865:1: whenNotMatchedClause : KW_WHEN KW_NOT KW_MATCHED ( KW_AND expression )? KW_THEN KW_INSERT KW_VALUES valueRowConstructor -> ^( TOK_NOT_MATCHED ^( TOK_INSERT valueRowConstructor ) ( expression )? ) ;
	public final HiveASTParser.whenNotMatchedClause_return whenNotMatchedClause() throws RecognitionException {
		HiveASTParser.whenNotMatchedClause_return retval = new HiveASTParser.whenNotMatchedClause_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_WHEN1096=null;
		Token KW_NOT1097=null;
		Token KW_MATCHED1098=null;
		Token KW_AND1099=null;
		Token KW_THEN1101=null;
		Token KW_INSERT1102=null;
		Token KW_VALUES1103=null;
		ParserRuleReturnScope expression1100 =null;
		ParserRuleReturnScope valueRowConstructor1104 =null;

		HiveParserASTNode KW_WHEN1096_tree=null;
		HiveParserASTNode KW_NOT1097_tree=null;
		HiveParserASTNode KW_MATCHED1098_tree=null;
		HiveParserASTNode KW_AND1099_tree=null;
		HiveParserASTNode KW_THEN1101_tree=null;
		HiveParserASTNode KW_INSERT1102_tree=null;
		HiveParserASTNode KW_VALUES1103_tree=null;
		RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
		RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
		RewriteRuleTokenStream stream_KW_AND=new RewriteRuleTokenStream(adaptor,"token KW_AND");
		RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
		RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
		RewriteRuleTokenStream stream_KW_MATCHED=new RewriteRuleTokenStream(adaptor,"token KW_MATCHED");
		RewriteRuleTokenStream stream_KW_VALUES=new RewriteRuleTokenStream(adaptor,"token KW_VALUES");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_valueRowConstructor=new RewriteRuleSubtreeStream(adaptor,"rule valueRowConstructor");

		 pushMsg("WHEN NOT MATCHED clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2868:4: ( KW_WHEN KW_NOT KW_MATCHED ( KW_AND expression )? KW_THEN KW_INSERT KW_VALUES valueRowConstructor -> ^( TOK_NOT_MATCHED ^( TOK_INSERT valueRowConstructor ) ( expression )? ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2869:3: KW_WHEN KW_NOT KW_MATCHED ( KW_AND expression )? KW_THEN KW_INSERT KW_VALUES valueRowConstructor
			{
			KW_WHEN1096=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenNotMatchedClause19032); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WHEN.add(KW_WHEN1096);

			KW_NOT1097=(Token)match(input,KW_NOT,FOLLOW_KW_NOT_in_whenNotMatchedClause19034); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_NOT.add(KW_NOT1097);

			KW_MATCHED1098=(Token)match(input,KW_MATCHED,FOLLOW_KW_MATCHED_in_whenNotMatchedClause19036); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MATCHED.add(KW_MATCHED1098);

			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2869:29: ( KW_AND expression )?
			int alt356=2;
			int LA356_0 = input.LA(1);
			if ( (LA356_0==KW_AND) ) {
				alt356=1;
			}
			switch (alt356) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2869:30: KW_AND expression
					{
					KW_AND1099=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_whenNotMatchedClause19039); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_AND.add(KW_AND1099);

					pushFollow(FOLLOW_expression_in_whenNotMatchedClause19041);
					expression1100=expression();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_expression.add(expression1100.getTree());
					}
					break;

			}

			KW_THEN1101=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_whenNotMatchedClause19045); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_THEN.add(KW_THEN1101);

			KW_INSERT1102=(Token)match(input,KW_INSERT,FOLLOW_KW_INSERT_in_whenNotMatchedClause19047); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_INSERT.add(KW_INSERT1102);

			KW_VALUES1103=(Token)match(input,KW_VALUES,FOLLOW_KW_VALUES_in_whenNotMatchedClause19049); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_VALUES.add(KW_VALUES1103);

			pushFollow(FOLLOW_valueRowConstructor_in_whenNotMatchedClause19051);
			valueRowConstructor1104=valueRowConstructor();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_valueRowConstructor.add(valueRowConstructor1104.getTree());
			// AST REWRITE
			// elements: expression, valueRowConstructor
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2869:98: -> ^( TOK_NOT_MATCHED ^( TOK_INSERT valueRowConstructor ) ( expression )? )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2870:5: ^( TOK_NOT_MATCHED ^( TOK_INSERT valueRowConstructor ) ( expression )? )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_NOT_MATCHED, "TOK_NOT_MATCHED"), root_1);
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2870:23: ^( TOK_INSERT valueRowConstructor )
				{
				HiveParserASTNode root_2 = (HiveParserASTNode)adaptor.nil();
				root_2 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);
				adaptor.addChild(root_2, stream_valueRowConstructor.nextTree());
				adaptor.addChild(root_1, root_2);
				}

				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2870:57: ( expression )?
				if ( stream_expression.hasNext() ) {
					adaptor.addChild(root_1, stream_expression.nextTree());
				}
				stream_expression.reset();

				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whenNotMatchedClause"


	public static class whenMatchedAndClause_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "whenMatchedAndClause"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2872:1: whenMatchedAndClause : KW_WHEN KW_MATCHED KW_AND expression KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete expression ) ;
	public final HiveASTParser.whenMatchedAndClause_return whenMatchedAndClause() throws RecognitionException {
		HiveASTParser.whenMatchedAndClause_return retval = new HiveASTParser.whenMatchedAndClause_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_WHEN1105=null;
		Token KW_MATCHED1106=null;
		Token KW_AND1107=null;
		Token KW_THEN1109=null;
		ParserRuleReturnScope expression1108 =null;
		ParserRuleReturnScope updateOrDelete1110 =null;

		HiveParserASTNode KW_WHEN1105_tree=null;
		HiveParserASTNode KW_MATCHED1106_tree=null;
		HiveParserASTNode KW_AND1107_tree=null;
		HiveParserASTNode KW_THEN1109_tree=null;
		RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
		RewriteRuleTokenStream stream_KW_AND=new RewriteRuleTokenStream(adaptor,"token KW_AND");
		RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
		RewriteRuleTokenStream stream_KW_MATCHED=new RewriteRuleTokenStream(adaptor,"token KW_MATCHED");
		RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		RewriteRuleSubtreeStream stream_updateOrDelete=new RewriteRuleSubtreeStream(adaptor,"rule updateOrDelete");

		 pushMsg("WHEN MATCHED AND clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2875:3: ( KW_WHEN KW_MATCHED KW_AND expression KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete expression ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2876:3: KW_WHEN KW_MATCHED KW_AND expression KW_THEN updateOrDelete
			{
			KW_WHEN1105=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenMatchedAndClause19094); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WHEN.add(KW_WHEN1105);

			KW_MATCHED1106=(Token)match(input,KW_MATCHED,FOLLOW_KW_MATCHED_in_whenMatchedAndClause19096); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MATCHED.add(KW_MATCHED1106);

			KW_AND1107=(Token)match(input,KW_AND,FOLLOW_KW_AND_in_whenMatchedAndClause19098); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_AND.add(KW_AND1107);

			pushFollow(FOLLOW_expression_in_whenMatchedAndClause19100);
			expression1108=expression();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_expression.add(expression1108.getTree());
			KW_THEN1109=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_whenMatchedAndClause19102); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_THEN.add(KW_THEN1109);

			pushFollow(FOLLOW_updateOrDelete_in_whenMatchedAndClause19104);
			updateOrDelete1110=updateOrDelete();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_updateOrDelete.add(updateOrDelete1110.getTree());
			// AST REWRITE
			// elements: updateOrDelete, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2876:63: -> ^( TOK_MATCHED updateOrDelete expression )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2877:5: ^( TOK_MATCHED updateOrDelete expression )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_MATCHED, "TOK_MATCHED"), root_1);
				adaptor.addChild(root_1, stream_updateOrDelete.nextTree());
				adaptor.addChild(root_1, stream_expression.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whenMatchedAndClause"


	public static class whenMatchedThenClause_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "whenMatchedThenClause"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2879:1: whenMatchedThenClause : KW_WHEN KW_MATCHED KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete ) ;
	public final HiveASTParser.whenMatchedThenClause_return whenMatchedThenClause() throws RecognitionException {
		HiveASTParser.whenMatchedThenClause_return retval = new HiveASTParser.whenMatchedThenClause_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_WHEN1111=null;
		Token KW_MATCHED1112=null;
		Token KW_THEN1113=null;
		ParserRuleReturnScope updateOrDelete1114 =null;

		HiveParserASTNode KW_WHEN1111_tree=null;
		HiveParserASTNode KW_MATCHED1112_tree=null;
		HiveParserASTNode KW_THEN1113_tree=null;
		RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
		RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
		RewriteRuleTokenStream stream_KW_MATCHED=new RewriteRuleTokenStream(adaptor,"token KW_MATCHED");
		RewriteRuleSubtreeStream stream_updateOrDelete=new RewriteRuleSubtreeStream(adaptor,"rule updateOrDelete");

		 pushMsg("WHEN MATCHED THEN clause", state); 
		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2882:3: ( KW_WHEN KW_MATCHED KW_THEN updateOrDelete -> ^( TOK_MATCHED updateOrDelete ) )
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2883:3: KW_WHEN KW_MATCHED KW_THEN updateOrDelete
			{
			KW_WHEN1111=(Token)match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenMatchedThenClause19142); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_WHEN.add(KW_WHEN1111);

			KW_MATCHED1112=(Token)match(input,KW_MATCHED,FOLLOW_KW_MATCHED_in_whenMatchedThenClause19144); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_MATCHED.add(KW_MATCHED1112);

			KW_THEN1113=(Token)match(input,KW_THEN,FOLLOW_KW_THEN_in_whenMatchedThenClause19146); if (state.failed) return retval; 
			if ( state.backtracking==0 ) stream_KW_THEN.add(KW_THEN1113);

			pushFollow(FOLLOW_updateOrDelete_in_whenMatchedThenClause19148);
			updateOrDelete1114=updateOrDelete();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_updateOrDelete.add(updateOrDelete1114.getTree());
			// AST REWRITE
			// elements: updateOrDelete
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (HiveParserASTNode)adaptor.nil();
			// 2883:45: -> ^( TOK_MATCHED updateOrDelete )
			{
				// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2884:6: ^( TOK_MATCHED updateOrDelete )
				{
				HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
				root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_MATCHED, "TOK_MATCHED"), root_1);
				adaptor.addChild(root_1, stream_updateOrDelete.nextTree());
				adaptor.addChild(root_0, root_1);
				}

			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
			if ( state.backtracking==0 ) { popMsg(state); }
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "whenMatchedThenClause"


	public static class updateOrDelete_return extends ParserRuleReturnScope {
		HiveParserASTNode tree;
		@Override
		public HiveParserASTNode getTree() { return tree; }
	};


	// $ANTLR start "updateOrDelete"
	// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2886:1: updateOrDelete : ( KW_UPDATE setColumnsClause -> ^( TOK_UPDATE setColumnsClause ) | KW_DELETE -> TOK_DELETE );
	public final HiveASTParser.updateOrDelete_return updateOrDelete() throws RecognitionException {
		HiveASTParser.updateOrDelete_return retval = new HiveASTParser.updateOrDelete_return();
		retval.start = input.LT(1);

		HiveParserASTNode root_0 = null;

		Token KW_UPDATE1115=null;
		Token KW_DELETE1117=null;
		ParserRuleReturnScope setColumnsClause1116 =null;

		HiveParserASTNode KW_UPDATE1115_tree=null;
		HiveParserASTNode KW_DELETE1117_tree=null;
		RewriteRuleTokenStream stream_KW_DELETE=new RewriteRuleTokenStream(adaptor,"token KW_DELETE");
		RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
		RewriteRuleSubtreeStream stream_setColumnsClause=new RewriteRuleSubtreeStream(adaptor,"rule setColumnsClause");

		try {
			// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2887:4: ( KW_UPDATE setColumnsClause -> ^( TOK_UPDATE setColumnsClause ) | KW_DELETE -> TOK_DELETE )
			int alt357=2;
			int LA357_0 = input.LA(1);
			if ( (LA357_0==KW_UPDATE) ) {
				alt357=1;
			}
			else if ( (LA357_0==KW_DELETE) ) {
				alt357=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae =
					new NoViableAltException("", 357, 0, input);
				throw nvae;
			}

			switch (alt357) {
				case 1 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2888:4: KW_UPDATE setColumnsClause
					{
					KW_UPDATE1115=(Token)match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_updateOrDelete19177); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_UPDATE.add(KW_UPDATE1115);

					pushFollow(FOLLOW_setColumnsClause_in_updateOrDelete19179);
					setColumnsClause1116=setColumnsClause();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_setColumnsClause.add(setColumnsClause1116.getTree());
					// AST REWRITE
					// elements: setColumnsClause
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2888:31: -> ^( TOK_UPDATE setColumnsClause )
					{
						// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2888:34: ^( TOK_UPDATE setColumnsClause )
						{
						HiveParserASTNode root_1 = (HiveParserASTNode)adaptor.nil();
						root_1 = (HiveParserASTNode)adaptor.becomeRoot((HiveParserASTNode)adaptor.create(TOK_UPDATE, "TOK_UPDATE"), root_1);
						adaptor.addChild(root_1, stream_setColumnsClause.nextTree());
						adaptor.addChild(root_0, root_1);
						}

					}


					retval.tree = root_0;
					}

					}
					break;
				case 2 :
					// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2890:4: KW_DELETE
					{
					KW_DELETE1117=(Token)match(input,KW_DELETE,FOLLOW_KW_DELETE_in_updateOrDelete19197); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_KW_DELETE.add(KW_DELETE1117);

					// AST REWRITE
					// elements: 
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if ( state.backtracking==0 ) {
					retval.tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

					root_0 = (HiveParserASTNode)adaptor.nil();
					// 2890:14: -> TOK_DELETE
					{
						adaptor.addChild(root_0, (HiveParserASTNode)adaptor.create(TOK_DELETE, "TOK_DELETE"));
					}


					retval.tree = root_0;
					}

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (HiveParserASTNode)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		catch (RecognitionException e) {
		 reportError(e);
		  throw e;
		}

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "updateOrDelete"

	// $ANTLR start synpred1_HiveASTParser
	public final void synpred1_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:886:7: ( grantPrivileges )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:886:8: grantPrivileges
		{
		pushFollow(FOLLOW_grantPrivileges_in_synpred1_HiveASTParser2518);
		grantPrivileges();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred1_HiveASTParser

	// $ANTLR start synpred2_HiveASTParser
	public final void synpred2_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:887:7: ( revokePrivileges )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:887:8: revokePrivileges
		{
		pushFollow(FOLLOW_revokePrivileges_in_synpred2_HiveASTParser2532);
		revokePrivileges();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred2_HiveASTParser

	// $ANTLR start synpred3_HiveASTParser
	public final void synpred3_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1138:7: ( alterStatementSuffixRename[true] )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1138:8: alterStatementSuffixRename[true]
		{
		pushFollow(FOLLOW_alterStatementSuffixRename_in_synpred3_HiveASTParser4566);
		alterStatementSuffixRename(true);
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred3_HiveASTParser

	// $ANTLR start synpred4_HiveASTParser
	public final void synpred4_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1497:4: ( KW_ELEM_TYPE )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1497:5: KW_ELEM_TYPE
		{
		match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_synpred4_HiveASTParser7253); if (state.failed) return;

		}

	}
	// $ANTLR end synpred4_HiveASTParser

	// $ANTLR start synpred5_HiveASTParser
	public final void synpred5_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1499:4: ( KW_KEY_TYPE )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1499:5: KW_KEY_TYPE
		{
		match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_synpred5_HiveASTParser7270); if (state.failed) return;

		}

	}
	// $ANTLR end synpred5_HiveASTParser

	// $ANTLR start synpred6_HiveASTParser
	public final void synpred6_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1501:4: ( KW_VALUE_TYPE )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1501:5: KW_VALUE_TYPE
		{
		match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_synpred6_HiveASTParser7287); if (state.failed) return;

		}

	}
	// $ANTLR end synpred6_HiveASTParser

	// $ANTLR start synpred7_HiveASTParser
	public final void synpred7_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1525:5: ( KW_DATABASE | KW_SCHEMA )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:
		{
		if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred7_HiveASTParser

	// $ANTLR start synpred8_HiveASTParser
	public final void synpred8_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1527:5: ( KW_FUNCTION )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1527:6: KW_FUNCTION
		{
		match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_synpred8_HiveASTParser7495); if (state.failed) return;

		}

	}
	// $ANTLR end synpred8_HiveASTParser

	// $ANTLR start synpred9_HiveASTParser
	public final void synpred9_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1529:5: ( KW_FORMATTED | KW_EXTENDED | KW_PRETTY )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:
		{
		if ( input.LA(1)==KW_EXTENDED||input.LA(1)==KW_FORMATTED||input.LA(1)==KW_PRETTY ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred9_HiveASTParser

	// $ANTLR start synpred10_HiveASTParser
	public final void synpred10_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1540:7: ( KW_COMPUTE )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1540:8: KW_COMPUTE
		{
		match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_synpred10_HiveASTParser7654); if (state.failed) return;

		}

	}
	// $ANTLR end synpred10_HiveASTParser

	// $ANTLR start synpred11_HiveASTParser
	public final void synpred11_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1544:7: ( KW_CACHE )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1544:8: KW_CACHE
		{
		match(input,KW_CACHE,FOLLOW_KW_CACHE_in_synpred11_HiveASTParser7794); if (state.failed) return;

		}

	}
	// $ANTLR end synpred11_HiveASTParser

	// $ANTLR start synpred12_HiveASTParser
	public final void synpred12_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1559:9: ( KW_DATABASE | KW_SCHEMA )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:
		{
		if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred12_HiveASTParser

	// $ANTLR start synpred13_HiveASTParser
	public final void synpred13_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1568:7: ( KW_DATABASE | KW_SCHEMA )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:
		{
		if ( input.LA(1)==KW_DATABASE||input.LA(1)==KW_SCHEMA ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred13_HiveASTParser

	// $ANTLR start synpred14_HiveASTParser
	public final void synpred14_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1681:5: ( KW_ALL )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1681:6: KW_ALL
		{
		match(input,KW_ALL,FOLLOW_KW_ALL_in_synpred14_HiveASTParser9229); if (state.failed) return;

		}

	}
	// $ANTLR end synpred14_HiveASTParser

	// $ANTLR start synpred15_HiveASTParser
	public final void synpred15_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1683:5: ( KW_NONE )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1683:6: KW_NONE
		{
		match(input,KW_NONE,FOLLOW_KW_NONE_in_synpred15_HiveASTParser9260); if (state.failed) return;

		}

	}
	// $ANTLR end synpred15_HiveASTParser

	// $ANTLR start synpred16_HiveASTParser
	public final void synpred16_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1707:7: ( KW_ALL )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1707:8: KW_ALL
		{
		match(input,KW_ALL,FOLLOW_KW_ALL_in_synpred16_HiveASTParser9434); if (state.failed) return;

		}

	}
	// $ANTLR end synpred16_HiveASTParser

	// $ANTLR start synpred17_HiveASTParser
	public final void synpred17_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1972:117: ( storedAsDirs )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:1972:118: storedAsDirs
		{
		pushFollow(FOLLOW_storedAsDirs_in_synpred17_HiveASTParser11660);
		storedAsDirs();
		state._fsp--;
		if (state.failed) return;

		}

	}
	// $ANTLR end synpred17_HiveASTParser

	// $ANTLR start synpred18_HiveASTParser
	public final void synpred18_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2103:7: ( KW_STORED KW_AS KW_INPUTFORMAT )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2103:8: KW_STORED KW_AS KW_INPUTFORMAT
		{
		match(input,KW_STORED,FOLLOW_KW_STORED_in_synpred18_HiveASTParser12641); if (state.failed) return;

		match(input,KW_AS,FOLLOW_KW_AS_in_synpred18_HiveASTParser12643); if (state.failed) return;

		match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_synpred18_HiveASTParser12645); if (state.failed) return;

		}

	}
	// $ANTLR end synpred18_HiveASTParser

	// $ANTLR start synpred19_HiveASTParser
	public final void synpred19_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:25: ( KW_ELEM_TYPE )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:26: KW_ELEM_TYPE
		{
		match(input,KW_ELEM_TYPE,FOLLOW_KW_ELEM_TYPE_in_synpred19_HiveASTParser13083); if (state.failed) return;

		}

	}
	// $ANTLR end synpred19_HiveASTParser

	// $ANTLR start synpred20_HiveASTParser
	public final void synpred20_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:58: ( KW_KEY_TYPE )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:59: KW_KEY_TYPE
		{
		match(input,KW_KEY_TYPE,FOLLOW_KW_KEY_TYPE_in_synpred20_HiveASTParser13093); if (state.failed) return;

		}

	}
	// $ANTLR end synpred20_HiveASTParser

	// $ANTLR start synpred21_HiveASTParser
	public final void synpred21_HiveASTParser_fragment() throws RecognitionException {
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:89: ( KW_VALUE_TYPE )
		// org/apache/flink/table/planner/delegation/hive/parse/HiveASTParser.g:2154:90: KW_VALUE_TYPE
		{
		match(input,KW_VALUE_TYPE,FOLLOW_KW_VALUE_TYPE_in_synpred21_HiveASTParser13103); if (state.failed) return;

		}

	}
	// $ANTLR end synpred21_HiveASTParser

	// Delegated rules
	public HiveASTParser_IdentifiersASTParser.precedenceRegexpOperator_return precedenceRegexpOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceRegexpOperator(); }

	public HiveASTParser_SelectClauseASTParser.window_frame_boundary_return window_frame_boundary() throws RecognitionException { return gSelectClauseASTParser.window_frame_boundary(); }

	public HiveASTParser_IdentifiersASTParser.booleanValue_return booleanValue() throws RecognitionException { return gIdentifiersASTParser.booleanValue(); }

	public HiveASTParser_IdentifiersASTParser.precedenceSimilarOperator_return precedenceSimilarOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceSimilarOperator(); }

	public HiveASTParser_IdentifiersASTParser.rollupOldSyntax_return rollupOldSyntax() throws RecognitionException { return gIdentifiersASTParser.rollupOldSyntax(); }

	public HiveASTParser_SelectClauseASTParser.selectItem_return selectItem() throws RecognitionException { return gSelectClauseASTParser.selectItem(); }

	public HiveASTParser_FromClauseASTParser.fromSource_return fromSource() throws RecognitionException { return gFromClauseASTParser.fromSource(); }

	public HiveASTParser_IdentifiersASTParser.subQueryExpression_return subQueryExpression() throws RecognitionException { return gIdentifiersASTParser.subQueryExpression(); }

	public HiveASTParser_FromClauseASTParser.joinSourcePart_return joinSourcePart() throws RecognitionException { return gFromClauseASTParser.joinSourcePart(); }

	public HiveASTParser_IdentifiersASTParser.tableOrPartition_return tableOrPartition() throws RecognitionException { return gIdentifiersASTParser.tableOrPartition(); }

	public HiveASTParser_IdentifiersASTParser.sortByClause_return sortByClause() throws RecognitionException { return gIdentifiersASTParser.sortByClause(); }

	public HiveASTParser_IdentifiersASTParser.atomExpression_return atomExpression() throws RecognitionException { return gIdentifiersASTParser.atomExpression(); }

	public HiveASTParser_SelectClauseASTParser.window_value_expression_return window_value_expression() throws RecognitionException { return gSelectClauseASTParser.window_value_expression(); }

	public HiveASTParser_IdentifiersASTParser.expressionsNotInParenthesis_return expressionsNotInParenthesis(boolean isStruct) throws RecognitionException { return gIdentifiersASTParser.expressionsNotInParenthesis(isStruct); }

	public HiveASTParser_SelectClauseASTParser.window_frame_start_boundary_return window_frame_start_boundary() throws RecognitionException { return gSelectClauseASTParser.window_frame_start_boundary(); }

	public HiveASTParser_IdentifiersASTParser.principalIdentifier_return principalIdentifier() throws RecognitionException { return gIdentifiersASTParser.principalIdentifier(); }

	public HiveASTParser_FromClauseASTParser.fromClause_return fromClause() throws RecognitionException { return gFromClauseASTParser.fromClause(); }

	public HiveASTParser_IdentifiersASTParser.clusterByClause_return clusterByClause() throws RecognitionException { return gIdentifiersASTParser.clusterByClause(); }

	public HiveASTParser_FromClauseASTParser.expressionList_return expressionList() throws RecognitionException { return gFromClauseASTParser.expressionList(); }

	public HiveASTParser_SelectClauseASTParser.selectTrfmClause_return selectTrfmClause() throws RecognitionException { return gSelectClauseASTParser.selectTrfmClause(); }

	public HiveASTParser_IdentifiersASTParser.stringLiteralSequence_return stringLiteralSequence() throws RecognitionException { return gIdentifiersASTParser.stringLiteralSequence(); }

	public HiveASTParser_FromClauseASTParser.joinToken_return joinToken() throws RecognitionException { return gFromClauseASTParser.joinToken(); }

	public HiveASTParser_IdentifiersASTParser.expressionsInParenthesis_return expressionsInParenthesis(boolean isStruct) throws RecognitionException { return gIdentifiersASTParser.expressionsInParenthesis(isStruct); }

	public HiveASTParser_FromClauseASTParser.tableName_return tableName() throws RecognitionException { return gFromClauseASTParser.tableName(); }

	public HiveASTParser_IdentifiersASTParser.precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceUnarySuffixExpression(); }

	public HiveASTParser_IdentifiersASTParser.caseExpression_return caseExpression() throws RecognitionException { return gIdentifiersASTParser.caseExpression(); }

	public HiveASTParser_IdentifiersASTParser.precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceBitwiseOrOperator(); }

	public HiveASTParser_FromClauseASTParser.valuesTableConstructor_return valuesTableConstructor() throws RecognitionException { return gFromClauseASTParser.valuesTableConstructor(); }

	public HiveASTParser_IdentifiersASTParser.functionIdentifier_return functionIdentifier() throws RecognitionException { return gIdentifiersASTParser.functionIdentifier(); }

	public HiveASTParser_FromClauseASTParser.tableNameColList_return tableNameColList() throws RecognitionException { return gFromClauseASTParser.tableNameColList(); }

	public HiveASTParser_IdentifiersASTParser.precedenceSimilarExpressionAtom_return precedenceSimilarExpressionAtom(CommonTree t) throws RecognitionException { return gIdentifiersASTParser.precedenceSimilarExpressionAtom(t); }

	public HiveASTParser_IdentifiersASTParser.precedenceSimilarExpressionPart_return precedenceSimilarExpressionPart(CommonTree t) throws RecognitionException { return gIdentifiersASTParser.precedenceSimilarExpressionPart(t); }

	public HiveASTParser_FromClauseASTParser.partitionTableFunctionSource_return partitionTableFunctionSource() throws RecognitionException { return gFromClauseASTParser.partitionTableFunctionSource(); }

	public HiveASTParser_SelectClauseASTParser.selectExpression_return selectExpression() throws RecognitionException { return gSelectClauseASTParser.selectExpression(); }

	public HiveASTParser_IdentifiersASTParser.partitionVal_return partitionVal() throws RecognitionException { return gIdentifiersASTParser.partitionVal(); }

	public HiveASTParser_IdentifiersASTParser.precedenceEqualExpression_return precedenceEqualExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceEqualExpression(); }

	public HiveASTParser_IdentifiersASTParser.columnRefOrderNotInParenthesis_return columnRefOrderNotInParenthesis() throws RecognitionException { return gIdentifiersASTParser.columnRefOrderNotInParenthesis(); }

	public HiveASTParser_FromClauseASTParser.tableAllColumns_return tableAllColumns() throws RecognitionException { return gFromClauseASTParser.tableAllColumns(); }

	public HiveASTParser_IdentifiersASTParser.extractExpression_return extractExpression() throws RecognitionException { return gIdentifiersASTParser.extractExpression(); }

	public HiveASTParser_IdentifiersASTParser.precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceBitwiseOrExpression(); }

	public HiveASTParser_IdentifiersASTParser.precedenceFieldExpression_return precedenceFieldExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceFieldExpression(); }

	public HiveASTParser_IdentifiersASTParser.dropPartitionVal_return dropPartitionVal() throws RecognitionException { return gIdentifiersASTParser.dropPartitionVal(); }

	public HiveASTParser_SelectClauseASTParser.trfmClause_return trfmClause() throws RecognitionException { return gSelectClauseASTParser.trfmClause(); }

	public HiveASTParser_IdentifiersASTParser.groupByClause_return groupByClause() throws RecognitionException { return gIdentifiersASTParser.groupByClause(); }

	public HiveASTParser_FromClauseASTParser.joinSource_return joinSource() throws RecognitionException { return gFromClauseASTParser.joinSource(); }

	public HiveASTParser_FromClauseASTParser.viewName_return viewName() throws RecognitionException { return gFromClauseASTParser.viewName(); }

	public HiveASTParser_IdentifiersASTParser.precedencePlusExpression_return precedencePlusExpression() throws RecognitionException { return gIdentifiersASTParser.precedencePlusExpression(); }

	public HiveASTParser_FromClauseASTParser.atomjoinSource_return atomjoinSource() throws RecognitionException { return gFromClauseASTParser.atomjoinSource(); }

	public HiveASTParser_IdentifiersASTParser.precedenceAndExpression_return precedenceAndExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceAndExpression(); }

	public HiveASTParser_IdentifiersASTParser.expressionPart_return expressionPart(CommonTree t, boolean isStruct) throws RecognitionException { return gIdentifiersASTParser.expressionPart(t, isStruct); }

	public HiveASTParser_IdentifiersASTParser.dropPartitionSpec_return dropPartitionSpec() throws RecognitionException { return gIdentifiersASTParser.dropPartitionSpec(); }

	public HiveASTParser_IdentifiersASTParser.precedenceConcatenateExpression_return precedenceConcatenateExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceConcatenateExpression(); }

	public HiveASTParser_IdentifiersASTParser.havingCondition_return havingCondition() throws RecognitionException { return gIdentifiersASTParser.havingCondition(); }

	public HiveASTParser_FromClauseASTParser.whereClause_return whereClause() throws RecognitionException { return gFromClauseASTParser.whereClause(); }

	public HiveASTParser_IdentifiersASTParser.orderByClause_return orderByClause() throws RecognitionException { return gIdentifiersASTParser.orderByClause(); }

	public HiveASTParser_IdentifiersASTParser.function_return function() throws RecognitionException { return gIdentifiersASTParser.function(); }

	public HiveASTParser_FromClauseASTParser.partitioningSpec_return partitioningSpec() throws RecognitionException { return gFromClauseASTParser.partitioningSpec(); }

	public HiveASTParser_IdentifiersASTParser.dropPartitionOperator_return dropPartitionOperator() throws RecognitionException { return gIdentifiersASTParser.dropPartitionOperator(); }

	public HiveASTParser_IdentifiersASTParser.havingClause_return havingClause() throws RecognitionException { return gIdentifiersASTParser.havingClause(); }

	public HiveASTParser_IdentifiersASTParser.columnRefOrderInParenthesis_return columnRefOrderInParenthesis() throws RecognitionException { return gIdentifiersASTParser.columnRefOrderInParenthesis(); }

	public HiveASTParser_IdentifiersASTParser.precedenceNotOperator_return precedenceNotOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceNotOperator(); }

	public HiveASTParser_FromClauseASTParser.tableOrColumn_return tableOrColumn() throws RecognitionException { return gFromClauseASTParser.tableOrColumn(); }

	public HiveASTParser_IdentifiersASTParser.groupingSetExpression_return groupingSetExpression() throws RecognitionException { return gIdentifiersASTParser.groupingSetExpression(); }

	public HiveASTParser_IdentifiersASTParser.precedenceOrOperator_return precedenceOrOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceOrOperator(); }

	public HiveASTParser_SelectClauseASTParser.window_specification_return window_specification() throws RecognitionException { return gSelectClauseASTParser.window_specification(); }

	public HiveASTParser_IdentifiersASTParser.sql11ReservedKeywordsUsedAsFunctionName_return sql11ReservedKeywordsUsedAsFunctionName() throws RecognitionException { return gIdentifiersASTParser.sql11ReservedKeywordsUsedAsFunctionName(); }

	public HiveASTParser_IdentifiersASTParser.intervalExpression_return intervalExpression() throws RecognitionException { return gIdentifiersASTParser.intervalExpression(); }

	public HiveASTParser_IdentifiersASTParser.precedenceConcatenateOperator_return precedenceConcatenateOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceConcatenateOperator(); }

	public HiveASTParser_IdentifiersASTParser.charSetStringLiteral_return charSetStringLiteral() throws RecognitionException { return gIdentifiersASTParser.charSetStringLiteral(); }

	public HiveASTParser_FromClauseASTParser.partitionedTableFunction_return partitionedTableFunction() throws RecognitionException { return gFromClauseASTParser.partitionedTableFunction(); }

	public HiveASTParser_SelectClauseASTParser.selectExpressionList_return selectExpressionList() throws RecognitionException { return gSelectClauseASTParser.selectExpressionList(); }

	public HiveASTParser_IdentifiersASTParser.timeQualifiers_return timeQualifiers() throws RecognitionException { return gIdentifiersASTParser.timeQualifiers(); }

	public HiveASTParser_IdentifiersASTParser.groupby_expression_return groupby_expression() throws RecognitionException { return gIdentifiersASTParser.groupby_expression(); }

	public HiveASTParser_FromClauseASTParser.valueRowConstructor_return valueRowConstructor() throws RecognitionException { return gFromClauseASTParser.valueRowConstructor(); }

	public HiveASTParser_IdentifiersASTParser.precedenceStarOperator_return precedenceStarOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceStarOperator(); }

	public HiveASTParser_SelectClauseASTParser.window_clause_return window_clause() throws RecognitionException { return gSelectClauseASTParser.window_clause(); }

	public HiveASTParser_IdentifiersASTParser.precedenceOrExpression_return precedenceOrExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceOrExpression(); }

	public HiveASTParser_IdentifiersASTParser.precedenceStarExpression_return precedenceStarExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceStarExpression(); }

	public HiveASTParser_IdentifiersASTParser.rollupStandard_return rollupStandard() throws RecognitionException { return gIdentifiersASTParser.rollupStandard(); }

	public HiveASTParser_IdentifiersASTParser.expressions_return expressions() throws RecognitionException { return gIdentifiersASTParser.expressions(); }

	public HiveASTParser_IdentifiersASTParser.precedenceNotExpression_return precedenceNotExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceNotExpression(); }

	public HiveASTParser_IdentifiersASTParser.constant_return constant() throws RecognitionException { return gIdentifiersASTParser.constant(); }

	public HiveASTParser_SelectClauseASTParser.window_frame_return window_frame() throws RecognitionException { return gSelectClauseASTParser.window_frame(); }

	public HiveASTParser_SelectClauseASTParser.selectClause_return selectClause() throws RecognitionException { return gSelectClauseASTParser.selectClause(); }

	public HiveASTParser_IdentifiersASTParser.partitionByClause_return partitionByClause() throws RecognitionException { return gIdentifiersASTParser.partitionByClause(); }

	public HiveASTParser_IdentifiersASTParser.precedencePlusOperator_return precedencePlusOperator() throws RecognitionException { return gIdentifiersASTParser.precedencePlusOperator(); }

	public HiveASTParser_IdentifiersASTParser.floorDateQualifiers_return floorDateQualifiers() throws RecognitionException { return gIdentifiersASTParser.floorDateQualifiers(); }

	public HiveASTParser_FromClauseASTParser.tableSource_return tableSource() throws RecognitionException { return gFromClauseASTParser.tableSource(); }

	public HiveASTParser_IdentifiersASTParser.castExpression_return castExpression() throws RecognitionException { return gIdentifiersASTParser.castExpression(); }

	public HiveASTParser_IdentifiersASTParser.precedenceSimilarExpression_return precedenceSimilarExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceSimilarExpression(); }

	public HiveASTParser_IdentifiersASTParser.precedenceAmpersandOperator_return precedenceAmpersandOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceAmpersandOperator(); }

	public HiveASTParser_IdentifiersASTParser.distributeByClause_return distributeByClause() throws RecognitionException { return gIdentifiersASTParser.distributeByClause(); }

	public HiveASTParser_SelectClauseASTParser.selectList_return selectList() throws RecognitionException { return gSelectClauseASTParser.selectList(); }

	public HiveASTParser_IdentifiersASTParser.nonReserved_return nonReserved() throws RecognitionException { return gIdentifiersASTParser.nonReserved(); }

	public HiveASTParser_FromClauseASTParser.aliasList_return aliasList() throws RecognitionException { return gFromClauseASTParser.aliasList(); }

	public HiveASTParser_FromClauseASTParser.tableSample_return tableSample() throws RecognitionException { return gFromClauseASTParser.tableSample(); }

	public HiveASTParser_FromClauseASTParser.subQuerySource_return subQuerySource() throws RecognitionException { return gFromClauseASTParser.subQuerySource(); }

	public HiveASTParser_IdentifiersASTParser.precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceBitwiseXorOperator(); }

	public HiveASTParser_IdentifiersASTParser.groupByEmpty_return groupByEmpty() throws RecognitionException { return gIdentifiersASTParser.groupByEmpty(); }

	public HiveASTParser_IdentifiersASTParser.booleanValueTok_return booleanValueTok() throws RecognitionException { return gIdentifiersASTParser.booleanValueTok(); }

	public HiveASTParser_FromClauseASTParser.tableBucketSample_return tableBucketSample() throws RecognitionException { return gFromClauseASTParser.tableBucketSample(); }

	public HiveASTParser_IdentifiersASTParser.functionName_return functionName() throws RecognitionException { return gIdentifiersASTParser.functionName(); }

	public HiveASTParser_FromClauseASTParser.virtualTableSource_return virtualTableSource() throws RecognitionException { return gFromClauseASTParser.virtualTableSource(); }

	public HiveASTParser_IdentifiersASTParser.precedenceSimilarExpressionPartNot_return precedenceSimilarExpressionPartNot(CommonTree t) throws RecognitionException { return gIdentifiersASTParser.precedenceSimilarExpressionPartNot(t); }

	public HiveASTParser_IdentifiersASTParser.precedenceAndOperator_return precedenceAndOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceAndOperator(); }

	public HiveASTParser_IdentifiersASTParser.precedenceAmpersandExpression_return precedenceAmpersandExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceAmpersandExpression(); }

	public HiveASTParser_IdentifiersASTParser.floorExpression_return floorExpression() throws RecognitionException { return gIdentifiersASTParser.floorExpression(); }

	public HiveASTParser_IdentifiersASTParser.timestampLiteral_return timestampLiteral() throws RecognitionException { return gIdentifiersASTParser.timestampLiteral(); }

	public HiveASTParser_IdentifiersASTParser.precedenceUnaryOperator_return precedenceUnaryOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceUnaryOperator(); }

	public HiveASTParser_SelectClauseASTParser.window_defn_return window_defn() throws RecognitionException { return gSelectClauseASTParser.window_defn(); }

	public HiveASTParser_IdentifiersASTParser.precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceBitwiseXorExpression(); }

	public HiveASTParser_FromClauseASTParser.tableAlias_return tableAlias() throws RecognitionException { return gFromClauseASTParser.tableAlias(); }

	public HiveASTParser_IdentifiersASTParser.whenExpression_return whenExpression() throws RecognitionException { return gIdentifiersASTParser.whenExpression(); }

	public HiveASTParser_IdentifiersASTParser.partitionSpec_return partitionSpec() throws RecognitionException { return gIdentifiersASTParser.partitionSpec(); }

	public HiveASTParser_IdentifiersASTParser.expression_return expression() throws RecognitionException { return gIdentifiersASTParser.expression(); }

	public HiveASTParser_SelectClauseASTParser.window_range_expression_return window_range_expression() throws RecognitionException { return gSelectClauseASTParser.window_range_expression(); }

	public HiveASTParser_IdentifiersASTParser.nullCondition_return nullCondition() throws RecognitionException { return gIdentifiersASTParser.nullCondition(); }

	public HiveASTParser_FromClauseASTParser.valuesClause_return valuesClause() throws RecognitionException { return gFromClauseASTParser.valuesClause(); }

	public HiveASTParser_IdentifiersASTParser.descFuncNames_return descFuncNames() throws RecognitionException { return gIdentifiersASTParser.descFuncNames(); }

	public HiveASTParser_IdentifiersASTParser.intervalValue_return intervalValue() throws RecognitionException { return gIdentifiersASTParser.intervalValue(); }

	public HiveASTParser_FromClauseASTParser.uniqueJoinTableSource_return uniqueJoinTableSource() throws RecognitionException { return gFromClauseASTParser.uniqueJoinTableSource(); }

	public HiveASTParser_FromClauseASTParser.uniqueJoinToken_return uniqueJoinToken() throws RecognitionException { return gFromClauseASTParser.uniqueJoinToken(); }

	public HiveASTParser_IdentifiersASTParser.precedenceSimilarExpressionMain_return precedenceSimilarExpressionMain() throws RecognitionException { return gIdentifiersASTParser.precedenceSimilarExpressionMain(); }

	public HiveASTParser_IdentifiersASTParser.groupingSetExpressionMultiple_return groupingSetExpressionMultiple() throws RecognitionException { return gIdentifiersASTParser.groupingSetExpressionMultiple(); }

	public HiveASTParser_FromClauseASTParser.uniqueJoinExpr_return uniqueJoinExpr() throws RecognitionException { return gFromClauseASTParser.uniqueJoinExpr(); }

	public HiveASTParser_IdentifiersASTParser.sysFuncNames_return sysFuncNames() throws RecognitionException { return gIdentifiersASTParser.sysFuncNames(); }

	public HiveASTParser_FromClauseASTParser.uniqueJoinSource_return uniqueJoinSource() throws RecognitionException { return gFromClauseASTParser.uniqueJoinSource(); }

	public HiveASTParser_IdentifiersASTParser.precedenceSimilarExpressionIn_return precedenceSimilarExpressionIn(CommonTree t) throws RecognitionException { return gIdentifiersASTParser.precedenceSimilarExpressionIn(t); }

	public HiveASTParser_FromClauseASTParser.searchCondition_return searchCondition() throws RecognitionException { return gFromClauseASTParser.searchCondition(); }

	public HiveASTParser_IdentifiersASTParser.precedenceEqualOperator_return precedenceEqualOperator() throws RecognitionException { return gIdentifiersASTParser.precedenceEqualOperator(); }

	public HiveASTParser_IdentifiersASTParser.groupingExpressionSingle_return groupingExpressionSingle() throws RecognitionException { return gIdentifiersASTParser.groupingExpressionSingle(); }

	public HiveASTParser_IdentifiersASTParser.dateLiteral_return dateLiteral() throws RecognitionException { return gIdentifiersASTParser.dateLiteral(); }

	public HiveASTParser_IdentifiersASTParser.identifier_return identifier() throws RecognitionException { return gIdentifiersASTParser.identifier(); }

	public HiveASTParser_IdentifiersASTParser.precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression() throws RecognitionException { return gIdentifiersASTParser.precedenceUnaryPrefixExpression(); }

	public HiveASTParser_FromClauseASTParser.splitSample_return splitSample() throws RecognitionException { return gFromClauseASTParser.splitSample(); }

	public HiveASTParser_IdentifiersASTParser.intervalQualifiers_return intervalQualifiers() throws RecognitionException { return gIdentifiersASTParser.intervalQualifiers(); }

	public HiveASTParser_IdentifiersASTParser.intervalLiteral_return intervalLiteral() throws RecognitionException { return gIdentifiersASTParser.intervalLiteral(); }

	public HiveASTParser_FromClauseASTParser.lateralView_return lateralView() throws RecognitionException { return gFromClauseASTParser.lateralView(); }

	public final boolean synpred17_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred17_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred5_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred12_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred11_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred16_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred6_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred9_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred13_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred20_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred20_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred8_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred2_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred2_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred14_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred14_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred7_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred1_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred15_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred21_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred21_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred10_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred3_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred3_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred19_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred4_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred18_HiveASTParser() {
		state.backtracking++;
		int start = input.mark();
		try {
			synpred18_HiveASTParser_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA2 dfa2 = new DFA2(this);
	protected DFA23 dfa23 = new DFA23(this);
	protected DFA227 dfa227 = new DFA227(this);
	static final String DFA2_eotS =
		"\122\uffff";
	static final String DFA2_eofS =
		"\122\uffff";
	static final String DFA2_minS =
		"\1\32\25\uffff\1\32\73\uffff";
	static final String DFA2_maxS =
		"\1\u014f\25\uffff\1\u014f\73\uffff";
	static final String DFA2_acceptS =
		"\1\uffff\1\2\41\uffff\1\1\56\uffff";
	static final String DFA2_specialS =
		"\122\uffff}>";
	static final String[] DFA2_transitionS = {
			"\1\1\4\uffff\1\1\1\26\5\uffff\1\43\27\uffff\1\1\7\uffff\1\1\20\uffff"+
			"\1\1\1\uffff\1\43\2\1\10\uffff\1\1\13\uffff\1\1\1\uffff\1\43\16\uffff"+
			"\1\43\1\1\3\uffff\1\1\6\uffff\1\1\7\uffff\1\1\24\uffff\1\1\2\uffff\1"+
			"\1\1\uffff\1\43\2\uffff\1\1\3\uffff\1\1\5\uffff\1\1\53\uffff\1\1\2\uffff"+
			"\1\1\3\uffff\1\1\3\uffff\1\1\5\uffff\1\1\6\uffff\1\1\4\uffff\1\1\2\uffff"+
			"\1\1\7\uffff\1\1\27\uffff\1\1\7\uffff\1\1\2\uffff\1\1\1\uffff\1\1\10"+
			"\uffff\1\43\10\uffff\1\1\7\uffff\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\43\4\uffff\2\43\5\uffff\1\43\27\uffff\1\43\7\uffff\1\43\20\uffff"+
			"\1\43\1\uffff\3\43\10\uffff\1\43\13\uffff\1\43\1\uffff\1\43\16\uffff"+
			"\2\43\3\uffff\1\43\6\uffff\1\43\7\uffff\1\43\24\uffff\1\43\2\uffff\1"+
			"\43\1\uffff\1\43\2\uffff\1\43\3\uffff\1\43\5\uffff\1\43\53\uffff\1\43"+
			"\2\uffff\1\43\3\uffff\1\43\3\uffff\1\43\5\uffff\1\43\6\uffff\1\43\4\uffff"+
			"\1\43\2\uffff\1\43\7\uffff\1\43\7\uffff\1\1\17\uffff\1\43\7\uffff\1\43"+
			"\2\uffff\1\43\1\uffff\1\43\10\uffff\1\43\10\uffff\1\43\7\uffff\1\43",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
	static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
	static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
	static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
	static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
	static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
	static final short[][] DFA2_transition;

	static {
		int numStates = DFA2_transitionS.length;
		DFA2_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
		}
	}

	protected class DFA2 extends DFA {

		public DFA2(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 2;
			this.eot = DFA2_eot;
			this.eof = DFA2_eof;
			this.min = DFA2_min;
			this.max = DFA2_max;
			this.accept = DFA2_accept;
			this.special = DFA2_special;
			this.transition = DFA2_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 743:6: ( explainOption )*";
		}
	}

	static final String DFA23_eotS =
		"\176\uffff";
	static final String DFA23_eofS =
		"\176\uffff";
	static final String DFA23_minS =
		"\1\32\1\116\1\uffff\1\116\4\uffff\1\74\3\uffff\2\116\2\30\3\uffff\1\163"+
		"\15\uffff\1\u0084\45\uffff\2\11\1\uffff\1\11\13\uffff\2\11\1\uffff\1\11"+
		"\15\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
		"\1\0";
	static final String DFA23_maxS =
		"\1\u0135\1\u013f\1\uffff\1\u013f\4\uffff\1\u0140\3\uffff\2\u0118\2\u021e"+
		"\3\uffff\1\u0118\15\uffff\1\u00b1\45\uffff\2\u014f\1\uffff\1\u014f\13"+
		"\uffff\2\u014f\1\uffff\1\u014f\15\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1"+
		"\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0"+
		"\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0";
	static final String DFA23_acceptS =
		"\2\uffff\1\2\1\uffff\1\6\1\7\1\10\2\uffff\1\12\1\24\1\26\4\uffff\1\45"+
		"\1\47\1\14\1\uffff\1\21\1\33\1\1\1\uffff\1\4\1\uffff\1\13\1\uffff\1\17"+
		"\1\5\1\15\1\16\1\22\1\uffff\1\34\1\3\1\uffff\1\23\1\11\13\uffff\1\37\1"+
		"\40\1\41\1\42\1\46\5\uffff\1\27\1\31\1\uffff\1\30\1\32\1\uffff\5\35\2"+
		"\uffff\1\35\1\uffff\2\35\1\43\2\uffff\6\36\2\uffff\1\36\1\uffff\2\36\1"+
		"\44\3\uffff\1\20\3\uffff\1\25\1\uffff\1\35\1\uffff\1\35\1\uffff\1\35\1"+
		"\uffff\1\35\1\uffff\1\35\1\uffff\1\35\1\uffff\1\36\1\uffff\1\36\1\uffff"+
		"\1\36\1\uffff\1\36\1\uffff\1\36\1\uffff\1\36\1\uffff";
	static final String DFA23_specialS =
		"\16\uffff\1\0\1\1\67\uffff\1\2\1\3\1\uffff\1\4\13\uffff\1\5\1\6\1\uffff"+
		"\1\7\15\uffff\1\10\1\uffff\1\11\1\uffff\1\12\1\uffff\1\13\1\uffff\1\14"+
		"\1\uffff\1\15\1\uffff\1\16\1\uffff\1\17\1\uffff\1\20\1\uffff\1\21\1\uffff"+
		"\1\22\1\uffff\1\23}>";
	static final String[] DFA23_transitionS = {
			"\1\21\4\uffff\1\5\1\13\45\uffff\1\1\23\uffff\2\6\10\uffff\1\3\41\uffff"+
			"\1\16\46\uffff\1\14\16\uffff\1\11\56\uffff\1\12\7\uffff\1\17\21\uffff"+
			"\1\20\2\uffff\1\10\37\uffff\1\4\7\uffff\1\15\4\uffff\1\2",
			"\1\26\44\uffff\1\30\20\uffff\1\34\12\uffff\1\24\45\uffff\1\22\24\uffff"+
			"\1\32\54\uffff\1\25\5\uffff\1\26\32\uffff\1\30\3\uffff\1\23\42\uffff"+
			"\1\32",
			"",
			"\1\43\65\uffff\1\45\12\uffff\1\40\45\uffff\1\37\101\uffff\1\42\5\uffff"+
			"\1\43\32\uffff\1\35\3\uffff\1\41\42\uffff\1\36",
			"",
			"",
			"",
			"",
			"\1\46\3\uffff\1\46\2\uffff\1\46\2\uffff\1\46\2\uffff\1\66\5\uffff\1"+
			"\46\61\uffff\1\46\3\uffff\1\46\1\62\10\uffff\2\46\35\uffff\1\46\47\uffff"+
			"\1\46\7\uffff\1\64\30\uffff\1\63\1\65\5\uffff\1\46\31\uffff\2\46\1\uffff"+
			"\1\46\10\uffff\1\46\33\uffff\1\46",
			"",
			"",
			"",
			"\1\75\u00ae\uffff\1\75\32\uffff\1\74",
			"\1\100\u00ae\uffff\1\100\32\uffff\1\77",
			"\1\115\1\uffff\4\115\1\102\1\103\1\115\1\uffff\1\115\2\uffff\1\115\1"+
			"\uffff\2\115\5\uffff\2\115\1\uffff\2\115\2\uffff\1\115\1\uffff\4\115"+
			"\1\uffff\2\115\1\uffff\4\115\2\uffff\1\115\1\105\6\uffff\1\115\1\uffff"+
			"\1\115\1\uffff\3\115\1\uffff\2\115\1\114\3\115\1\uffff\4\115\1\uffff"+
			"\1\115\1\uffff\1\115\1\106\2\115\1\uffff\1\115\1\uffff\1\115\2\uffff"+
			"\1\115\1\uffff\3\115\5\uffff\4\115\5\uffff\2\115\3\uffff\1\115\4\uffff"+
			"\2\115\3\uffff\1\107\1\115\1\uffff\3\115\1\113\5\uffff\3\115\1\uffff"+
			"\4\115\3\uffff\1\115\1\uffff\3\115\1\uffff\1\115\1\110\3\115\2\uffff"+
			"\3\115\1\uffff\1\115\1\uffff\2\115\1\uffff\1\115\1\uffff\2\115\1\uffff"+
			"\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\2\115\4\uffff\2\115\1\uffff"+
			"\2\115\2\uffff\2\115\1\uffff\1\115\3\uffff\1\115\1\uffff\1\115\1\uffff"+
			"\2\115\1\uffff\1\115\1\uffff\3\115\3\uffff\10\115\1\uffff\1\115\2\uffff"+
			"\2\115\4\uffff\3\115\1\111\4\115\1\uffff\3\115\1\112\1\115\1\uffff\4"+
			"\115\1\uffff\7\115\1\uffff\1\115\1\uffff\3\115\2\uffff\1\115\1\uffff"+
			"\3\115\4\uffff\1\115\1\uffff\1\115\1\uffff\1\115\2\uffff\3\115\1\104"+
			"\2\115\2\uffff\3\115\1\uffff\1\115\1\uffff\5\115\2\uffff\1\115\2\uffff"+
			"\3\115\66\uffff\1\115\42\uffff\1\115\52\uffff\1\115\3\uffff\1\115\52"+
			"\uffff\1\115\3\uffff\1\115\26\uffff\1\115\4\uffff\1\115",
			"\1\134\1\uffff\4\134\1\121\1\122\1\134\1\uffff\1\134\2\uffff\1\134\1"+
			"\uffff\2\134\5\uffff\2\134\1\uffff\2\134\2\uffff\1\134\1\uffff\4\134"+
			"\1\uffff\2\134\1\uffff\4\134\2\uffff\1\134\1\124\6\uffff\1\134\1\uffff"+
			"\1\134\1\uffff\3\134\1\uffff\2\134\1\133\3\134\1\uffff\4\134\1\uffff"+
			"\1\134\1\uffff\1\134\1\125\2\134\1\uffff\1\134\1\uffff\1\134\2\uffff"+
			"\1\134\1\uffff\3\134\5\uffff\4\134\5\uffff\2\134\3\uffff\1\134\1\120"+
			"\3\uffff\2\134\3\uffff\1\126\1\134\1\uffff\3\134\1\132\5\uffff\3\134"+
			"\1\uffff\4\134\3\uffff\1\134\1\uffff\3\134\1\uffff\1\134\1\127\3\134"+
			"\2\uffff\3\134\1\uffff\1\134\1\uffff\2\134\1\uffff\1\134\1\uffff\2\134"+
			"\1\uffff\1\134\1\uffff\1\134\1\uffff\1\134\2\uffff\2\134\4\uffff\2\134"+
			"\1\uffff\2\134\2\uffff\2\134\1\uffff\1\134\3\uffff\1\134\1\uffff\1\134"+
			"\1\uffff\2\134\1\uffff\1\134\1\uffff\3\134\3\uffff\10\134\1\uffff\1\134"+
			"\2\uffff\2\134\4\uffff\3\134\1\130\4\134\1\uffff\3\134\1\131\1\134\1"+
			"\uffff\4\134\1\uffff\7\134\1\uffff\1\134\1\uffff\3\134\2\uffff\1\134"+
			"\1\uffff\3\134\4\uffff\1\134\1\uffff\1\134\1\uffff\1\134\2\uffff\3\134"+
			"\1\123\2\134\2\uffff\3\134\1\uffff\1\134\1\uffff\5\134\2\uffff\1\134"+
			"\2\uffff\3\134\66\uffff\1\134\42\uffff\1\134\52\uffff\1\134\3\uffff\1"+
			"\134\52\uffff\1\134\3\uffff\1\134\26\uffff\1\134\4\uffff\1\134",
			"",
			"",
			"",
			"\1\30\20\uffff\1\34\54\uffff\1\140\146\uffff\1\30",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\45\54\uffff\1\144",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\147\u00bc\uffff\1\150\132\uffff\1\151\55\uffff\1\146",
			"\1\153\u00bc\uffff\1\154\132\uffff\1\155\55\uffff\1\152",
			"",
			"\1\157\u00bc\uffff\1\160\132\uffff\1\161\55\uffff\1\156",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\163\170\uffff\1\165\103\uffff\1\164\u0088\uffff\1\162",
			"\1\167\170\uffff\1\171\103\uffff\1\170\u0088\uffff\1\166",
			"",
			"\1\173\170\uffff\1\175\103\uffff\1\174\u0088\uffff\1\172",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff"
	};

	static final short[] DFA23_eot = DFA.unpackEncodedString(DFA23_eotS);
	static final short[] DFA23_eof = DFA.unpackEncodedString(DFA23_eofS);
	static final char[] DFA23_min = DFA.unpackEncodedStringToUnsignedChars(DFA23_minS);
	static final char[] DFA23_max = DFA.unpackEncodedStringToUnsignedChars(DFA23_maxS);
	static final short[] DFA23_accept = DFA.unpackEncodedString(DFA23_acceptS);
	static final short[] DFA23_special = DFA.unpackEncodedString(DFA23_specialS);
	static final short[][] DFA23_transition;

	static {
		int numStates = DFA23_transitionS.length;
		DFA23_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA23_transition[i] = DFA.unpackEncodedString(DFA23_transitionS[i]);
		}
	}

	protected class DFA23 extends DFA {

		public DFA23(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 23;
			this.eot = DFA23_eot;
			this.eof = DFA23_eof;
			this.min = DFA23_min;
			this.max = DFA23_max;
			this.accept = DFA23_accept;
			this.special = DFA23_special;
			this.transition = DFA23_transition;
		}
		@Override
		public String getDescription() {
			return "855:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | createMaterializedViewStatement | dropViewStatement | dropMaterializedViewStatement | createFunctionStatement | createMacroStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | reloadFunctionStatement | dropMacroStatement | analyzeStatement | lockStatement | unlockStatement | lockDatabase | unlockDatabase | createRoleStatement | dropRoleStatement | ( grantPrivileges )=> grantPrivileges | ( revokePrivileges )=> revokePrivileges | showGrants | showRoleGrants | showRolePrincipals | showRoles | grantRole | revokeRole | setRole | showCurrentRole | abortTransactionStatement );";
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA23_14 = input.LA(1);
						 
						int index23_14 = input.index();
						input.rewind();
						s = -1;
						if ( (LA23_14==KW_ALL) && (synpred1_HiveASTParser())) {s = 66;}
						else if ( (LA23_14==KW_ALTER) && (synpred1_HiveASTParser())) {s = 67;}
						else if ( (LA23_14==KW_UPDATE) && (synpred1_HiveASTParser())) {s = 68;}
						else if ( (LA23_14==KW_CREATE) && (synpred1_HiveASTParser())) {s = 69;}
						else if ( (LA23_14==KW_DROP) && (synpred1_HiveASTParser())) {s = 70;}
						else if ( (LA23_14==KW_INDEX) ) {s = 71;}
						else if ( (LA23_14==KW_LOCK) ) {s = 72;}
						else if ( (LA23_14==KW_SELECT) && (synpred1_HiveASTParser())) {s = 73;}
						else if ( (LA23_14==KW_SHOW_DATABASE) ) {s = 74;}
						else if ( (LA23_14==KW_INSERT) && (synpred1_HiveASTParser())) {s = 75;}
						else if ( (LA23_14==KW_DELETE) && (synpred1_HiveASTParser())) {s = 76;}
						else if ( (LA23_14==Identifier||(LA23_14 >= KW_ABORT && LA23_14 <= KW_AFTER)||LA23_14==KW_ANALYZE||LA23_14==KW_ARCHIVE||LA23_14==KW_ASC||(LA23_14 >= KW_AUTOCOMMIT && LA23_14 <= KW_BEFORE)||(LA23_14 >= KW_BUCKET && LA23_14 <= KW_BUCKETS)||(LA23_14 >= KW_CACHE && LA23_14 <= KW_CASCADE)||LA23_14==KW_CHANGE||(LA23_14 >= KW_CLUSTER && LA23_14 <= KW_COLLECTION)||(LA23_14 >= KW_COLUMNS && LA23_14 <= KW_COMMENT)||(LA23_14 >= KW_COMPACT && LA23_14 <= KW_CONCATENATE)||LA23_14==KW_CONTINUE||LA23_14==KW_DATA||LA23_14==KW_DATABASES||(LA23_14 >= KW_DATETIME && LA23_14 <= KW_DBPROPERTIES)||(LA23_14 >= KW_DEFERRED && LA23_14 <= KW_DEFINED)||(LA23_14 >= KW_DELIMITED && LA23_14 <= KW_DESC)||(LA23_14 >= KW_DETAIL && LA23_14 <= KW_DISABLE)||LA23_14==KW_DISTRIBUTE||LA23_14==KW_DOW||(LA23_14 >= KW_DUMP && LA23_14 <= KW_ELEM_TYPE)||LA23_14==KW_ENABLE||LA23_14==KW_ESCAPED||LA23_14==KW_EXCLUSIVE||(LA23_14 >= KW_EXPLAIN && LA23_14 <= KW_EXPRESSION)||(LA23_14 >= KW_FIELDS && LA23_14 <= KW_FIRST)||(LA23_14 >= KW_FORMAT && LA23_14 <= KW_FORMATTED)||LA23_14==KW_FUNCTIONS||(LA23_14 >= KW_HOUR && LA23_14 <= KW_IDXPROPERTIES)||LA23_14==KW_INDEXES||(LA23_14 >= KW_INPATH && LA23_14 <= KW_INPUTFORMAT)||(LA23_14 >= KW_ISOLATION && LA23_14 <= KW_JAR)||(LA23_14 >= KW_KEY && LA23_14 <= KW_LAST)||LA23_14==KW_LEVEL||(LA23_14 >= KW_LIMIT && LA23_14 <= KW_LOAD)||LA23_14==KW_LOCATION||(LA23_14 >= KW_LOCKS && LA23_14 <= KW_LONG)||(LA23_14 >= KW_MAPJOIN && LA23_14 <= KW_MATERIALIZED)||LA23_14==KW_METADATA||(LA23_14 >= KW_MINUTE && LA23_14 <= KW_MONTH)||LA23_14==KW_MSCK||(LA23_14 >= KW_NORELY && LA23_14 <= KW_NOSCAN)||LA23_14==KW_NOVALIDATE||LA23_14==KW_NULLS||LA23_14==KW_OFFSET||(LA23_14 >= KW_OPERATOR && LA23_14 <= KW_OPTION)||(LA23_14 >= KW_OUTPUTDRIVER && LA23_14 <= KW_OUTPUTFORMAT)||(LA23_14 >= KW_OVERWRITE && LA23_14 <= KW_OWNER)||(LA23_14 >= KW_PARTITIONED && LA23_14 <= KW_PARTITIONS)||LA23_14==KW_PLUS||LA23_14==KW_PRETTY||LA23_14==KW_PRINCIPALS||(LA23_14 >= KW_PURGE && LA23_14 <= KW_QUARTER)||LA23_14==KW_READ||(LA23_14 >= KW_REBUILD && LA23_14 <= KW_RECORDWRITER)||(LA23_14 >= KW_RELOAD && LA23_14 <= KW_RESTRICT)||LA23_14==KW_REWRITE||(LA23_14 >= KW_ROLE && LA23_14 <= KW_ROLES)||(LA23_14 >= KW_SCHEMA && LA23_14 <= KW_SECOND)||(LA23_14 >= KW_SEMI && LA23_14 <= KW_SERVER)||(LA23_14 >= KW_SETS && LA23_14 <= KW_SHOW)||LA23_14==KW_SKEWED||(LA23_14 >= KW_SNAPSHOT && LA23_14 <= KW_SSL)||(LA23_14 >= KW_STATISTICS && LA23_14 <= KW_SUMMARY)||LA23_14==KW_TABLES||(LA23_14 >= KW_TBLPROPERTIES && LA23_14 <= KW_TERMINATED)||LA23_14==KW_TINYINT||(LA23_14 >= KW_TOUCH && LA23_14 <= KW_TRANSACTIONS)||LA23_14==KW_UNARCHIVE||LA23_14==KW_UNDO||LA23_14==KW_UNIONTYPE||(LA23_14 >= KW_UNLOCK && LA23_14 <= KW_UNSIGNED)||(LA23_14 >= KW_URI && LA23_14 <= KW_USE)||(LA23_14 >= KW_UTC && LA23_14 <= KW_VALIDATE)||LA23_14==KW_VALUE_TYPE||(LA23_14 >= KW_VECTORIZATION && LA23_14 <= KW_WEEK)||LA23_14==KW_WHILE||(LA23_14 >= KW_WORK && LA23_14 <= KW_YEAR)||LA23_14==KW_BATCH||LA23_14==KW_DAYOFWEEK||LA23_14==KW_HOLD_DDLTIME||LA23_14==KW_IGNORE||LA23_14==KW_NO_DROP||LA23_14==KW_OFFLINE||LA23_14==KW_PROTECTION||LA23_14==KW_READONLY) ) {s = 77;}
						 
						input.seek(index23_14);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA23_15 = input.LA(1);
						 
						int index23_15 = input.index();
						input.rewind();
						s = -1;
						if ( (LA23_15==KW_GRANT) && (synpred2_HiveASTParser())) {s = 80;}
						else if ( (LA23_15==KW_ALL) && (synpred2_HiveASTParser())) {s = 81;}
						else if ( (LA23_15==KW_ALTER) && (synpred2_HiveASTParser())) {s = 82;}
						else if ( (LA23_15==KW_UPDATE) && (synpred2_HiveASTParser())) {s = 83;}
						else if ( (LA23_15==KW_CREATE) && (synpred2_HiveASTParser())) {s = 84;}
						else if ( (LA23_15==KW_DROP) && (synpred2_HiveASTParser())) {s = 85;}
						else if ( (LA23_15==KW_INDEX) ) {s = 86;}
						else if ( (LA23_15==KW_LOCK) ) {s = 87;}
						else if ( (LA23_15==KW_SELECT) && (synpred2_HiveASTParser())) {s = 88;}
						else if ( (LA23_15==KW_SHOW_DATABASE) ) {s = 89;}
						else if ( (LA23_15==KW_INSERT) && (synpred2_HiveASTParser())) {s = 90;}
						else if ( (LA23_15==KW_DELETE) && (synpred2_HiveASTParser())) {s = 91;}
						else if ( (LA23_15==Identifier||(LA23_15 >= KW_ABORT && LA23_15 <= KW_AFTER)||LA23_15==KW_ANALYZE||LA23_15==KW_ARCHIVE||LA23_15==KW_ASC||(LA23_15 >= KW_AUTOCOMMIT && LA23_15 <= KW_BEFORE)||(LA23_15 >= KW_BUCKET && LA23_15 <= KW_BUCKETS)||(LA23_15 >= KW_CACHE && LA23_15 <= KW_CASCADE)||LA23_15==KW_CHANGE||(LA23_15 >= KW_CLUSTER && LA23_15 <= KW_COLLECTION)||(LA23_15 >= KW_COLUMNS && LA23_15 <= KW_COMMENT)||(LA23_15 >= KW_COMPACT && LA23_15 <= KW_CONCATENATE)||LA23_15==KW_CONTINUE||LA23_15==KW_DATA||LA23_15==KW_DATABASES||(LA23_15 >= KW_DATETIME && LA23_15 <= KW_DBPROPERTIES)||(LA23_15 >= KW_DEFERRED && LA23_15 <= KW_DEFINED)||(LA23_15 >= KW_DELIMITED && LA23_15 <= KW_DESC)||(LA23_15 >= KW_DETAIL && LA23_15 <= KW_DISABLE)||LA23_15==KW_DISTRIBUTE||LA23_15==KW_DOW||(LA23_15 >= KW_DUMP && LA23_15 <= KW_ELEM_TYPE)||LA23_15==KW_ENABLE||LA23_15==KW_ESCAPED||LA23_15==KW_EXCLUSIVE||(LA23_15 >= KW_EXPLAIN && LA23_15 <= KW_EXPRESSION)||(LA23_15 >= KW_FIELDS && LA23_15 <= KW_FIRST)||(LA23_15 >= KW_FORMAT && LA23_15 <= KW_FORMATTED)||LA23_15==KW_FUNCTIONS||(LA23_15 >= KW_HOUR && LA23_15 <= KW_IDXPROPERTIES)||LA23_15==KW_INDEXES||(LA23_15 >= KW_INPATH && LA23_15 <= KW_INPUTFORMAT)||(LA23_15 >= KW_ISOLATION && LA23_15 <= KW_JAR)||(LA23_15 >= KW_KEY && LA23_15 <= KW_LAST)||LA23_15==KW_LEVEL||(LA23_15 >= KW_LIMIT && LA23_15 <= KW_LOAD)||LA23_15==KW_LOCATION||(LA23_15 >= KW_LOCKS && LA23_15 <= KW_LONG)||(LA23_15 >= KW_MAPJOIN && LA23_15 <= KW_MATERIALIZED)||LA23_15==KW_METADATA||(LA23_15 >= KW_MINUTE && LA23_15 <= KW_MONTH)||LA23_15==KW_MSCK||(LA23_15 >= KW_NORELY && LA23_15 <= KW_NOSCAN)||LA23_15==KW_NOVALIDATE||LA23_15==KW_NULLS||LA23_15==KW_OFFSET||(LA23_15 >= KW_OPERATOR && LA23_15 <= KW_OPTION)||(LA23_15 >= KW_OUTPUTDRIVER && LA23_15 <= KW_OUTPUTFORMAT)||(LA23_15 >= KW_OVERWRITE && LA23_15 <= KW_OWNER)||(LA23_15 >= KW_PARTITIONED && LA23_15 <= KW_PARTITIONS)||LA23_15==KW_PLUS||LA23_15==KW_PRETTY||LA23_15==KW_PRINCIPALS||(LA23_15 >= KW_PURGE && LA23_15 <= KW_QUARTER)||LA23_15==KW_READ||(LA23_15 >= KW_REBUILD && LA23_15 <= KW_RECORDWRITER)||(LA23_15 >= KW_RELOAD && LA23_15 <= KW_RESTRICT)||LA23_15==KW_REWRITE||(LA23_15 >= KW_ROLE && LA23_15 <= KW_ROLES)||(LA23_15 >= KW_SCHEMA && LA23_15 <= KW_SECOND)||(LA23_15 >= KW_SEMI && LA23_15 <= KW_SERVER)||(LA23_15 >= KW_SETS && LA23_15 <= KW_SHOW)||LA23_15==KW_SKEWED||(LA23_15 >= KW_SNAPSHOT && LA23_15 <= KW_SSL)||(LA23_15 >= KW_STATISTICS && LA23_15 <= KW_SUMMARY)||LA23_15==KW_TABLES||(LA23_15 >= KW_TBLPROPERTIES && LA23_15 <= KW_TERMINATED)||LA23_15==KW_TINYINT||(LA23_15 >= KW_TOUCH && LA23_15 <= KW_TRANSACTIONS)||LA23_15==KW_UNARCHIVE||LA23_15==KW_UNDO||LA23_15==KW_UNIONTYPE||(LA23_15 >= KW_UNLOCK && LA23_15 <= KW_UNSIGNED)||(LA23_15 >= KW_URI && LA23_15 <= KW_USE)||(LA23_15 >= KW_UTC && LA23_15 <= KW_VALIDATE)||LA23_15==KW_VALUE_TYPE||(LA23_15 >= KW_VECTORIZATION && LA23_15 <= KW_WEEK)||LA23_15==KW_WHILE||(LA23_15 >= KW_WORK && LA23_15 <= KW_YEAR)||LA23_15==KW_BATCH||LA23_15==KW_DAYOFWEEK||LA23_15==KW_HOLD_DDLTIME||LA23_15==KW_IGNORE||LA23_15==KW_NO_DROP||LA23_15==KW_OFFLINE||LA23_15==KW_PROTECTION||LA23_15==KW_READONLY) ) {s = 92;}
						 
						input.seek(index23_15);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA23_71 = input.LA(1);
						 
						int index23_71 = input.index();
						input.rewind();
						s = -1;
						if ( (LA23_71==LPAREN) && (synpred1_HiveASTParser())) {s = 102;}
						else if ( (LA23_71==COMMA) ) {s = 103;}
						else if ( (LA23_71==KW_ON) && (synpred1_HiveASTParser())) {s = 104;}
						else if ( (LA23_71==KW_TO) ) {s = 105;}
						 
						input.seek(index23_71);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA23_72 = input.LA(1);
						 
						int index23_72 = input.index();
						input.rewind();
						s = -1;
						if ( (LA23_72==LPAREN) && (synpred1_HiveASTParser())) {s = 106;}
						else if ( (LA23_72==COMMA) ) {s = 107;}
						else if ( (LA23_72==KW_ON) && (synpred1_HiveASTParser())) {s = 108;}
						else if ( (LA23_72==KW_TO) ) {s = 109;}
						 
						input.seek(index23_72);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA23_74 = input.LA(1);
						 
						int index23_74 = input.index();
						input.rewind();
						s = -1;
						if ( (LA23_74==LPAREN) && (synpred1_HiveASTParser())) {s = 110;}
						else if ( (LA23_74==COMMA) ) {s = 111;}
						else if ( (LA23_74==KW_ON) && (synpred1_HiveASTParser())) {s = 112;}
						else if ( (LA23_74==KW_TO) ) {s = 113;}
						 
						input.seek(index23_74);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA23_86 = input.LA(1);
						 
						int index23_86 = input.index();
						input.rewind();
						s = -1;
						if ( (LA23_86==LPAREN) && (synpred2_HiveASTParser())) {s = 114;}
						else if ( (LA23_86==COMMA) ) {s = 115;}
						else if ( (LA23_86==KW_ON) && (synpred2_HiveASTParser())) {s = 116;}
						else if ( (LA23_86==KW_FROM) ) {s = 117;}
						 
						input.seek(index23_86);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA23_87 = input.LA(1);
						 
						int index23_87 = input.index();
						input.rewind();
						s = -1;
						if ( (LA23_87==LPAREN) && (synpred2_HiveASTParser())) {s = 118;}
						else if ( (LA23_87==COMMA) ) {s = 119;}
						else if ( (LA23_87==KW_ON) && (synpred2_HiveASTParser())) {s = 120;}
						else if ( (LA23_87==KW_FROM) ) {s = 121;}
						 
						input.seek(index23_87);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA23_89 = input.LA(1);
						 
						int index23_89 = input.index();
						input.rewind();
						s = -1;
						if ( (LA23_89==LPAREN) && (synpred2_HiveASTParser())) {s = 122;}
						else if ( (LA23_89==COMMA) ) {s = 123;}
						else if ( (LA23_89==KW_ON) && (synpred2_HiveASTParser())) {s = 124;}
						else if ( (LA23_89==KW_FROM) ) {s = 125;}
						 
						input.seek(index23_89);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA23_103 = input.LA(1);
						 
						int index23_103 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveASTParser()) ) {s = 112;}
						else if ( (true) ) {s = 77;}
						 
						input.seek(index23_103);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA23_105 = input.LA(1);
						 
						int index23_105 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveASTParser()) ) {s = 112;}
						else if ( (true) ) {s = 77;}
						 
						input.seek(index23_105);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA23_107 = input.LA(1);
						 
						int index23_107 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveASTParser()) ) {s = 112;}
						else if ( (true) ) {s = 77;}
						 
						input.seek(index23_107);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA23_109 = input.LA(1);
						 
						int index23_109 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveASTParser()) ) {s = 112;}
						else if ( (true) ) {s = 77;}
						 
						input.seek(index23_109);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA23_111 = input.LA(1);
						 
						int index23_111 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveASTParser()) ) {s = 112;}
						else if ( (true) ) {s = 77;}
						 
						input.seek(index23_111);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA23_113 = input.LA(1);
						 
						int index23_113 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred1_HiveASTParser()) ) {s = 112;}
						else if ( (true) ) {s = 77;}
						 
						input.seek(index23_113);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA23_115 = input.LA(1);
						 
						int index23_115 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveASTParser()) ) {s = 124;}
						else if ( (true) ) {s = 92;}
						 
						input.seek(index23_115);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA23_117 = input.LA(1);
						 
						int index23_117 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveASTParser()) ) {s = 124;}
						else if ( (true) ) {s = 92;}
						 
						input.seek(index23_117);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA23_119 = input.LA(1);
						 
						int index23_119 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveASTParser()) ) {s = 124;}
						else if ( (true) ) {s = 92;}
						 
						input.seek(index23_119);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA23_121 = input.LA(1);
						 
						int index23_121 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveASTParser()) ) {s = 124;}
						else if ( (true) ) {s = 92;}
						 
						input.seek(index23_121);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA23_123 = input.LA(1);
						 
						int index23_123 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveASTParser()) ) {s = 124;}
						else if ( (true) ) {s = 92;}
						 
						input.seek(index23_123);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA23_125 = input.LA(1);
						 
						int index23_125 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred2_HiveASTParser()) ) {s = 124;}
						else if ( (true) ) {s = 92;}
						 
						input.seek(index23_125);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 23, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA227_eotS =
		"\130\uffff";
	static final String DFA227_eofS =
		"\1\2\127\uffff";
	static final String DFA227_minS =
		"\1\44\1\14\41\uffff\1\4\64\uffff";
	static final String DFA227_maxS =
		"\1\u015c\1\u021e\41\uffff\1\u0160\64\uffff";
	static final String DFA227_acceptS =
		"\2\uffff\1\2\72\uffff\1\1\32\uffff";
	static final String DFA227_specialS =
		"\130\uffff}>";
	static final String[] DFA227_transitionS = {
			"\1\2\22\uffff\1\2\5\uffff\1\2\43\uffff\1\2\11\uffff\1\2\26\uffff\1\2"+
			"\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\10\uffff\1\2\1\uffff\1\2\13\uffff"+
			"\1\2\4\uffff\2\2\2\uffff\1\2\5\uffff\1\1\5\uffff\1\2\11\uffff\1\2\10"+
			"\uffff\1\2\32\uffff\3\2\27\uffff\1\2\14\uffff\1\2\5\uffff\1\2\7\uffff"+
			"\1\2\20\uffff\1\2\12\uffff\1\2\3\uffff\1\2\10\uffff\1\2\1\uffff\1\2\10"+
			"\uffff\1\2\14\uffff\1\2",
			"\1\2\13\uffff\6\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\1"+
			"\uffff\3\2\1\uffff\2\2\1\uffff\5\2\1\uffff\4\2\1\uffff\2\2\1\uffff\4"+
			"\2\2\uffff\1\2\4\uffff\2\2\1\uffff\1\2\1\uffff\5\2\1\uffff\2\2\1\uffff"+
			"\3\2\1\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
			"\5\2\2\uffff\2\2\1\uffff\6\2\3\uffff\2\2\3\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\3\2\2\uffff\2\2\1\uffff\3\2\1\uffff\1\2\1\uffff\1\2\2\uffff\3\2\1\uffff"+
			"\1\2\1\43\2\2\3\uffff\1\2\1\uffff\3\2\1\uffff\5\2\1\uffff\4\2\1\uffff"+
			"\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\6\2\1\uffff\1\2\2\uffff\2\2\4\uffff"+
			"\2\2\1\uffff\2\2\2\uffff\2\2\1\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\2\2\1\uffff\1\2\1\uffff\3\2\3\uffff\10\2\1\uffff\1\2\2\uffff\2\2\4\uffff"+
			"\3\2\1\uffff\4\2\1\uffff\12\2\1\uffff\7\2\1\uffff\1\2\1\uffff\3\2\1\uffff"+
			"\2\2\1\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
			"\3\2\1\uffff\2\2\2\uffff\3\2\1\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff"+
			"\3\2\4\uffff\1\2\2\uffff\1\2\2\uffff\3\2\10\uffff\3\2\36\uffff\1\2\42"+
			"\uffff\1\2\52\uffff\1\2\3\uffff\1\2\52\uffff\1\2\3\uffff\1\2\26\uffff"+
			"\1\2\4\uffff\1\2",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\3\2\2\uffff\2\2\2\uffff\2\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\12"+
			"\uffff\1\2\7\uffff\1\2\144\uffff\1\2\13\uffff\1\2\14\uffff\1\2\30\uffff"+
			"\1\2\11\uffff\1\2\34\uffff\1\2\2\uffff\1\2\13\uffff\1\2\4\uffff\1\2\41"+
			"\uffff\1\75\31\uffff\1\2\24\uffff\2\2\1\uffff\2\2\1\uffff\3\2\2\uffff"+
			"\1\2\10\uffff\1\2",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA227_eot = DFA.unpackEncodedString(DFA227_eotS);
	static final short[] DFA227_eof = DFA.unpackEncodedString(DFA227_eofS);
	static final char[] DFA227_min = DFA.unpackEncodedStringToUnsignedChars(DFA227_minS);
	static final char[] DFA227_max = DFA.unpackEncodedStringToUnsignedChars(DFA227_maxS);
	static final short[] DFA227_accept = DFA.unpackEncodedString(DFA227_acceptS);
	static final short[] DFA227_special = DFA.unpackEncodedString(DFA227_specialS);
	static final short[][] DFA227_transition;

	static {
		int numStates = DFA227_transitionS.length;
		DFA227_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA227_transition[i] = DFA.unpackEncodedString(DFA227_transitionS[i]);
		}
	}

	protected class DFA227 extends DFA {

		public DFA227(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 227;
			this.eot = DFA227_eot;
			this.eof = DFA227_eof;
			this.min = DFA227_min;
			this.max = DFA227_max;
			this.accept = DFA227_accept;
			this.special = DFA227_special;
			this.transition = DFA227_transition;
		}
		@Override
		public String getDescription() {
			return "2009:103: ( tableRowFormatMapKeysIdentifier )?";
		}
	}

	public static final BitSet FOLLOW_explainStatement_in_statement1208 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_statement1210 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_execStatement_in_statement1215 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_statement1217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPLAIN_in_explainStatement1238 = new BitSet(new long[]{0x4000004184000000L,0x000500100E800040L,0x1044A40000202046L,0x0218890000000000L,0x4029010000010121L,0x0000000000008080L});
	public static final BitSet FOLLOW_explainOption_in_explainStatement1247 = new BitSet(new long[]{0x4000004184000000L,0x000500100E800040L,0x1044A40000202046L,0x0208890000000000L,0x4029010000010121L,0x0000000000008080L});
	public static final BitSet FOLLOW_execStatement_in_explainStatement1250 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REWRITE_in_explainStatement1281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000200004L,0x0000010000000000L,0x0000000000000001L,0x0000000000008080L});
	public static final BitSet FOLLOW_queryStatementExpression_in_explainStatement1283 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_explainOption1316 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_explainOption1318 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DEPENDENCY_in_explainOption1320 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOGICAL_in_explainOption1322 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AUTHORIZATION_in_explainOption1324 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ANALYZE_in_explainOption1326 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VECTORIZATION_in_explainOption1336 = new BitSet(new long[]{0x0000000000000002L,0x0002000010000000L,0x0000000000000000L,0x0000000000000180L,0x0000000000800000L});
	public static final BitSet FOLLOW_vectorizationOnly_in_explainOption1338 = new BitSet(new long[]{0x0000000000000002L,0x0002000010000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000800000L});
	public static final BitSet FOLLOW_vectorizatonDetail_in_explainOption1341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ONLY_in_vectorizationOnly1370 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SUMMARY_in_vectorizatonDetail1407 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_OPERATOR_in_vectorizatonDetail1425 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPRESSION_in_vectorizatonDetail1443 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DETAIL_in_vectorizatonDetail1461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_queryStatementExpression_in_execStatement1498 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_loadStatement_in_execStatement1506 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_exportStatement_in_execStatement1514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importStatement_in_execStatement1522 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replDumpStatement_in_execStatement1530 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replLoadStatement_in_execStatement1538 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_replStatusStatement_in_execStatement1546 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ddlStatement_in_execStatement1554 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_deleteStatement_in_execStatement1562 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_updateStatement_in_execStatement1570 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sqlTransactionStatement_in_execStatement1578 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mergeStatement_in_execStatement1586 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOAD_in_loadStatement1613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_KW_DATA_in_loadStatement1615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000080000040000L});
	public static final BitSet FOLLOW_KW_LOCAL_in_loadStatement1620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_INPATH_in_loadStatement1624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_loadStatement1629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_loadStatement1635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_INTO_in_loadStatement1639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_loadStatement1641 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableOrPartition_in_loadStatement1646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FOR_in_replicationClause1698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_METADATA_in_replicationClause1703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_REPLICATION_in_replicationClause1707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_replicationClause1709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_replicationClause1714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_replicationClause1717 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXPORT_in_exportStatement1761 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_exportStatement1769 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableOrPartition_in_exportStatement1774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_TO_in_exportStatement1783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_exportStatement1788 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
	public static final BitSet FOLLOW_replicationClause_in_exportStatement1797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IMPORT_in_importStatement1847 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_EXTERNAL_in_importStatement1862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_importStatement1866 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableOrPartition_in_importStatement1871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_FROM_in_importStatement1885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_importStatement1890 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_tableLocation_in_importStatement1902 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REPL_in_replDumpStatement1956 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_DUMP_in_replDumpStatement1958 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_replDumpStatement1971 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_DOT_in_replDumpStatement1975 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_replDumpStatement1979 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_FROM_in_replDumpStatement1992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_replDumpStatement1997 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_TO_in_replDumpStatement2011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_replDumpStatement2016 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_KW_LIMIT_in_replDumpStatement2032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_replDumpStatement2037 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REPL_in_replLoadStatement2122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
	public static final BitSet FOLLOW_KW_LOAD_in_replLoadStatement2124 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C27L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_replLoadStatement2138 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_DOT_in_replLoadStatement2142 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_replLoadStatement2146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_FROM_in_replLoadStatement2160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_replLoadStatement2165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REPL_in_replStatusStatement2220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_STATUS_in_replStatusStatement2222 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_replStatusStatement2235 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_DOT_in_replStatusStatement2239 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_replStatusStatement2243 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createDatabaseStatement_in_ddlStatement2293 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_switchDatabaseStatement_in_ddlStatement2301 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropDatabaseStatement_in_ddlStatement2309 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createTableStatement_in_ddlStatement2317 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropTableStatement_in_ddlStatement2325 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_truncateTableStatement_in_ddlStatement2333 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatement_in_ddlStatement2341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_descStatement_in_ddlStatement2349 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStatement_in_ddlStatement2357 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_metastoreCheck_in_ddlStatement2365 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createViewStatement_in_ddlStatement2373 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createMaterializedViewStatement_in_ddlStatement2381 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropViewStatement_in_ddlStatement2389 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropMaterializedViewStatement_in_ddlStatement2397 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createFunctionStatement_in_ddlStatement2405 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createMacroStatement_in_ddlStatement2413 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createIndexStatement_in_ddlStatement2421 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropIndexStatement_in_ddlStatement2429 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropFunctionStatement_in_ddlStatement2437 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_reloadFunctionStatement_in_ddlStatement2445 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropMacroStatement_in_ddlStatement2453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_analyzeStatement_in_ddlStatement2461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lockStatement_in_ddlStatement2469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unlockStatement_in_ddlStatement2477 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_lockDatabase_in_ddlStatement2485 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unlockDatabase_in_ddlStatement2493 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_createRoleStatement_in_ddlStatement2501 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_dropRoleStatement_in_ddlStatement2509 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantPrivileges_in_ddlStatement2523 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokePrivileges_in_ddlStatement2537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showGrants_in_ddlStatement2545 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRoleGrants_in_ddlStatement2553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRolePrincipals_in_ddlStatement2561 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showRoles_in_ddlStatement2569 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantRole_in_ddlStatement2577 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokeRole_in_ddlStatement2585 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setRole_in_ddlStatement2593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showCurrentRole_in_ddlStatement2601 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_abortTransactionStatement_in_ddlStatement2609 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IF_in_ifExists2636 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_KW_EXISTS_in_ifExists2638 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RESTRICT_in_restrictOrCascade2675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CASCADE_in_restrictOrCascade2693 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IF_in_ifNotExists2730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_NOT_in_ifNotExists2732 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_KW_EXISTS_in_ifNotExists2734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ENABLE_in_rewriteEnabled2771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_REWRITE_in_rewriteEnabled2773 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DISABLE_in_rewriteDisabled2810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_REWRITE_in_rewriteDisabled2812 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_storedAsDirs2849 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_storedAsDirs2851 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_DIRECTORIES_in_storedAsDirs2853 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_OR_in_orReplace2890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
	public static final BitSet FOLLOW_KW_REPLACE_in_orReplace2892 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement2929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement2932 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement2934 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement2945 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_createDatabaseStatement2958 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement2968 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_dbLocation_in_createDatabaseStatement2979 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_WITH_in_createDatabaseStatement2991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement2993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_dbProperties_in_createDatabaseStatement2997 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCATION_in_dbLocation3058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_dbLocation3062 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_dbProperties3104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_dbPropertiesList_in_dbProperties3106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_dbProperties3108 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList3149 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_dbPropertiesList3152 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList3154 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_USE_in_switchDatabaseStatement3193 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_switchDatabaseStatement3195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropDatabaseStatement3234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_dropDatabaseStatement3237 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_dropDatabaseStatement3239 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_ifExists_in_dropDatabaseStatement3242 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_dropDatabaseStatement3245 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_restrictOrCascade_in_dropDatabaseStatement3247 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_databaseComment3293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_databaseComment3297 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createTableStatement3337 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000011000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createTableStatement3342 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_EXTERNAL_in_createTableStatement3349 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_createTableStatement3353 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_ifNotExists_in_createTableStatement3355 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_createTableStatement3360 = new BitSet(new long[]{0x2100001000000002L,0x0000000000000000L,0x0000108000000000L,0x0800000000200000L,0x0000000008080400L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_LIKE_in_createTableStatement3373 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_createTableStatement3377 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L,0x0800000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement3388 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement3400 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_tableLocation_in_createTableStatement3412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement3424 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_createTableStatement3437 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA037L,0xD6B9F747B81D8C23L,0xE197F8EB7166C32AL,0xD7376A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameTypeOrConstraintList_in_createTableStatement3439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_createTableStatement3441 = new BitSet(new long[]{0x2100001000000002L,0x0000000000000000L,0x0000100000000000L,0x0800000000200000L,0x0000000008080400L});
	public static final BitSet FOLLOW_tableComment_in_createTableStatement3454 = new BitSet(new long[]{0x0100001000000002L,0x0000000000000000L,0x0000100000000000L,0x0800000000200000L,0x0000000008080400L});
	public static final BitSet FOLLOW_tablePartition_in_createTableStatement3466 = new BitSet(new long[]{0x0100001000000002L,0x0000000000000000L,0x0000100000000000L,0x0800000000000000L,0x0000000008080400L});
	public static final BitSet FOLLOW_tableBuckets_in_createTableStatement3478 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000100000000000L,0x0800000000000000L,0x0000000008080400L});
	public static final BitSet FOLLOW_tableSkewed_in_createTableStatement3490 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000100000000000L,0x0800000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement3502 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement3514 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_tableLocation_in_createTableStatement3526 = new BitSet(new long[]{0x0000001000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement3538 = new BitSet(new long[]{0x0000001000000002L});
	public static final BitSet FOLLOW_KW_AS_in_createTableStatement3551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000010000000000L,0x0000000000000001L,0x0000000000008080L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_createTableStatement3553 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TRUNCATE_in_truncateTableStatement3760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_truncateTableStatement3762 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tablePartitionPrefix_in_truncateTableStatement3764 = new BitSet(new long[]{0x1000000000000002L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_truncateTableStatement3767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_truncateTableStatement3769 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameList_in_truncateTableStatement3771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_truncateTableStatement3773 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createIndexStatement3808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_INDEX_in_createIndexStatement3810 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_createIndexStatement3814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_ON_in_createIndexStatement3822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_createIndexStatement3824 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_createIndexStatement3828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_createIndexStatement3830 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameList_in_createIndexStatement3834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_createIndexStatement3836 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createIndexStatement3844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_createIndexStatement3848 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000000L,0x0000100000004800L,0x0800000000000000L,0x0000000008080000L,0x0000000000000080L});
	public static final BitSet FOLLOW_autoRebuild_in_createIndexStatement3856 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000000L,0x0000100000004800L,0x0800000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_indexPropertiesPrefixed_in_createIndexStatement3865 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000000L,0x0000100000004000L,0x0800000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_indexTblName_in_createIndexStatement3874 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000000L,0x0000100000000000L,0x0800000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_tableRowFormat_in_createIndexStatement3883 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_tableFileFormat_in_createIndexStatement3892 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_tableLocation_in_createIndexStatement3901 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createIndexStatement3910 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_indexComment_in_createIndexStatement3919 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_indexComment4076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_indexComment4080 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_autoRebuild4121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_DEFERRED_in_autoRebuild4123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
	public static final BitSet FOLLOW_KW_REBUILD_in_autoRebuild4125 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IN_in_indexTblName4161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_indexTblName4163 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_indexTblName4167 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed4214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_indexProperties_in_indexPropertiesPrefixed4217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_indexProperties4250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_indexPropertiesList_in_indexProperties4252 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_indexProperties4254 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList4295 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_indexPropertiesList4298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList4300 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_DROP_in_dropIndexStatement4338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_INDEX_in_dropIndexStatement4340 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_ifExists_in_dropIndexStatement4342 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_dropIndexStatement4347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_ON_in_dropIndexStatement4349 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_dropIndexStatement4353 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropTableStatement4398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_dropTableStatement4400 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_ifExists_in_dropTableStatement4402 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_dropTableStatement4405 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_PURGE_in_dropTableStatement4407 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
	public static final BitSet FOLLOW_replicationClause_in_dropTableStatement4410 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement4459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_alterStatement4461 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_alterStatement4463 = new BitSet(new long[]{0x8120000408000000L,0x0000101000000004L,0x0000000002000000L,0x0001200000100001L,0x000A020400000420L});
	public static final BitSet FOLLOW_alterTableStatementSuffix_in_alterStatement4465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement4483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_alterStatement4485 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_alterStatement4487 = new BitSet(new long[]{0x0000001008000000L,0x0000001000000000L,0x0004000000000000L,0x0000210000000000L,0x0002000000000021L,0x0000000000008080L});
	public static final BitSet FOLLOW_KW_AS_in_alterStatement4489 = new BitSet(new long[]{0x0000000008000000L,0x0000001000000000L,0x0004000000000000L,0x0000210000000000L,0x0002000000000021L,0x0000000000008080L});
	public static final BitSet FOLLOW_alterViewStatementSuffix_in_alterStatement4492 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement4510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_INDEX_in_alterStatement4512 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_alterIndexStatementSuffix_in_alterStatement4514 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_alterStatement4526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_alterStatement4529 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_alterStatement4531 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_alterDatabaseStatementSuffix_in_alterStatement4534 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix4572 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix4581 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix4590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix4599 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix4607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix4615 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix4623 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix4631 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixExchangePartition_in_alterTableStatementSuffix4639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementPartitionKeyType_in_alterTableStatementSuffix4647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropConstraint_in_alterTableStatementSuffix4655 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddConstraint_in_alterTableStatementSuffix4663 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partitionSpec_in_alterTableStatementSuffix4671 = new BitSet(new long[]{0x8120000008000000L,0x0000000000000004L,0x0000000002000000L,0x0001200000000001L,0x0008000000000020L});
	public static final BitSet FOLLOW_alterTblPartitionStatementSuffix_in_alterTableStatementSuffix4674 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4706 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4712 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4724 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4730 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix4736 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4742 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixClusterbySortby_in_alterTblPartitionStatementSuffix4748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixCompact_in_alterTblPartitionStatementSuffix4754 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUpdateStatsCol_in_alterTblPartitionStatementSuffix4760 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixUpdateStats_in_alterTblPartitionStatementSuffix4766 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRenameCol_in_alterTblPartitionStatementSuffix4772 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddCol_in_alterTblPartitionStatementSuffix4778 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITION_in_alterStatementPartitionKeyType4800 = new BitSet(new long[]{0x0800000000000000L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementPartitionKeyType4802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_alterStatementPartitionKeyType4804 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameType_in_alterStatementPartitionKeyType4806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_alterStatementPartitionKeyType4808 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix4841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix4849 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix4858 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix4867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_alterViewStatementSuffix4876 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterIndexStatementSuffix4905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_ON_in_alterIndexStatementSuffix4907 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_alterIndexStatementSuffix4909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000100000L,0x0000000000000020L});
	public static final BitSet FOLLOW_partitionSpec_in_alterIndexStatementSuffix4911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix4926 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterIndexStatementSuffix4959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
	public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix4961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_indexProperties_in_alterIndexStatementSuffix4969 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix5020 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterDatabaseSuffixSetOwner_in_alterDatabaseStatementSuffix5028 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterDatabaseSuffixSetLocation_in_alterDatabaseStatementSuffix5036 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixProperties5065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixProperties5067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties5069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_dbProperties_in_alterDatabaseSuffixProperties5071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixSetOwner5115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixSetOwner5117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
	public static final BitSet FOLLOW_KW_OWNER_in_alterDatabaseSuffixSetOwner5119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0080000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_principalName_in_alterDatabaseSuffixSetOwner5121 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_alterDatabaseSuffixSetLocation5165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixSetLocation5167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_alterDatabaseSuffixSetLocation5169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterDatabaseSuffixSetLocation5173 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRename5217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRename5219 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_alterStatementSuffixRename5221 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddCol5288 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol5294 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol5297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_alterStatementSuffixAddCol5299 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol5301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_alterStatementSuffixAddCol5303 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_restrictOrCascade_in_alterStatementSuffixAddCol5305 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddConstraint5381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_alterForeignKeyWithName_in_alterStatementSuffixAddConstraint5386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterConstraintWithName_in_alterStatementSuffixAddConstraint5390 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropConstraint5454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterStatementSuffixDropConstraint5456 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixDropConstraint5460 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol5497 = new BitSet(new long[]{0xBFA6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol5499 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRenameCol5504 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixRenameCol5508 = new BitSet(new long[]{0x00401C0800000000L,0x0800000400130000L,0x0004000000400000L,0x0000000000000000L,0x2000200180600800L});
	public static final BitSet FOLLOW_colType_in_alterStatementSuffixRenameCol5510 = new BitSet(new long[]{0x2004000020000002L,0x0400000000000010L,0x0000000000000000L,0x0004020020000001L,0x0000400000000000L});
	public static final BitSet FOLLOW_alterColumnConstraint_in_alterStatementSuffixRenameCol5512 = new BitSet(new long[]{0x2004000020000002L,0x0400000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol5517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol5521 = new BitSet(new long[]{0x0004000020000002L,0x0400000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol5525 = new BitSet(new long[]{0x0004000000000002L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_restrictOrCascade_in_alterStatementSuffixRenameCol5528 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStatsCol5586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStatsCol5588 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_FOR_in_alterStatementSuffixUpdateStatsCol5590 = new BitSet(new long[]{0xBFA6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixUpdateStatsCol5592 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixUpdateStatsCol5597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixUpdateStatsCol5599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixUpdateStatsCol5601 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixUpdateStatsCol5604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixUpdateStatsCol5608 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixUpdateStats5655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_alterStatementSuffixUpdateStats5657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixUpdateStats5659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixUpdateStats5661 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FIRST_in_alterStatementChangeColPosition5691 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AFTER_in_alterStatementChangeColPosition5693 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_alterStatementChangeColPosition5697 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions5750 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions5752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_alterStatementSuffixAddPartitionsElement_in_alterStatementSuffixAddPartitions5755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitionsElement5818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitionsElement5820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch5848 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixTouch5851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive5895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixArchive5898 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive5942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive5945 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_partitionLocation5995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_partitionLocation5999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions6036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixDropPartitions6038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions6041 = new BitSet(new long[]{0x0000000000000202L,0x4000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_COMMA_in_alterStatementSuffixDropPartitions6044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions6046 = new BitSet(new long[]{0x0000000000000202L,0x4000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_PURGE_in_alterStatementSuffixDropPartitions6050 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
	public static final BitSet FOLLOW_replicationClause_in_alterStatementSuffixDropPartitions6053 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixProperties6135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties6137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties6139 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNSET_in_alterStatementSuffixProperties6159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties6161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixProperties6163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties6166 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterViewSuffixProperties6208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties6210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties6212 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNSET_in_alterViewSuffixProperties6232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties6234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_ifExists_in_alterViewSuffixProperties6236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties6239 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties6281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties6283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties6287 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties6290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties6292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties6294 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties6320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties6322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties6324 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableName_in_tablePartitionPrefix6361 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_tablePartitionPrefix6363 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixFileFormat6398 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
	public static final BitSet FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat6400 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_fileFormat_in_alterStatementSuffixFileFormat6402 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby6433 = new BitSet(new long[]{0x0100000000000000L});
	public static final BitSet FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby6435 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby6449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_SORTED_in_alterStatementSuffixClusterbySortby6451 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby6465 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation6496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation6498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation6500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation6502 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_skewedLocations6545 = new BitSet(new long[]{0x0000000002001000L,0x0020000000010C00L,0x0000000000000000L,0x0000000000000004L,0x0000008080000000L,0x0000000200608000L});
	public static final BitSet FOLLOW_skewedLocationsList_in_skewedLocations6547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_skewedLocations6549 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList6590 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_skewedLocationsList6593 = new BitSet(new long[]{0x0000000002001000L,0x0020000000010C00L,0x0000000000000000L,0x0000000000000004L,0x0000008080000000L,0x0000000200608000L});
	public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList6595 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_skewedValueLocationElement_in_skewedLocationMap6641 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_EQUAL_in_skewedLocationMap6643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_skewedLocationMap6647 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixLocation6684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation6686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixLocation6690 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby6724 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby6739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
	public static final BitSet FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby6741 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby6754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby6756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXCHANGE_in_alterStatementSuffixExchangePartition6787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixExchangePartition6789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixExchangePartition6791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_alterStatementSuffixExchangePartition6793 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_alterStatementSuffixExchangePartition6797 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart6839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRenamePart6841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart6843 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_alterStatementSuffixStatsPart6881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_alterStatementSuffixStatsPart6883 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_FOR_in_alterStatementSuffixStatsPart6885 = new BitSet(new long[]{0xBFA6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixStatsPart6887 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_alterStatementSuffixStatsPart6892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixStatsPart6894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixStatsPart6896 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixStatsPart6899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixStatsPart6903 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles6950 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum6987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_alterStatementSuffixBucketNum6991 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum6993 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_AND_in_blocking7021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WAIT_in_blocking7023 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMPACT_in_alterStatementSuffixCompact7054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixCompact7058 = new BitSet(new long[]{0x0000000200000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_blocking_in_alterStatementSuffixCompact7060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixCompact7064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_alterStatementSuffixCompact7066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixCompact7068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixCompact7070 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_fileFormat7119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat7123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_fileFormat7125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat7129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_SERDE_in_fileFormat7131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat7135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_INPUTDRIVER_in_fileFormat7138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat7142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_fileFormat7144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_fileFormat7148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_fileFormat7189 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr7224 = new BitSet(new long[]{0xB7A6C1A53D010002L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_DOT_in_tabTypeExpr7227 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr7230 = new BitSet(new long[]{0xB7A6C1A53D000002L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr7238 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_DOT_in_tabTypeExpr7241 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_tabTypeExpr7258 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_tabTypeExpr7275 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_tabTypeExpr7292 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_identifier_in_tabTypeExpr7300 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_tabTypeExpr_in_partTypeExpr7340 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_partTypeExpr7342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableName_in_tabPartColTypeExpr7382 = new BitSet(new long[]{0xB7A6C1A53D000002L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5176C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_partitionSpec_in_tabPartColTypeExpr7384 = new BitSet(new long[]{0xB7A6C1A53D000002L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_extColumnName_in_tabPartColTypeExpr7387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement7434 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0787A56AF76EE027L,0xD6B9F747B81D8C33L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_DESC_in_descStatement7436 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0787A56AF76EE027L,0xD6B9F747B81D8C33L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_DATABASE_in_descStatement7458 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0787A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_descStatement7460 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0787A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement7463 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_descStatement7469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_descStatement7500 = new BitSet(new long[]{0xB7AEDFAF3D6C6070L,0x1F87A56EF76EA027L,0xD6BDF7C7B85DDC23L,0xE1D7FCEB5166C72BL,0xD7372A1D3AFEFFDEL,0x00000007009C372FL,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement7502 = new BitSet(new long[]{0xB7AEDFAF3D6C6070L,0x1F83A56EF76EA027L,0xD6BDF7C7B85DDC23L,0xE1D7FCEB5166C72BL,0xD7372A1D3AFEFFDEL,0x00000007009C372FL,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_descFuncNames_in_descStatement7508 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_descStatement7547 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement7551 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_PRETTY_in_descStatement7555 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tabPartColTypeExpr_in_descStatement7560 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tabPartColTypeExpr_in_descStatement7587 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ANALYZE_in_analyzeStatement7629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_analyzeStatement7631 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableOrPartition_in_analyzeStatement7636 = new BitSet(new long[]{0x0002000000000000L,0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMPUTE_in_analyzeStatement7659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_STATISTICS_in_analyzeStatement7661 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x8000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_NOSCAN_in_analyzeStatement7667 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTIALSCAN_in_analyzeStatement7675 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FOR_in_analyzeStatement7735 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_analyzeStatement7737 = new BitSet(new long[]{0xB7A6C1A53D000002L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameList_in_analyzeStatement7742 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CACHE_in_analyzeStatement7799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_METADATA_in_analyzeStatement7801 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L,0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_DATABASES_in_showStatement7848 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_KW_SCHEMAS_in_showStatement7850 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7854 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000200000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7856 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_TABLES_in_showStatement7877 = new BitSet(new long[]{0xB7A6C1A53D000002L,0x0783A56AF76EA027L,0xD6B9F7C7B81DCC27L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000200000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7881 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7883 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_showStatement7888 = new BitSet(new long[]{0xB7A6C1A53D000002L,0x0783A56AF76EA027L,0xD6B9F7C7B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000200000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7893 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000200000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7895 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7897 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_VIEWS_in_showStatement7927 = new BitSet(new long[]{0xB7A6C1A53D000002L,0x0783A56AF76EA027L,0xD6B9F7C7B81DCC27L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000200000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7931 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7933 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_showStatement7938 = new BitSet(new long[]{0xB7A6C1A53D000002L,0x0783A56AF76EA027L,0xD6B9F7C7B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000200000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement7943 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000200000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7945 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement7947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement7975 = new BitSet(new long[]{0x1000000000000000L});
	public static final BitSet FOLLOW_KW_COLUMNS_in_showStatement7977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004004L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7980 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7982 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_showStatement7985 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004004L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement7989 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement7991 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_showStatement7996 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_FUNCTIONS_in_showStatement8024 = new BitSet(new long[]{0xB7A6C1A53D000002L,0x0783A56AF76EA027L,0xD6B9F7C7B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000200000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement8027 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000200000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_showFunctionIdentifier_in_showStatement8029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_showFunctionIdentifier_in_showStatement8031 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_PARTITIONS_in_showStatement8056 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_showStatement8060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_showStatement8062 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_CREATE_in_showStatement8086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x2000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_showStatement8107 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_showStatement8109 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_showStatement8114 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_showStatement8143 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_showStatement8147 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_showStatement8174 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement8176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000004004L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement8180 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement8182 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_showStatement8187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_KW_LIKE_in_showStatement8191 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000200000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement8193 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_showStatement8195 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_showStatement8225 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_showStatement8227 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_showStatement8230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_showStatement8234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_showStatement8236 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_KW_LOCKS_in_showStatement8260 = new BitSet(new long[]{0xB7A6C1A53D000002L,0x0787A56AF76EE027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_DATABASE_in_showStatement8286 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_showStatement8288 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_Identifier_in_showStatement8294 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement8300 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_partTypeExpr_in_showStatement8334 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
	public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement8341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000018002L});
	public static final BitSet FOLLOW_KW_FORMATTED_in_showStatement8378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000018000L});
	public static final BitSet FOLLOW_KW_INDEX_in_showStatement8383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_INDEXES_in_showStatement8385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_ON_in_showStatement8388 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000200000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement8390 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004004L});
	public static final BitSet FOLLOW_KW_FROM_in_showStatement8394 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_IN_in_showStatement8396 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_showStatement8401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_COMPACTIONS_in_showStatement8433 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_KW_TRANSACTIONS_in_showStatement8449 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showStatement8463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_CONF_in_showStatement8465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_showStatement8467 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_lockStatement8502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_lockStatement8504 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_lockStatement8506 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000080L});
	public static final BitSet FOLLOW_partitionSpec_in_lockStatement8508 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_lockMode_in_lockStatement8511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_lockDatabase8551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_lockDatabase8554 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_lockDatabase8556 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_Identifier_in_lockDatabase8562 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_lockMode_in_lockDatabase8565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNLOCK_in_unlockStatement8634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_unlockStatement8636 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_unlockStatement8638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_unlockStatement8640 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNLOCK_in_unlockDatabase8680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000000000000L,0x2000000000000000L});
	public static final BitSet FOLLOW_KW_DATABASE_in_unlockDatabase8683 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_unlockDatabase8685 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_Identifier_in_unlockDatabase8691 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createRoleStatement8728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_ROLE_in_createRoleStatement8730 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_createRoleStatement8734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropRoleStatement8774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_ROLE_in_dropRoleStatement8776 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_dropRoleStatement8780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantPrivileges8820 = new BitSet(new long[]{0x00000000C0000000L,0x0000001000800040L,0x0000200000208000L,0x0000000000000000L,0x0008000000000201L});
	public static final BitSet FOLLOW_privilegeList_in_grantPrivileges8824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000200000000L});
	public static final BitSet FOLLOW_privilegeObject_in_grantPrivileges8832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_TO_in_grantPrivileges8841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0080000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_grantPrivileges8843 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_withGrantOption_in_grantPrivileges8851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REVOKE_in_revokePrivileges8900 = new BitSet(new long[]{0x00000000C0000000L,0x0000001000800040L,0x0000200000208040L,0x0000000000000000L,0x0008000000000201L});
	public static final BitSet FOLLOW_grantOptionFor_in_revokePrivileges8902 = new BitSet(new long[]{0x00000000C0000000L,0x0000001000800040L,0x0000200000208000L,0x0000000000000000L,0x0008000000000201L});
	public static final BitSet FOLLOW_privilegeList_in_revokePrivileges8905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L,0x0000000000000040L});
	public static final BitSet FOLLOW_privilegeObject_in_revokePrivileges8907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_FROM_in_revokePrivileges8910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0080000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_revokePrivileges8912 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantRole8959 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_ROLE_in_grantRole8961 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_grantRole8964 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_COMMA_in_grantRole8967 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_grantRole8969 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_KW_TO_in_grantRole8973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0080000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_grantRole8975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_withAdminOption_in_grantRole8977 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_REVOKE_in_revokeRole9023 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_adminOptionFor_in_revokeRole9025 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_ROLE_in_revokeRole9028 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_revokeRole9031 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_COMMA_in_revokeRole9034 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_revokeRole9036 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_FROM_in_revokeRole9040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0080000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_principalSpecification_in_revokeRole9042 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRoleGrants9087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_ROLE_in_showRoleGrants9089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_GRANT_in_showRoleGrants9091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0080000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_principalName_in_showRoleGrants9093 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRoles9133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_ROLES_in_showRoles9135 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showCurrentRole9172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_CURRENT_in_showCurrentRole9174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
	public static final BitSet FOLLOW_KW_ROLES_in_showCurrentRole9176 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_setRole9213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_ROLE_in_setRole9215 = new BitSet(new long[]{0xB7A6C1A57D000000L,0x0783A56AF76EA027L,0xF6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_ALL_in_setRole9237 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NONE_in_setRole9268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_setRole9290 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showGrants9331 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_GRANT_in_showGrants9333 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L,0x0080000000000040L,0x0040000000000000L});
	public static final BitSet FOLLOW_principalName_in_showGrants9335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_ON_in_showGrants9339 = new BitSet(new long[]{0xB7A6C1A57D000000L,0x0783A56AF76EE027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3BFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_privilegeIncludeColObject_in_showGrants9341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_in_showRolePrincipals9386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_PRINCIPALS_in_showRolePrincipals9388 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_showRolePrincipals9392 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_privilegeIncludeColObject9439 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_privObjectCols_in_privilegeIncludeColObject9453 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ON_in_privilegeObject9488 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EE027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3BFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_privObject_in_privilegeObject9490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATABASE_in_privObject9517 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_privObject9519 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_privObject9522 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_privObject9538 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_privObject9541 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_privObject9543 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_URI_in_privObject9563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_privObject9568 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SERVER_in_privObject9587 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_privObject9589 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATABASE_in_privObjectCols9615 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_SCHEMA_in_privObjectCols9617 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_privObjectCols9620 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_privObjectCols9636 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_privObjectCols9639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_privObjectCols9642 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameList_in_privObjectCols9646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_privObjectCols9648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_privObjectCols9652 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_URI_in_privObjectCols9676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_privObjectCols9681 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SERVER_in_privObjectCols9700 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_privObjectCols9702 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_privlegeDef_in_privilegeList9737 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_privilegeList9740 = new BitSet(new long[]{0x00000000C0000000L,0x0000001000800040L,0x0000200000208000L,0x0000000000000000L,0x0008000000000201L});
	public static final BitSet FOLLOW_privlegeDef_in_privilegeList9742 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_privilegeType_in_privlegeDef9784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_privlegeDef9787 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameList_in_privlegeDef9791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_privlegeDef9793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_privilegeType9838 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALTER_in_privilegeType9852 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_privilegeType9866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_privilegeType9880 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_privilegeType9894 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INDEX_in_privilegeType9908 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCK_in_privilegeType9922 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SELECT_in_privilegeType9936 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SHOW_DATABASE_in_privilegeType9950 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_privilegeType9964 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DELETE_in_privilegeType9978 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_principalName_in_principalSpecification10011 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_principalSpecification10014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0080000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_principalName_in_principalSpecification10016 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_USER_in_principalName10054 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000004000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_principalIdentifier_in_principalName10056 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GROUP_in_principalName10072 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000004000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_principalIdentifier_in_principalName10074 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROLE_in_principalName10090 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_principalName10092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withGrantOption10127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_GRANT_in_withGrantOption10129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_OPTION_in_withGrantOption10131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_GRANT_in_grantOptionFor10168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_OPTION_in_grantOptionFor10170 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_FOR_in_grantOptionFor10172 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ADMIN_in_adminOptionFor10205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_OPTION_in_adminOptionFor10207 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
	public static final BitSet FOLLOW_KW_FOR_in_adminOptionFor10209 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withAdminOption10242 = new BitSet(new long[]{0x0000000010000000L});
	public static final BitSet FOLLOW_KW_ADMIN_in_withAdminOption10244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_OPTION_in_withAdminOption10246 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MSCK_in_metastoreCheck10283 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_REPAIR_in_metastoreCheck10288 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_TABLE_in_metastoreCheck10293 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_metastoreCheck10295 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck10297 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_metastoreCheck10301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck10303 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_resource_in_resourceList10356 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_resourceList10359 = new BitSet(new long[]{0x0000000400000000L,0x0100000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_resource_in_resourceList10361 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_resourceType_in_resource10399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_resource10403 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_JAR_in_resourceType10440 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FILE_in_resourceType10454 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ARCHIVE_in_resourceType10468 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createFunctionStatement10499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createFunctionStatement10504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_createFunctionStatement10508 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_functionIdentifier_in_createFunctionStatement10510 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createFunctionStatement10512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_createFunctionStatement10514 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_USING_in_createFunctionStatement10523 = new BitSet(new long[]{0x0000000400000000L,0x0100000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_resourceList_in_createFunctionStatement10527 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropFunctionStatement10613 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_dropFunctionStatement10618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_dropFunctionStatement10622 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_ifExists_in_dropFunctionStatement10624 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_functionIdentifier_in_dropFunctionStatement10627 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RELOAD_in_reloadFunctionStatement10705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_reloadFunctionStatement10707 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createMacroStatement10735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_createMacroStatement10737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_MACRO_in_createMacroStatement10739 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_Identifier_in_createMacroStatement10741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_createMacroStatement10749 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000010000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameTypeList_in_createMacroStatement10751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_createMacroStatement10754 = new BitSet(new long[]{0xB7BEDDAD3F001000L,0x1FB3E56EF76FAC27L,0xD6BDF747B95D9D23L,0xE197F8EB5166C32FL,0xD7372A9DBAFEFFDEL,0x0000000600E48727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_expression_in_createMacroStatement10756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropMacroStatement10800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_KW_TEMPORARY_in_dropMacroStatement10802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
	public static final BitSet FOLLOW_KW_MACRO_in_dropMacroStatement10804 = new BitSet(new long[]{0x0000000001000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ifExists_in_dropMacroStatement10806 = new BitSet(new long[]{0x0000000001000000L});
	public static final BitSet FOLLOW_Identifier_in_dropMacroStatement10809 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createViewStatement10851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x8000000000000000L});
	public static final BitSet FOLLOW_orReplace_in_createViewStatement10854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_createViewStatement10858 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_ifNotExists_in_createViewStatement10861 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_createViewStatement10867 = new BitSet(new long[]{0x2000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000008000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_createViewStatement10878 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameCommentList_in_createViewStatement10880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_createViewStatement10882 = new BitSet(new long[]{0x2000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000008000000L});
	public static final BitSet FOLLOW_tableComment_in_createViewStatement10886 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0000000008000000L});
	public static final BitSet FOLLOW_viewPartition_in_createViewStatement10889 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createViewStatement10900 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createViewStatement10911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000010000000000L,0x0000000000000001L,0x0000000000008080L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_createViewStatement10921 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CREATE_in_createMaterializedViewStatement11044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_MATERIALIZED_in_createMaterializedViewStatement11046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_createMaterializedViewStatement11048 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_ifNotExists_in_createMaterializedViewStatement11051 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_createMaterializedViewStatement11057 = new BitSet(new long[]{0x2000001000000000L,0x0000010000000000L,0x0000100000000000L,0x0800000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_rewriteEnabled_in_createMaterializedViewStatement11067 = new BitSet(new long[]{0x2000001000000000L,0x0000000000000000L,0x0000100000000000L,0x0800000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_tableComment_in_createMaterializedViewStatement11070 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000100000000000L,0x0800000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_tableRowFormat_in_createMaterializedViewStatement11073 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000008080000L});
	public static final BitSet FOLLOW_tableFileFormat_in_createMaterializedViewStatement11076 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_tableLocation_in_createMaterializedViewStatement11079 = new BitSet(new long[]{0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createMaterializedViewStatement11090 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_createMaterializedViewStatement11093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000010000000000L,0x0000000000000001L,0x0000000000008080L});
	public static final BitSet FOLLOW_selectStatementWithCTE_in_createMaterializedViewStatement11095 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITIONED_in_viewPartition11240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_ON_in_viewPartition11242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_viewPartition11244 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameList_in_viewPartition11246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_viewPartition11248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropViewStatement11287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_dropViewStatement11289 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_ifExists_in_dropViewStatement11291 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_viewName_in_dropViewStatement11294 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DROP_in_dropMaterializedViewStatement11332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
	public static final BitSet FOLLOW_KW_MATERIALIZED_in_dropMaterializedViewStatement11334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_KW_VIEW_in_dropMaterializedViewStatement11336 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D9C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_ifExists_in_dropMaterializedViewStatement11338 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_viewName_in_dropMaterializedViewStatement11341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionIdentifier_in_showFunctionIdentifier11379 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_showFunctionIdentifier11387 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_showStmtIdentifier11414 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_showStmtIdentifier11422 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_tableComment11455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableComment11459 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PARTITIONED_in_tablePartition11496 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tablePartition11498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_tablePartition11500 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameTypeList_in_tablePartition11502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_tablePartition11504 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CLUSTERED_in_tableBuckets11549 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableBuckets11551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_tableBuckets11553 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameList_in_tableBuckets11557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableBuckets11559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_SORTED_in_tableBuckets11562 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableBuckets11564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_tableBuckets11566 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameOrderList_in_tableBuckets11570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableBuckets11572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_INTO_in_tableBuckets11576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_tableBuckets11580 = new BitSet(new long[]{0x0000800000000000L});
	public static final BitSet FOLLOW_KW_BUCKETS_in_tableBuckets11582 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SKEWED_in_tableSkewed11634 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableSkewed11636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_tableSkewed11638 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameList_in_tableSkewed11642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableSkewed11644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_ON_in_tableSkewed11646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_tableSkewed11648 = new BitSet(new long[]{0x0000000002001000L,0x0020000000010C00L,0x0000000000000000L,0x0000000000000004L,0x0000008080000000L,0x0000000200608000L});
	public static final BitSet FOLLOW_skewedValueElement_in_tableSkewed11653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableSkewed11656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_storedAsDirs_in_tableSkewed11665 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatSerde_in_rowFormat11713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatDelimited_in_rowFormat11729 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RECORDREADER_in_recordReader11778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_recordReader11780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RECORDWRITER_in_recordWriter11829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_recordWriter11831 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROW_in_rowFormatSerde11880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatSerde11882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_SERDE_in_rowFormatSerde11884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_rowFormatSerde11888 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_WITH_in_rowFormatSerde11891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde11893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_rowFormatSerde11897 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROW_in_rowFormatDelimited11949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatDelimited11951 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_KW_DELIMITED_in_rowFormatDelimited11953 = new BitSet(new long[]{0x0400000000000002L,0x0080000000000000L,0x0004020000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited11955 = new BitSet(new long[]{0x0400000000000002L,0x0000000000000000L,0x0004020000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited11958 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0004020000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited11961 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000020000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited11964 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_tableRowNullFormat_in_rowFormatDelimited11967 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatDelimited_in_tableRowFormat12026 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rowFormatSerde_in_tableRowFormat12046 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed12093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_tablePropertiesPrefixed12096 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_tableProperties12129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_tablePropertiesList_in_tableProperties12131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_tableProperties12133 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList12174 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_tablePropertiesList12177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList12179 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList12204 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_tablePropertiesList12207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList12209 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty12255 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_EQUAL_in_keyValueProperty12257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty12261 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_StringLiteral_in_keyProperty12308 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier12352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier12354 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier12356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier12360 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
	public static final BitSet FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier12363 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier12365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier12369 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier12421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier12423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier12425 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier12427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier12431 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier12477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier12479 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier12481 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier12483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier12487 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier12533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier12535 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier12537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier12541 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NULL_in_tableRowNullFormat12587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
	public static final BitSet FOLLOW_KW_DEFINED_in_tableRowNullFormat12589 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableRowNullFormat12591 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableRowNullFormat12595 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat12650 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat12652 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_tableFileFormat12654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat12658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat12660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat12664 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_KW_INPUTDRIVER_in_tableFileFormat12667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat12671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
	public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat12673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat12677 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat12715 = new BitSet(new long[]{0x0001000000000000L});
	public static final BitSet FOLLOW_KW_BY_in_tableFileFormat12717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat12721 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat12733 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat12735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_tableProperties_in_tableFileFormat12739 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat12770 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_tableFileFormat12772 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_tableFileFormat12776 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCATION_in_tableLocation12824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_tableLocation12828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList12864 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameTypeList12867 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList12869 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList12907 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameTypeOrConstraintList12910 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA037L,0xD6B9F747B81D8C23L,0xE197F8EB7166C32AL,0xD7376A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameTypeOrConstraint_in_columnNameTypeOrConstraintList12912 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList12950 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameColonTypeList12953 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList12955 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_columnName_in_columnNameList12993 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameList12996 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnName_in_columnNameList12998 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_identifier_in_columnName13042 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_extColumnName13075 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_DOT_in_extColumnName13078 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_extColumnName13088 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_extColumnName13098 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_extColumnName13108 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_identifier_in_extColumnName13112 = new BitSet(new long[]{0x0000000000010002L});
	public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList13142 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameOrderList13145 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList13147 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_LPAREN_in_columnParenthesesList13185 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameList_in_columnParenthesesList13188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_columnParenthesesList13190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enableSpecification_in_enableValidateSpecification13218 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_validateSpecification_in_enableValidateSpecification13220 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ENABLE_in_enableSpecification13248 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DISABLE_in_enableSpecification13262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VALIDATE_in_validateSpecification13295 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOVALIDATE_in_validateSpecification13309 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_RELY_in_relySpecification13343 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NORELY_in_relySpecification13359 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_tableConstraint13395 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_tableConstraint13399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_tableConstraintType_in_tableConstraint13403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_tableConstraint13407 = new BitSet(new long[]{0x0000000000000000L,0x0000010080000000L,0x4000000000000000L,0x0000100000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_constraintTraits_in_tableConstraint13409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterConstraintWithName13487 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_alterConstraintWithName13491 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L,0x0000400000000000L});
	public static final BitSet FOLLOW_tableConstraintType_in_alterConstraintWithName13493 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_alterConstraintWithName13497 = new BitSet(new long[]{0x0000000000000002L,0x0000010080000000L});
	public static final BitSet FOLLOW_constraintOptsAlter_in_alterConstraintWithName13499 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterForeignKeyWithName13550 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_alterForeignKeyWithName13554 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_KW_FOREIGN_in_alterForeignKeyWithName13556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_KW_KEY_in_alterForeignKeyWithName13558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_alterForeignKeyWithName13562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_REFERENCES_in_alterForeignKeyWithName13565 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_alterForeignKeyWithName13569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_columnParenthesesList_in_alterForeignKeyWithName13573 = new BitSet(new long[]{0x0000000000000002L,0x0000010080000000L});
	public static final BitSet FOLLOW_constraintOptsAlter_in_alterForeignKeyWithName13575 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValues_in_skewedValueElement13639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePairList_in_skewedValueElement13648 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList13675 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_skewedColumnValuePairList13678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList13680 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_LPAREN_in_skewedColumnValuePair13725 = new BitSet(new long[]{0x0000000002001000L,0x0020000000010C00L,0x0000000000000000L,0x0000000000000004L,0x0000008080000000L,0x0000000200600000L});
	public static final BitSet FOLLOW_skewedColumnValues_in_skewedColumnValuePair13729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_skewedColumnValuePair13731 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues13774 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_skewedColumnValues13777 = new BitSet(new long[]{0x0000000002001000L,0x0020000000010C00L,0x0000000000000000L,0x0000000000000004L,0x0000008080000000L,0x0000000200600000L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues13779 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_constant_in_skewedColumnValue13823 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValue_in_skewedValueLocationElement13857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement13866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NULLS_in_nullOrdering13920 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_KW_FIRST_in_nullOrdering13922 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NULLS_in_nullOrdering13936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_KW_LAST_in_nullOrdering13938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameOrder13971 = new BitSet(new long[]{0x0000002000000002L,0x0000000004000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_orderSpecification_in_columnNameOrder13975 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_nullOrdering_in_columnNameOrder13980 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList14177 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_columnNameCommentList14180 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList14182 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_identifier_in_columnNameComment14222 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameComment14225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameComment14229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_columnRefOrder14277 = new BitSet(new long[]{0x0000002000000002L,0x0000000004000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_orderSpecification_in_columnRefOrder14281 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_nullOrdering_in_columnRefOrder14286 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameType14485 = new BitSet(new long[]{0x00401C0800000000L,0x0800000400130000L,0x0004000000400000L,0x0000000000000000L,0x2000200180600800L});
	public static final BitSet FOLLOW_colType_in_columnNameType14487 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameType14490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameType14494 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableConstraint_in_columnNameTypeOrConstraint14590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_columnNameTypeConstraint_in_columnNameTypeOrConstraint14602 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameTypeConstraint14633 = new BitSet(new long[]{0x00401C0800000000L,0x0800000400130000L,0x0004000000400000L,0x0000000000000000L,0x2000200180600800L});
	public static final BitSet FOLLOW_colType_in_columnNameTypeConstraint14635 = new BitSet(new long[]{0x2000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_colConstraint_in_columnNameTypeConstraint14637 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameTypeConstraint14641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameTypeConstraint14645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_colConstraint14706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_NULL_in_colConstraint14708 = new BitSet(new long[]{0x0000000000000000L,0x0000010080000000L,0x4000000000000000L,0x0000100000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_constraintTraits_in_colConstraint14710 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enableSpecification_in_constraintTraits14749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000100000000002L,0x0400000000000000L});
	public static final BitSet FOLLOW_validateSpecification_in_constraintTraits14752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_relySpecification_in_constraintTraits14755 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterForeignKeyConstraint_in_alterColumnConstraint14785 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterColConstraint_in_alterColumnConstraint14798 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterForeignKeyConstraint14829 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_alterForeignKeyConstraint14833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
	public static final BitSet FOLLOW_KW_REFERENCES_in_alterForeignKeyConstraint14837 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_alterForeignKeyConstraint14841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_alterForeignKeyConstraint14843 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnName_in_alterForeignKeyConstraint14847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_alterForeignKeyConstraint14849 = new BitSet(new long[]{0x0000000000000002L,0x0000010080000000L});
	public static final BitSet FOLLOW_constraintOptsAlter_in_alterForeignKeyConstraint14851 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CONSTRAINT_in_alterColConstraint14959 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_alterColConstraint14963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000001L,0x0000400000000000L});
	public static final BitSet FOLLOW_columnConstraintType_in_alterColConstraint14967 = new BitSet(new long[]{0x0000000000000002L,0x0000010080000000L});
	public static final BitSet FOLLOW_constraintOptsAlter_in_alterColConstraint14969 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NOT_in_columnConstraintType15034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_NULL_in_columnConstraintType15036 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableConstraintType_in_columnConstraintType15057 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_PRIMARY_in_tableConstraintType15074 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
	public static final BitSet FOLLOW_KW_KEY_in_tableConstraintType15076 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNIQUE_in_tableConstraintType15094 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enableValidateSpecification_in_constraintOptsCreate15129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_relySpecification_in_constraintOptsCreate15131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_enableValidateSpecification_in_constraintOptsAlter15148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_relySpecification_in_constraintOptsAlter15150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_identifier_in_columnNameColonType15179 = new BitSet(new long[]{0x0000000000000100L});
	public static final BitSet FOLLOW_COLON_in_columnNameColonType15181 = new BitSet(new long[]{0x00401C0800000000L,0x0800000400130000L,0x0004000000400000L,0x0000000000000000L,0x2000200180600800L});
	public static final BitSet FOLLOW_colType_in_columnNameColonType15183 = new BitSet(new long[]{0x2000000000000002L});
	public static final BitSet FOLLOW_KW_COMMENT_in_columnNameColonType15186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_columnNameColonType15190 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_type_in_colType15274 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_colType_in_colTypeList15301 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_colTypeList15304 = new BitSet(new long[]{0x00401C0800000000L,0x0800000400130000L,0x0004000000400000L,0x0000000000000000L,0x2000200180600800L});
	public static final BitSet FOLLOW_colType_in_colTypeList15306 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_primitiveType_in_type15334 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_listType_in_type15342 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_structType_in_type15350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mapType_in_type15358 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unionType_in_type15366 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TINYINT_in_primitiveType15388 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SMALLINT_in_primitiveType15409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INT_in_primitiveType15429 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BIGINT_in_primitiveType15454 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BOOLEAN_in_primitiveType15476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FLOAT_in_primitiveType15497 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DOUBLE_in_primitiveType15520 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
	public static final BitSet FOLLOW_KW_PRECISION_in_primitiveType15522 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATE_in_primitiveType15544 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DATETIME_in_primitiveType15568 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType15588 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STRING_in_primitiveType15622 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_BINARY_in_primitiveType15644 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DECIMAL_in_primitiveType15666 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType15669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_primitiveType15673 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_COMMA_in_primitiveType15676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_primitiveType15680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType15684 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VARCHAR_in_primitiveType15708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType15710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_primitiveType15714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType15716 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CHAR_in_primitiveType15741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_primitiveType15743 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_primitiveType15747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_primitiveType15749 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ARRAY_in_listType15793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LESSTHAN_in_listType15795 = new BitSet(new long[]{0x00401C0800000000L,0x0800000400130000L,0x0004000000400000L,0x0000000000000000L,0x2000200180600800L});
	public static final BitSet FOLLOW_type_in_listType15797 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_listType15799 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STRUCT_in_structType15836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LESSTHAN_in_structType15838 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameColonTypeList_in_structType15840 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_structType15842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MAP_in_mapType15877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LESSTHAN_in_mapType15879 = new BitSet(new long[]{0x00401C0000000000L,0x0800000400130000L,0x0000000000400000L,0x0000000000000000L,0x2000000180200800L});
	public static final BitSet FOLLOW_primitiveType_in_mapType15883 = new BitSet(new long[]{0x0000000000000200L});
	public static final BitSet FOLLOW_COMMA_in_mapType15885 = new BitSet(new long[]{0x00401C0800000000L,0x0800000400130000L,0x0004000000400000L,0x0000000000000000L,0x2000200180600800L});
	public static final BitSet FOLLOW_type_in_mapType15889 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_mapType15891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNIONTYPE_in_unionType15934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_LESSTHAN_in_unionType15936 = new BitSet(new long[]{0x00401C0800000000L,0x0800000400130000L,0x0004000000400000L,0x0000000000000000L,0x2000200180600800L});
	public static final BitSet FOLLOW_colTypeList_in_unionType15938 = new BitSet(new long[]{0x0000000000200000L});
	public static final BitSet FOLLOW_GREATERTHAN_in_unionType15940 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNION_in_setOperator15975 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_KW_ALL_in_setOperator15977 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UNION_in_setOperator15991 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator15993 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INTERSECT_in_setOperator16008 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_KW_ALL_in_setOperator16010 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INTERSECT_in_setOperator16024 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator16026 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXCEPT_in_setOperator16041 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_KW_ALL_in_setOperator16043 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_EXCEPT_in_setOperator16057 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator16059 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MINUS_in_setOperator16074 = new BitSet(new long[]{0x0000000040000000L});
	public static final BitSet FOLLOW_KW_ALL_in_setOperator16076 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_MINUS_in_setOperator16090 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
	public static final BitSet FOLLOW_KW_DISTINCT_in_setOperator16092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_withClause_in_queryStatementExpression16129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000200004L,0x0000010000000000L,0x0000000000000001L,0x0000000000008000L});
	public static final BitSet FOLLOW_queryStatementExpressionBody_in_queryStatementExpression16137 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fromStatement_in_queryStatementExpressionBody16169 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_regularBody_in_queryStatementExpressionBody16177 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WITH_in_withClause16194 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_cteStatement_in_withClause16196 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_withClause16199 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_cteStatement_in_withClause16201 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_identifier_in_cteStatement16227 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_cteStatement16229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_cteStatement16231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000200004L,0x0000010000000000L,0x0000000000000001L,0x0000000000008080L});
	public static final BitSet FOLLOW_queryStatementExpression_in_cteStatement16233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_cteStatement16235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_singleFromStatement_in_fromStatement16258 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L,0x0100000000800000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_setOperator_in_fromStatement16270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_singleFromStatement_in_fromStatement16274 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L,0x0100000000800000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_fromClause_in_singleFromStatement16481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000200000L,0x0000010000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_body_in_singleFromStatement16491 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0004000000200000L,0x0000010000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_insertClause_in_regularBody16528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000010000000000L,0x0800000000000001L,0x0000000000008000L});
	public static final BitSet FOLLOW_selectStatement_in_regularBody16540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_valuesClause_in_regularBody16565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectStatement_in_regularBody16689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_atomSelectStatement16709 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000284L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
	public static final BitSet FOLLOW_fromClause_in_atomSelectStatement16716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000280L,0x0000000000000000L,0x0000000000000000L,0x0000000000000050L});
	public static final BitSet FOLLOW_whereClause_in_atomSelectStatement16724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000280L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_groupByClause_in_atomSelectStatement16732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_havingClause_in_atomSelectStatement16740 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_window_clause_in_atomSelectStatement16748 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_atomSelectStatement16826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000010000000000L,0x0000000000000001L,0x0000000000008000L});
	public static final BitSet FOLLOW_selectStatement_in_atomSelectStatement16829 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_atomSelectStatement16831 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_atomSelectStatement_in_selectStatement16852 = new BitSet(new long[]{0x0080000000000002L,0x0000080200000000L,0x0100010000800000L,0x0000000000000800L,0x0000100000002000L});
	public static final BitSet FOLLOW_setOpSelectStatement_in_selectStatement16859 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000000L,0x0000000000000800L,0x0000000000002000L});
	public static final BitSet FOLLOW_orderByClause_in_selectStatement16868 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_clusterByClause_in_selectStatement16876 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_distributeByClause_in_selectStatement16884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_sortByClause_in_selectStatement16892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_limitClause_in_selectStatement16900 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setOperator_in_setOpSelectStatement17165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000010000000000L,0x0000000000000001L,0x0000000000008000L});
	public static final BitSet FOLLOW_atomSelectStatement_in_setOpSelectStatement17169 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L,0x0100000000800000L,0x0000000000000000L,0x0000100000000000L});
	public static final BitSet FOLLOW_withClause_in_selectStatementWithCTE17804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000010000000000L,0x0000000000000001L,0x0000000000008000L});
	public static final BitSet FOLLOW_selectStatement_in_selectStatementWithCTE17812 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_insertClause_in_body17842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000010000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_selectClause_in_body17847 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010800000280L,0x0000000000000800L,0x0000000000002000L,0x0000000000000050L});
	public static final BitSet FOLLOW_lateralView_in_body17852 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000280L,0x0000000000000800L,0x0000000000002000L,0x0000000000000050L});
	public static final BitSet FOLLOW_whereClause_in_body17858 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000280L,0x0000000000000800L,0x0000000000002000L,0x0000000000000040L});
	public static final BitSet FOLLOW_groupByClause_in_body17864 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000200L,0x0000000000000800L,0x0000000000002000L,0x0000000000000040L});
	public static final BitSet FOLLOW_havingClause_in_body17870 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000000L,0x0000000000000800L,0x0000000000002000L,0x0000000000000040L});
	public static final BitSet FOLLOW_window_clause_in_body17876 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000000L,0x0000000000000800L,0x0000000000002000L});
	public static final BitSet FOLLOW_orderByClause_in_body17882 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_clusterByClause_in_body17888 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_distributeByClause_in_body17894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_sortByClause_in_body17900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_limitClause_in_body17906 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selectClause_in_body17999 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010800000280L,0x0000000000000800L,0x0000000000002000L,0x0000000000000050L});
	public static final BitSet FOLLOW_lateralView_in_body18004 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000280L,0x0000000000000800L,0x0000000000002000L,0x0000000000000050L});
	public static final BitSet FOLLOW_whereClause_in_body18010 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000280L,0x0000000000000800L,0x0000000000002000L,0x0000000000000040L});
	public static final BitSet FOLLOW_groupByClause_in_body18016 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000200L,0x0000000000000800L,0x0000000000002000L,0x0000000000000040L});
	public static final BitSet FOLLOW_havingClause_in_body18022 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000000L,0x0000000000000800L,0x0000000000002000L,0x0000000000000040L});
	public static final BitSet FOLLOW_window_clause_in_body18028 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000000L,0x0000000000000800L,0x0000000000002000L});
	public static final BitSet FOLLOW_orderByClause_in_body18034 = new BitSet(new long[]{0x0080000000000002L,0x0000000200000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_clusterByClause_in_body18040 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_distributeByClause_in_body18046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000002000L});
	public static final BitSet FOLLOW_sortByClause_in_body18052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_limitClause_in_body18058 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_insertClause18179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
	public static final BitSet FOLLOW_KW_OVERWRITE_in_insertClause18181 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L,0x0000080000000000L,0x0000000000000000L,0x0000000001000000L});
	public static final BitSet FOLLOW_destination_in_insertClause18183 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_ifNotExists_in_insertClause18185 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_INSERT_in_insertClause18204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_INTO_in_insertClause18206 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3BFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_TABLE_in_insertClause18208 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableOrPartition_in_insertClause18211 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_LPAREN_in_insertClause18214 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnNameList_in_insertClause18218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
	public static final BitSet FOLLOW_RPAREN_in_insertClause18220 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LOCAL_in_destination18276 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_DIRECTORY_in_destination18280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_StringLiteral_in_destination18282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_tableRowFormat_in_destination18284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
	public static final BitSet FOLLOW_tableFileFormat_in_destination18287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_TABLE_in_destination18320 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableOrPartition_in_destination18322 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LIMIT_in_limitClause18354 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_limitClause18360 = new BitSet(new long[]{0x0000000000000200L});
	public static final BitSet FOLLOW_COMMA_in_limitClause18362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_limitClause18368 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_LIMIT_in_limitClause18391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_limitClause18395 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_KW_OFFSET_in_limitClause18397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_limitClause18401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DELETE_in_deleteStatement18445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_KW_FROM_in_deleteStatement18447 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_deleteStatement18449 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_whereClause_in_deleteStatement18452 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_tableOrColumn_in_columnAssignmentClause18485 = new BitSet(new long[]{0x0000000000040000L});
	public static final BitSet FOLLOW_EQUAL_in_columnAssignmentClause18487 = new BitSet(new long[]{0xB7BEDDAD3F001000L,0x1FB3A56EF76FAC27L,0xD6BDF747B95D9D23L,0xE197F8EB5166C32EL,0xD7372A9DBAFEFFDEL,0x0000000600E48727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_precedencePlusExpression_in_columnAssignmentClause18490 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_setColumnsClause18510 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnAssignmentClause_in_setColumnsClause18512 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_setColumnsClause18515 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_columnAssignmentClause_in_setColumnsClause18517 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_KW_UPDATE_in_updateStatement18559 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_updateStatement18561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_setColumnsClause_in_updateStatement18563 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
	public static final BitSet FOLLOW_whereClause_in_updateStatement18565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_startTransactionStatement_in_sqlTransactionStatement18607 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_commitStatement_in_sqlTransactionStatement18612 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rollbackStatement_in_sqlTransactionStatement18617 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_setAutoCommitStatement_in_sqlTransactionStatement18622 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_START_in_startTransactionStatement18636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_KW_TRANSACTION_in_startTransactionStatement18638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_transactionMode_in_startTransactionStatement18642 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_COMMA_in_startTransactionStatement18647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000800000000L});
	public static final BitSet FOLLOW_transactionMode_in_startTransactionStatement18649 = new BitSet(new long[]{0x0000000000000202L});
	public static final BitSet FOLLOW_isolationLevel_in_transactionMode18680 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_transactionAccessMode_in_transactionMode18686 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_READ_in_transactionAccessMode18709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
	public static final BitSet FOLLOW_KW_ONLY_in_transactionAccessMode18711 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_READ_in_transactionAccessMode18721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_KW_WRITE_in_transactionAccessMode18723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ISOLATION_in_isolationLevel18742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
	public static final BitSet FOLLOW_KW_LEVEL_in_isolationLevel18744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
	public static final BitSet FOLLOW_levelOfIsolation_in_isolationLevel18746 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SNAPSHOT_in_levelOfIsolation18771 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMMIT_in_commitStatement18790 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_KW_WORK_in_commitStatement18794 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ROLLBACK_in_rollbackStatement18816 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
	public static final BitSet FOLLOW_KW_WORK_in_rollbackStatement18820 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_SET_in_setAutoCommitStatement18841 = new BitSet(new long[]{0x0000008000000000L});
	public static final BitSet FOLLOW_KW_AUTOCOMMIT_in_setAutoCommitStatement18843 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
	public static final BitSet FOLLOW_booleanValueTok_in_setAutoCommitStatement18845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ABORT_in_abortTransactionStatement18880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
	public static final BitSet FOLLOW_KW_TRANSACTIONS_in_abortTransactionStatement18882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_Number_in_abortTransactionStatement18886 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_MERGE_in_mergeStatement18932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
	public static final BitSet FOLLOW_KW_INTO_in_mergeStatement18934 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_tableName_in_mergeStatement18936 = new BitSet(new long[]{0xB7A6C1B53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7B72A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_KW_AS_in_mergeStatement18939 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000000727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_identifier_in_mergeStatement18942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
	public static final BitSet FOLLOW_KW_USING_in_mergeStatement18946 = new BitSet(new long[]{0xB7A6C1A53D000000L,0x0783A56AF76EA027L,0xD6B9F747B81D8C23L,0xE197F8EB5166C32AL,0xD7372A1D3AFEF7DEL,0x0000000000008727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_joinSourcePart_in_mergeStatement18948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_KW_ON_in_mergeStatement18950 = new BitSet(new long[]{0xB7BEDDAD3F001000L,0x1FB3E56EF76FAC27L,0xD6BDF747B95D9D23L,0xE197F8EB5166C32FL,0xD7372A9DBAFEFFDEL,0x0000000600E48727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_expression_in_mergeStatement18952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_whenClauses_in_mergeStatement18954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_whenMatchedAndClause_in_whenClauses18999 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_whenMatchedThenClause_in_whenClauses19001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
	public static final BitSet FOLLOW_whenNotMatchedClause_in_whenClauses19005 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WHEN_in_whenNotMatchedClause19032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_KW_NOT_in_whenNotMatchedClause19034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_MATCHED_in_whenNotMatchedClause19036 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_AND_in_whenNotMatchedClause19039 = new BitSet(new long[]{0xB7BEDDAD3F001000L,0x1FB3E56EF76FAC27L,0xD6BDF747B95D9D23L,0xE197F8EB5166C32FL,0xD7372A9DBAFEFFDEL,0x0000000600E48727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_expression_in_whenNotMatchedClause19041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_THEN_in_whenNotMatchedClause19045 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_KW_INSERT_in_whenNotMatchedClause19047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
	public static final BitSet FOLLOW_KW_VALUES_in_whenNotMatchedClause19049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
	public static final BitSet FOLLOW_valueRowConstructor_in_whenNotMatchedClause19051 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WHEN_in_whenMatchedAndClause19094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_MATCHED_in_whenMatchedAndClause19096 = new BitSet(new long[]{0x0000000200000000L});
	public static final BitSet FOLLOW_KW_AND_in_whenMatchedAndClause19098 = new BitSet(new long[]{0xB7BEDDAD3F001000L,0x1FB3E56EF76FAC27L,0xD6BDF747B95D9D23L,0xE197F8EB5166C32FL,0xD7372A9DBAFEFFDEL,0x0000000600E48727L,0x0000001000000002L,0x4000000000088000L,0x0000000042000004L});
	public static final BitSet FOLLOW_expression_in_whenMatchedAndClause19100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_THEN_in_whenMatchedAndClause19102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_updateOrDelete_in_whenMatchedAndClause19104 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_WHEN_in_whenMatchedThenClause19142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
	public static final BitSet FOLLOW_KW_MATCHED_in_whenMatchedThenClause19144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
	public static final BitSet FOLLOW_KW_THEN_in_whenMatchedThenClause19146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
	public static final BitSet FOLLOW_updateOrDelete_in_whenMatchedThenClause19148 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_UPDATE_in_updateOrDelete19177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_setColumnsClause_in_updateOrDelete19179 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_DELETE_in_updateOrDelete19197 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_grantPrivileges_in_synpred1_HiveASTParser2518 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_revokePrivileges_in_synpred2_HiveASTParser2532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_alterStatementSuffixRename_in_synpred3_HiveASTParser4566 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_synpred4_HiveASTParser7253 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_synpred5_HiveASTParser7270 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_synpred6_HiveASTParser7287 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_FUNCTION_in_synpred8_HiveASTParser7495 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_COMPUTE_in_synpred10_HiveASTParser7654 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_CACHE_in_synpred11_HiveASTParser7794 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_synpred14_HiveASTParser9229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_NONE_in_synpred15_HiveASTParser9260 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ALL_in_synpred16_HiveASTParser9434 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_storedAsDirs_in_synpred17_HiveASTParser11660 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_STORED_in_synpred18_HiveASTParser12641 = new BitSet(new long[]{0x0000001000000000L});
	public static final BitSet FOLLOW_KW_AS_in_synpred18_HiveASTParser12643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_KW_INPUTFORMAT_in_synpred18_HiveASTParser12645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_ELEM_TYPE_in_synpred19_HiveASTParser13083 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_KEY_TYPE_in_synpred20_HiveASTParser13093 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_KW_VALUE_TYPE_in_synpred21_HiveASTParser13103 = new BitSet(new long[]{0x0000000000000002L});
}
